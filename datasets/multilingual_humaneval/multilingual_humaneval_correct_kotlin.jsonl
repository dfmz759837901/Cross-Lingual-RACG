{"task_id": "HumanEval_kotlin/11", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Input are two strings a and b consisting only of 1s and 0s.\n * Perform binary XOR on these inputs and return result also as a string.\n * >>> string_xor('010', '110')\n * '100'\n *\n */\nfun stringXor(a : String, b : String) : String {\n", "entry_point": "stringXor", "test": "\nfun main() {\n    var arg00 : String = \"\"\"111000\"\"\"\n    var arg01 : String = \"\"\"101010\"\"\"\n    var x0 : String = stringXor(arg00, arg01);\n    var v0 : String = \"\"\"010010\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"1\"\"\"\n    var arg11 : String = \"\"\"1\"\"\"\n    var x1 : String = stringXor(arg10, arg11);\n    var v1 : String = \"\"\"0\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"0101\"\"\"\n    var arg21 : String = \"\"\"0000\"\"\"\n    var x2 : String = stringXor(arg20, arg21);\n    var v2 : String = \"\"\"0101\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'", "language": "kotlin", "canonical_solution": "    return a.zip(b).map { (x, y) -> if (x == y) '0' else '1' }.joinToString(\"\")\n}", "code_without_comments": "fun stringXor(a : String, b : String) : String {\n    return a.zip(b).map { (x, y) -> if (x == y) '0' else '1' }.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/15", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * >>> string_sequence(0)\n * '0'\n * >>> string_sequence(5)\n * '0 1 2 3 4 5'\n *\n */\nfun stringSequence(n : Int) : String {\n", "entry_point": "stringSequence", "test": "\nfun main() {\n    var arg00 : Int = 0\n    var x0 : String = stringSequence(arg00);\n    var v0 : String = \"\"\"0\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 3\n    var x1 : String = stringSequence(arg10);\n    var v1 : String = \"\"\"0 1 2 3\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 10\n    var x2 : String = stringSequence(arg20);\n    var v2 : String = \"\"\"0 1 2 3 4 5 6 7 8 9 10\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'", "language": "kotlin", "canonical_solution": "    return (0..n).joinToString(\" \")\n}", "code_without_comments": "fun stringSequence(n : Int) : String {\n    return (0..n).joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/21", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given list of numbers (of at least two elements), apply a linear transform to that list,\n * such that the smallest number will become 0 and the largest will become 1\n * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n * [0.0, 0.25, 0.5, 0.75, 1.0]\n *\n */\nfun rescaleToUnit(numbers : List<Double>) : List<Double> {\n", "entry_point": "rescaleToUnit", "test": "\nfun main() {\n    var arg00 : List<Double> = mutableListOf(2.0, 49.9)\n    var x0 : List<Double> = rescaleToUnit(arg00);\n    var v0 : List<Double> = mutableListOf(0.0, 1.0);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Double> = mutableListOf(100.0, 49.9)\n    var x1 : List<Double> = rescaleToUnit(arg10);\n    var v1 : List<Double> = mutableListOf(1.0, 0.0);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Double> = mutableListOf(1.0, 2.0, 3.0, 4.0, 5.0)\n    var x2 : List<Double> = rescaleToUnit(arg20);\n    var v2 : List<Double> = mutableListOf(0.0, 0.25, 0.5, 0.75, 1.0);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Double> = mutableListOf(2.0, 1.0, 5.0, 3.0, 4.0)\n    var x3 : List<Double> = rescaleToUnit(arg30);\n    var v3 : List<Double> = mutableListOf(0.25, 0.0, 1.0, 0.5, 0.75);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Double> = mutableListOf(12.0, 11.0, 15.0, 13.0, 14.0)\n    var x4 : List<Double> = rescaleToUnit(arg40);\n    var v4 : List<Double> = mutableListOf(0.25, 0.0, 1.0, 0.5, 0.75);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]", "language": "kotlin", "canonical_solution": "    val min = numbers.minOrNull() ?: return emptyList()\n    val max = numbers.maxOrNull() ?: return emptyList()\n    val range = max - min\n    return numbers.map { (it - min) / range }\n}", "code_without_comments": "fun rescaleToUnit(numbers : List<Double>) : List<Double> {\n    val min = numbers.minOrNull() ?: return emptyList()\n    val max = numbers.maxOrNull() ?: return emptyList()\n    val range = max - min\n    return numbers.map { (it - min) / range }\n}"}
{"task_id": "HumanEval_kotlin/23", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return length of given string\n * >>> strlen('')\n * 0\n * >>> strlen('abc')\n * 3\n *\n */\nfun strlen(string : String) : Int {\n", "entry_point": "strlen", "test": "\nfun main() {\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : Int = strlen(arg00);\n    var v0 : Int = 0;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"x\"\"\"\n    var x1 : Int = strlen(arg10);\n    var v1 : Int = 1;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"asdasnakj\"\"\"\n    var x2 : Int = strlen(arg20);\n    var v2 : Int = 9;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3", "language": "kotlin", "canonical_solution": "return string.length\n}", "code_without_comments": "fun strlen(string : String) : Int {\nreturn string.length\n}"}
{"task_id": "HumanEval_kotlin/45", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given length of a side and high return area for a triangle.\n * >>> triangle_area(5, 3)\n * 7.5\n *\n */\nfun triangleArea(a : Int, h : Int) : Double {\n", "entry_point": "triangleArea", "test": "\nfun main() {\n    var arg00 : Int = 5\n    var arg01 : Int = 3\n    var x0 : Double = triangleArea(arg00, arg01);\n    var v0 : Double = 7.5;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 2\n    var arg11 : Int = 2\n    var x1 : Double = triangleArea(arg10, arg11);\n    var v1 : Double = 2.0;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 10\n    var arg21 : Int = 8\n    var x2 : Double = triangleArea(arg20, arg21);\n    var v2 : Double = 40.0;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5", "language": "kotlin", "canonical_solution": "    return (a * h) / 2.0\n}", "code_without_comments": "fun triangleArea(a : Int, h : Int) : Double {\n    return (a * h) / 2.0\n}"}
{"task_id": "HumanEval_kotlin/46", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n * fib4(0) -> 0\n * fib4(1) -> 0\n * fib4(2) -> 2\n * fib4(3) -> 0\n * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n * >>> fib4(5)\n * 4\n * >>> fib4(6)\n * 8\n * >>> fib4(7)\n * 14\n *\n */\nfun fib4(n : Int) : Int {\n", "entry_point": "fib4", "test": "\nfun main() {\n    var arg00 : Int = 5\n    var x0 : Int = fib4(arg00);\n    var v0 : Int = 4;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 8\n    var x1 : Int = fib4(arg10);\n    var v1 : Int = 28;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 10\n    var x2 : Int = fib4(arg20);\n    var v2 : Int = 104;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 12\n    var x3 : Int = fib4(arg30);\n    var v3 : Int = 386;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14", "language": "kotlin", "canonical_solution": "    val dp = IntArray(n + 1)\n    if (n >= 0) dp[0] = 0\n    if (n >= 1) dp[1] = 0\n    if (n >= 2) dp[2] = 2\n    if (n >= 3) dp[3] = 0\n    for (i in 4..n) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    }\n    return dp[n]\n}", "code_without_comments": "fun fib4(n : Int) : Int {\n    val dp = IntArray(n + 1)\n    if (n >= 0) dp[0] = 0\n    if (n >= 1) dp[1] = 0\n    if (n >= 2) dp[2] = 2\n    if (n >= 3) dp[3] = 0\n    for (i in 4..n) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    }\n    return dp[n]\n}"}
{"task_id": "HumanEval_kotlin/47", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return median of elements in the list l.\n * >>> median([3, 1, 2, 4, 5])\n * 3\n * >>> median([-10, 4, 6, 1000, 10, 20])\n * 15.0\n *\n */\nfun median(l : List<Int>) : Any {\n", "entry_point": "median", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(3, 1, 2, 4, 5)\n    var x0 : Any = median(arg00);\n    var v0 : Any = 3;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(-10, 4, 6, 1000, 10, 20)\n    var x1 : Any = median(arg10);\n    var v1 : Any = 8.0;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(5)\n    var x2 : Any = median(arg20);\n    var v2 : Any = 5;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(6, 5)\n    var x3 : Any = median(arg30);\n    var v3 : Any = 5.5;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(8, 1, 3, 9, 9, 2, 7)\n    var x4 : Any = median(arg40);\n    var v4 : Any = 7;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0", "language": "kotlin", "canonical_solution": "    val sortedList = l.sorted()\n    val size = sortedList.size\n    return if (size % 2 == 0) {\n        (sortedList[size / 2 - 1] + sortedList[size / 2]) / 2.0\n    } else {\n        sortedList[size / 2]\n    }\n}", "code_without_comments": "fun median(l : List<Int>) : Any {\n    val sortedList = l.sorted()\n    val size = sortedList.size\n    return if (size % 2 == 0) {\n        (sortedList[size / 2 - 1] + sortedList[size / 2]) / 2.0\n    } else {\n        sortedList[size / 2]\n    }\n}"}
{"task_id": "HumanEval_kotlin/60", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * sum_to_n is a function that sums numbers from 1 to n.\n * >>> sum_to_n(30)\n * 465\n * >>> sum_to_n(100)\n * 5050\n * >>> sum_to_n(5)\n * 15\n * >>> sum_to_n(10)\n * 55\n * >>> sum_to_n(1)\n * 1\n *\n */\nfun sumToN(n : Int) : Int {\n", "entry_point": "sumToN", "test": "\nfun main() {\n    var arg00 : Int = 1\n    var x0 : Int = sumToN(arg00);\n    var v0 : Int = 1;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 6\n    var x1 : Int = sumToN(arg10);\n    var v1 : Int = 21;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 11\n    var x2 : Int = sumToN(arg20);\n    var v2 : Int = 66;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 30\n    var x3 : Int = sumToN(arg30);\n    var v3 : Int = 465;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 100\n    var x4 : Int = sumToN(arg40);\n    var v4 : Int = 5050;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1", "language": "kotlin", "canonical_solution": "    return (1..n).sum()\n}", "code_without_comments": "fun sumToN(n : Int) : Int {\n    return (1..n).sum()\n}"}
{"task_id": "HumanEval_kotlin/80", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * You are given a string s.\n * Your task is to check if the string is happy or not.\n * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n * For example:\n * is_happy(a) => False\n * is_happy(aa) => False\n * is_happy(abcd) => True\n * is_happy(aabb) => False\n * is_happy(adb) => True\n * is_happy(xyy) => False\n *\n */\nfun isHappy(s : String) : Boolean {\n", "entry_point": "isHappy", "test": "\nfun main() {\n    var arg00 : String = \"\"\"a\"\"\"\n    var x0 : Boolean = isHappy(arg00);\n    var v0 : Boolean = false;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"aa\"\"\"\n    var x1 : Boolean = isHappy(arg10);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"abcd\"\"\"\n    var x2 : Boolean = isHappy(arg20);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"aabb\"\"\"\n    var x3 : Boolean = isHappy(arg30);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"adb\"\"\"\n    var x4 : Boolean = isHappy(arg40);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"xyy\"\"\"\n    var x5 : Boolean = isHappy(arg50);\n    var v5 : Boolean = false;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"iopaxpoi\"\"\"\n    var x6 : Boolean = isHappy(arg60);\n    var v6 : Boolean = true;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"iopaxioi\"\"\"\n    var x7 : Boolean = isHappy(arg70);\n    var v7 : Boolean = false;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False", "language": "kotlin", "canonical_solution": "    if (s.length < 3) return false\n    for (i in 0..s.length - 3) {\n        if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) return false\n    }\n    return true\n}", "code_without_comments": "fun isHappy(s : String) : Boolean {\n    if (s.length < 3) return false\n    for (i in 0..s.length - 3) {\n        if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/112", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Task\n * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n * then check if the result string is palindrome.\n * A string is called palindrome if it reads the same backward as forward.\n * You should return a tuple containing the result string and True/False for the check.\n * Example\n * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n *\n */\nfun reverseDelete(s : String, c : String) : List<Any> {\n", "entry_point": "reverseDelete", "test": "\nfun main() {\n    var arg00 : String = \"\"\"abcde\"\"\"\n    var arg01 : String = \"\"\"ae\"\"\"\n    var x0 : List<Any> = reverseDelete(arg00, arg01);\n    var v0 : List<Any> = mutableListOf(\"\"\"bcd\"\"\", false);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"abcdef\"\"\"\n    var arg11 : String = \"\"\"b\"\"\"\n    var x1 : List<Any> = reverseDelete(arg10, arg11);\n    var v1 : List<Any> = mutableListOf(\"\"\"acdef\"\"\", false);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"abcdedcba\"\"\"\n    var arg21 : String = \"\"\"ab\"\"\"\n    var x2 : List<Any> = reverseDelete(arg20, arg21);\n    var v2 : List<Any> = mutableListOf(\"\"\"cdedc\"\"\", true);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"dwik\"\"\"\n    var arg31 : String = \"\"\"w\"\"\"\n    var x3 : List<Any> = reverseDelete(arg30, arg31);\n    var v3 : List<Any> = mutableListOf(\"\"\"dik\"\"\", false);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"a\"\"\"\n    var arg41 : String = \"\"\"a\"\"\"\n    var x4 : List<Any> = reverseDelete(arg40, arg41);\n    var v4 : List<Any> = mutableListOf(\"\"\"\"\"\", true);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"abcdedcba\"\"\"\n    var arg51 : String = \"\"\"\"\"\"\n    var x5 : List<Any> = reverseDelete(arg50, arg51);\n    var v5 : List<Any> = mutableListOf(\"\"\"abcdedcba\"\"\", true);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"abcdedcba\"\"\"\n    var arg61 : String = \"\"\"v\"\"\"\n    var x6 : List<Any> = reverseDelete(arg60, arg61);\n    var v6 : List<Any> = mutableListOf(\"\"\"abcdedcba\"\"\", true);\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"vabba\"\"\"\n    var arg71 : String = \"\"\"v\"\"\"\n    var x7 : List<Any> = reverseDelete(arg70, arg71);\n    var v7 : List<Any> = mutableListOf(\"\"\"abba\"\"\", true);\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : String = \"\"\"mamma\"\"\"\n    var arg81 : String = \"\"\"mia\"\"\"\n    var x8 : List<Any> = reverseDelete(arg80, arg81);\n    var v8 : List<Any> = mutableListOf(\"\"\"\"\"\", true);\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n\n}\n", "description": "Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)", "language": "kotlin", "canonical_solution": "    val result = s.filter { !c.contains(it) }\n    val isPalindrome = result == result.reversed()\n    return listOf(result, isPalindrome)\n}", "code_without_comments": "fun reverseDelete(s : String, c : String) : List<Any> {\n    val result = s.filter { !c.contains(it) }\n    val isPalindrome = result == result.reversed()\n    return listOf(result, isPalindrome)\n}"}
{"task_id": "HumanEval_kotlin/0", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n * False\n * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * True\n *\n */\nfun hasCloseElements(numbers : List<Double>, threshold : Double) : Boolean {\n", "entry_point": "hasCloseElements", "test": "\nfun main() {\n    var arg00 : List<Double> = mutableListOf(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)\n    var arg01 : Double = 0.3\n    var x0 : Boolean = hasCloseElements(arg00, arg01);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Double> = mutableListOf(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)\n    var arg11 : Double = 0.05\n    var x1 : Boolean = hasCloseElements(arg10, arg11);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Double> = mutableListOf(1.0, 2.0, 5.9, 4.0, 5.0)\n    var arg21 : Double = 0.95\n    var x2 : Boolean = hasCloseElements(arg20, arg21);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Double> = mutableListOf(1.0, 2.0, 5.9, 4.0, 5.0)\n    var arg31 : Double = 0.8\n    var x3 : Boolean = hasCloseElements(arg30, arg31);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Double> = mutableListOf(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)\n    var arg41 : Double = 0.1\n    var x4 : Boolean = hasCloseElements(arg40, arg41);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Double> = mutableListOf(1.1, 2.2, 3.1, 4.1, 5.1)\n    var arg51 : Double = 1.0\n    var x5 : Boolean = hasCloseElements(arg50, arg51);\n    var v5 : Boolean = true;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Double> = mutableListOf(1.1, 2.2, 3.1, 4.1, 5.1)\n    var arg61 : Double = 0.5\n    var x6 : Boolean = hasCloseElements(arg60, arg61);\n    var v6 : Boolean = false;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True", "language": "kotlin", "canonical_solution": "\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) return true\n        }\n    }\n    return false\n}\n", "code_without_comments": "fun hasCloseElements(numbers : List<Double>, threshold : Double) : Boolean {\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) return true\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/1", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n * separate those group into separate strings and return the list of those.\n * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n * Ignore any spaces in the input string.\n * >>> separate_paren_groups('( ) (( )) (( )( ))')\n * ['()', '(())', '(()())']\n *\n */\nfun separateParenGroups(parenString : String) : List<String> {\n", "entry_point": "separateParenGroups", "test": "\nfun main() {\n    var arg00 : String = \"\"\"(()()) ((())) () ((())()())\"\"\"\n    var x0 : List<String> = separateParenGroups(arg00);\n    var v0 : List<String> = mutableListOf(\"\"\"(()())\"\"\", \"\"\"((()))\"\"\", \"\"\"()\"\"\", \"\"\"((())()())\"\"\");\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"() (()) ((())) (((())))\"\"\"\n    var x1 : List<String> = separateParenGroups(arg10);\n    var v1 : List<String> = mutableListOf(\"\"\"()\"\"\", \"\"\"(())\"\"\", \"\"\"((()))\"\"\", \"\"\"(((())))\"\"\");\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"(()(())((())))\"\"\"\n    var x2 : List<String> = separateParenGroups(arg20);\n    var v2 : List<String> = mutableListOf(\"\"\"(()(())((())))\"\"\");\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"( ) (( )) (( )( ))\"\"\"\n    var x3 : List<String> = separateParenGroups(arg30);\n    var v3 : List<String> = mutableListOf(\"\"\"()\"\"\", \"\"\"(())\"\"\", \"\"\"(()())\"\"\");\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']", "language": "kotlin", "canonical_solution": "\n    val result = mutableListOf<String>()\n    val currentString = mutableListOf<Char>()\n    var currentDepth = 0\n    for (c in parenString) {\n        if (c == '(') {\n            currentDepth += 1\n            currentString.add(c)\n        } else if (c == ')') {\n            currentDepth -= 1\n            currentString.add(c)\n            if (currentDepth == 0) {\n                result.add(String(currentString.toCharArray()))\n                currentString.clear()\n            }\n        }\n    }\n    return result\n}\n", "code_without_comments": "fun separateParenGroups(parenString : String) : List<String> {\n    val result = mutableListOf<String>()\n    val currentString = mutableListOf<Char>()\n    var currentDepth = 0\n    for (c in parenString) {\n        if (c == '(') {\n            currentDepth += 1\n            currentString.add(c)\n        } else if (c == ')') {\n            currentDepth -= 1\n            currentString.add(c)\n            if (currentDepth == 0) {\n                result.add(String(currentString.toCharArray()))\n                currentString.clear()\n            }\n        }\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/4", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given list of input numbers, calculate Mean Absolute Deviation\n * around the mean of this dataset.\n * Mean Absolute Deviation is the average absolute difference between each\n * element and a centerpoint (mean in this case):\n * MAD = average | x - x_mean |\n * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n * 1.0\n *\n */\nfun meanAbsoluteDeviation(numbers : List<Double>) : Double {\n", "entry_point": "meanAbsoluteDeviation", "test": "\nfun main() {\n    var arg00 : List<Double> = mutableListOf(1.0, 2.0, 3.0)\n    var x0 : Double = meanAbsoluteDeviation(arg00);\n    var v0 : Double = 0.6666666666666666;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Double> = mutableListOf(1.0, 2.0, 3.0, 4.0)\n    var x1 : Double = meanAbsoluteDeviation(arg10);\n    var v1 : Double = 1.0;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Double> = mutableListOf(1.0, 2.0, 3.0, 4.0, 5.0)\n    var x2 : Double = meanAbsoluteDeviation(arg20);\n    var v2 : Double = 1.2;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0", "language": "kotlin", "canonical_solution": "\n    val mean = numbers.average()\n    return numbers.map { Math.abs(it - mean) }.average()\n}\n", "code_without_comments": "fun meanAbsoluteDeviation(numbers : List<Double>) : Double {\n    val mean = numbers.average()\n    return numbers.map { Math.abs(it - mean) }.average()\n}"}
{"task_id": "HumanEval_kotlin/5", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n * >>> intersperse([], 4)\n * []\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n *\n */\nfun intersperse(numbers : List<Any>, delimeter : Int) : List<Any> {\n", "entry_point": "intersperse", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var arg01 : Int = 7\n    var x0 : List<Any> = intersperse(arg00, arg01);\n    var v0 : List<Any> = mutableListOf();\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(5, 6, 3, 2)\n    var arg11 : Int = 8\n    var x1 : List<Any> = intersperse(arg10, arg11);\n    var v1 : List<Any> = mutableListOf(5, 8, 6, 8, 3, 8, 2);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(2, 2, 2)\n    var arg21 : Int = 2\n    var x2 : List<Any> = intersperse(arg20, arg21);\n    var v2 : List<Any> = mutableListOf(2, 2, 2, 2, 2);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]", "language": "kotlin", "canonical_solution": "\n    if (numbers.isEmpty()) return numbers\n    val result = mutableListOf<Any>()\n    for (i in numbers.indices) {\n        result.add(numbers[i])\n        if (i < numbers.size - 1) {\n            result.add(delimeter)\n        }\n    }\n    return result\n}\n", "code_without_comments": "fun intersperse(numbers : List<Any>, delimeter : Int) : List<Any> {\n    if (numbers.isEmpty()) return numbers\n    val result = mutableListOf<Any>()\n    for (i in numbers.indices) {\n        result.add(numbers[i])\n        if (i < numbers.size - 1) {\n            result.add(delimeter)\n        }\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/6", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n * For each of the group, output the deepest level of nesting of parentheses.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n * >>> parse_nested_parens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n *\n */\nfun parseNestedParens(parenString : String) : List<Int> {\n", "entry_point": "parseNestedParens", "test": "\nfun main() {\n    var arg00 : String = \"\"\"(()()) ((())) () ((())()())\"\"\"\n    var x0 : List<Int> = parseNestedParens(arg00);\n    var v0 : List<Int> = mutableListOf(2, 3, 1, 3);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"() (()) ((())) (((())))\"\"\"\n    var x1 : List<Int> = parseNestedParens(arg10);\n    var v1 : List<Int> = mutableListOf(1, 2, 3, 4);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"(()(())((())))\"\"\"\n    var x2 : List<Int> = parseNestedParens(arg20);\n    var v2 : List<Int> = mutableListOf(4);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]", "language": "kotlin", "canonical_solution": "\n    val nestingLevels = mutableListOf<Int>()\n    val groups = parenString.split(\" \")\n    for (group in groups) {\n        var maxDepth = 0\n        var currentDepth = 0\n        for (c in group) {\n            if (c == '(') {\n                currentDepth++\n                maxDepth = maxOf(maxDepth, currentDepth)\n            } else if (c == ')') {\n                currentDepth--\n            }\n        }\n        nestingLevels.add(maxDepth)\n    }\n    return nestingLevels\n}\n", "code_without_comments": "fun parseNestedParens(parenString : String) : List<Int> {\n    val nestingLevels = mutableListOf<Int>()\n    val groups = parenString.split(\" \")\n    for (group in groups) {\n        var maxDepth = 0\n        var currentDepth = 0\n        for (c in group) {\n            if (c == '(') {\n                currentDepth++\n                maxDepth = maxOf(maxDepth, currentDepth)\n            } else if (c == ')') {\n                currentDepth--\n            }\n        }\n        nestingLevels.add(maxDepth)\n    }\n    return nestingLevels\n}"}
{"task_id": "HumanEval_kotlin/7", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Filter an input list of strings only for ones that contain given substring\n * >>> filter_by_substring([], 'a')\n * []\n * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n *\n */\nfun filterBySubstring(strings : List<Any>, substring : String) : List<Any> {\n", "entry_point": "filterBySubstring", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var arg01 : String = \"\"\"john\"\"\"\n    var x0 : List<Any> = filterBySubstring(arg00, arg01);\n    var v0 : List<Any> = mutableListOf();\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(\"\"\"xxx\"\"\", \"\"\"asd\"\"\", \"\"\"xxy\"\"\", \"\"\"john doe\"\"\", \"\"\"xxxAAA\"\"\", \"\"\"xxx\"\"\")\n    var arg11 : String = \"\"\"xxx\"\"\"\n    var x1 : List<Any> = filterBySubstring(arg10, arg11);\n    var v1 : List<Any> = mutableListOf(\"\"\"xxx\"\"\", \"\"\"xxxAAA\"\"\", \"\"\"xxx\"\"\");\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(\"\"\"xxx\"\"\", \"\"\"asd\"\"\", \"\"\"aaaxxy\"\"\", \"\"\"john doe\"\"\", \"\"\"xxxAAA\"\"\", \"\"\"xxx\"\"\")\n    var arg21 : String = \"\"\"xx\"\"\"\n    var x2 : List<Any> = filterBySubstring(arg20, arg21);\n    var v2 : List<Any> = mutableListOf(\"\"\"xxx\"\"\", \"\"\"aaaxxy\"\"\", \"\"\"xxxAAA\"\"\", \"\"\"xxx\"\"\");\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(\"\"\"grunt\"\"\", \"\"\"trumpet\"\"\", \"\"\"prune\"\"\", \"\"\"gruesome\"\"\")\n    var arg31 : String = \"\"\"run\"\"\"\n    var x3 : List<Any> = filterBySubstring(arg30, arg31);\n    var v3 : List<Any> = mutableListOf(\"\"\"grunt\"\"\", \"\"\"prune\"\"\");\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']", "language": "kotlin", "canonical_solution": "\n    return strings.filter { it is String && it.contains(substring) }\n}\n", "code_without_comments": "fun filterBySubstring(strings : List<Any>, substring : String) : List<Any> {\n    return strings.filter { it is String && it.contains(substring) }\n}"}
{"task_id": "HumanEval_kotlin/10", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Find the shortest palindrome that begins with a supplied string.\n * Algorithm idea is simple:\n * - Find the longest postfix of supplied string that is a palindrome.\n * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n * >>> make_palindrome('')\n * ''\n * >>> make_palindrome('cat')\n * 'catac'\n * >>> make_palindrome('cata')\n * 'catac'\n *\n */\nfun makePalindrome(string : String) : String {\n", "entry_point": "makePalindrome", "test": "\nfun main() {\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : String = makePalindrome(arg00);\n    var v0 : String = \"\"\"\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"x\"\"\"\n    var x1 : String = makePalindrome(arg10);\n    var v1 : String = \"\"\"x\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"xyz\"\"\"\n    var x2 : String = makePalindrome(arg20);\n    var v2 : String = \"\"\"xyzyx\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"xyx\"\"\"\n    var x3 : String = makePalindrome(arg30);\n    var v3 : String = \"\"\"xyx\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"jerry\"\"\"\n    var x4 : String = makePalindrome(arg40);\n    var v4 : String = \"\"\"jerryrrej\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'", "language": "kotlin", "canonical_solution": "\n    if (string.isEmpty()) return \"\"\n    var beginningOfSuffix = 0\n    while (!isPalindrome(string.substring(beginningOfSuffix))) {\n        beginningOfSuffix++\n    }\n    val prefixToReverse = string.substring(0, beginningOfSuffix)\n    val reversedPrefix = prefixToReverse.reversed()\n    return string + reversedPrefix\n}\nprivate fun isPalindrome(str: String): Boolean {\n    return str == str.reversed()\n}\n", "code_without_comments": "fun makePalindrome(string : String) : String {\n    if (string.isEmpty()) return \"\"\n    var beginningOfSuffix = 0\n    while (!isPalindrome(string.substring(beginningOfSuffix))) {\n        beginningOfSuffix++\n    }\n    val prefixToReverse = string.substring(0, beginningOfSuffix)\n    val reversedPrefix = prefixToReverse.reversed()\n    return string + reversedPrefix\n}\nprivate fun isPalindrome(str: String): Boolean {\n    return str == str.reversed()\n}"}
{"task_id": "HumanEval_kotlin/14", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return list of all prefixes from shortest to longest of the input string\n * >>> all_prefixes('abc')\n * ['a', 'ab', 'abc']\n *\n */\nfun allPrefixes(string : String) : List<Any> {\n", "entry_point": "allPrefixes", "test": "\nfun main() {\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : List<Any> = allPrefixes(arg00);\n    var v0 : List<Any> = mutableListOf();\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"asdfgh\"\"\"\n    var x1 : List<Any> = allPrefixes(arg10);\n    var v1 : List<Any> = mutableListOf(\"\"\"a\"\"\", \"\"\"as\"\"\", \"\"\"asd\"\"\", \"\"\"asdf\"\"\", \"\"\"asdfg\"\"\", \"\"\"asdfgh\"\"\");\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"WWW\"\"\"\n    var x2 : List<Any> = allPrefixes(arg20);\n    var v2 : List<Any> = mutableListOf(\"\"\"W\"\"\", \"\"\"WW\"\"\", \"\"\"WWW\"\"\");\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']", "language": "kotlin", "canonical_solution": "\n    val prefixes = mutableListOf<Any>()\n    for (i in 1..string.length) {\n        prefixes.add(string.substring(0, i))\n    }\n    return prefixes\n}\n", "code_without_comments": "fun allPrefixes(string : String) : List<Any> {\n    val prefixes = mutableListOf<Any>()\n    for (i in 1..string.length) {\n        prefixes.add(string.substring(0, i))\n    }\n    return prefixes\n}"}
{"task_id": "HumanEval_kotlin/16", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> count_distinct_characters('xyzXYZ')\n * 3\n * >>> count_distinct_characters('Jerry')\n * 4\n *\n */\nfun countDistinctCharacters(string : String) : Int {\n", "entry_point": "countDistinctCharacters", "test": "\nfun main() {\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : Int = countDistinctCharacters(arg00);\n    var v0 : Int = 0;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"abcde\"\"\"\n    var x1 : Int = countDistinctCharacters(arg10);\n    var v1 : Int = 5;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"abcdecadeCADE\"\"\"\n    var x2 : Int = countDistinctCharacters(arg20);\n    var v2 : Int = 5;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"aaaaAAAAaaaa\"\"\"\n    var x3 : Int = countDistinctCharacters(arg30);\n    var v3 : Int = 1;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"Jerry jERRY JeRRRY\"\"\"\n    var x4 : Int = countDistinctCharacters(arg40);\n    var v4 : Int = 5;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4", "language": "kotlin", "canonical_solution": "\n    val set = mutableSetOf<Char>()\n    for (c in string.lowercase()) {\n        set.add(c)\n    }\n    return set.size\n}\n", "code_without_comments": "fun countDistinctCharacters(string : String) : Int {\n    val set = mutableSetOf<Char>()\n    for (c in string.lowercase()) {\n        set.add(c)\n    }\n    return set.size\n}"}
{"task_id": "HumanEval_kotlin/18", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n * >>> how_many_times('', 'a')\n * 0\n * >>> how_many_times('aaa', 'a')\n * 3\n * >>> how_many_times('aaaa', 'aa')\n * 3\n *\n */\nfun howManyTimes(string : String, substring : String) : Int {\n", "entry_point": "howManyTimes", "test": "\nfun main() {\n    var arg00 : String = \"\"\"\"\"\"\n    var arg01 : String = \"\"\"x\"\"\"\n    var x0 : Int = howManyTimes(arg00, arg01);\n    var v0 : Int = 0;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"xyxyxyx\"\"\"\n    var arg11 : String = \"\"\"x\"\"\"\n    var x1 : Int = howManyTimes(arg10, arg11);\n    var v1 : Int = 4;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"cacacacac\"\"\"\n    var arg21 : String = \"\"\"cac\"\"\"\n    var x2 : Int = howManyTimes(arg20, arg21);\n    var v2 : Int = 4;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"john doe\"\"\"\n    var arg31 : String = \"\"\"john\"\"\"\n    var x3 : Int = howManyTimes(arg30, arg31);\n    var v3 : Int = 1;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3", "language": "kotlin", "canonical_solution": "\n    var times = 0\n    for (i in 0..string.length - substring.length) {\n        if (string.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}\n", "code_without_comments": "fun howManyTimes(string : String, substring : String) : Int {\n    var times = 0\n    for (i in 0..string.length - substring.length) {\n        if (string.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}"}
{"task_id": "HumanEval_kotlin/19", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n * Return the string with numbers sorted from smallest to largest\n * >>> sort_numbers('three one five')\n * 'one three five'\n *\n */\nfun sortNumbers(numbers : String) : String {\n", "entry_point": "sortNumbers", "test": "\nfun main() {\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : String = sortNumbers(arg00);\n    var v0 : String = \"\"\"\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"three\"\"\"\n    var x1 : String = sortNumbers(arg10);\n    var v1 : String = \"\"\"three\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"three five nine\"\"\"\n    var x2 : String = sortNumbers(arg20);\n    var v2 : String = \"\"\"three five nine\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"five zero four seven nine eight\"\"\"\n    var x3 : String = sortNumbers(arg30);\n    var v3 : String = \"\"\"zero four five seven eight nine\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"six five four three two one zero\"\"\"\n    var x4 : String = sortNumbers(arg40);\n    var v4 : String = \"\"\"zero one two three four five six\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'", "language": "kotlin", "canonical_solution": "\n    val numberMap = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n    val numberArray = numbers.split(\" \").filter { it.isNotEmpty() }\n    val sortedNumbers = numberArray.sortedWith(compareBy { numberMap[it] })\n    return sortedNumbers.joinToString(\" \")\n}\n", "code_without_comments": "fun sortNumbers(numbers : String) : String {\n    val numberMap = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n    val numberArray = numbers.split(\" \").filter { it.isNotEmpty() }\n    val sortedNumbers = numberArray.sortedWith(compareBy { numberMap[it] })\n    return sortedNumbers.joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/24", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n * 5\n *\n */\nfun largestDivisor(n : Int) : Int {\n", "entry_point": "largestDivisor", "test": "\nfun main() {\n    var arg00 : Int = 3\n    var x0 : Int = largestDivisor(arg00);\n    var v0 : Int = 1;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 7\n    var x1 : Int = largestDivisor(arg10);\n    var v1 : Int = 1;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 10\n    var x2 : Int = largestDivisor(arg20);\n    var v2 : Int = 5;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 100\n    var x3 : Int = largestDivisor(arg30);\n    var v3 : Int = 50;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 49\n    var x4 : Int = largestDivisor(arg40);\n    var v4 : Int = 7;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5", "language": "kotlin", "canonical_solution": "\n    for (i in n - 1 downTo 1) {\n        if (n % i == 0) {\n            return i\n        }\n    }\n    return 1\n}\n", "code_without_comments": "fun largestDivisor(n : Int) : Int {\n    for (i in n - 1 downTo 1) {\n        if (n % i == 0) {\n            return i\n        }\n    }\n    return 1\n}"}
{"task_id": "HumanEval_kotlin/25", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return list of prime factors of given integer in the order from smallest to largest.\n * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n * Input number should be equal to the product of all factors\n * >>> factorize(8)\n * [2, 2, 2]\n * >>> factorize(25)\n * [5, 5]\n * >>> factorize(70)\n * [2, 5, 7]\n *\n */\nfun factorize(n : Int) : List<Int> {\n", "entry_point": "factorize", "test": "\nfun main() {\n    var arg00 : Int = 2\n    var x0 : List<Int> = factorize(arg00);\n    var v0 : List<Int> = mutableListOf(2);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 4\n    var x1 : List<Int> = factorize(arg10);\n    var v1 : List<Int> = mutableListOf(2, 2);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 8\n    var x2 : List<Int> = factorize(arg20);\n    var v2 : List<Int> = mutableListOf(2, 2, 2);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 57\n    var x3 : List<Int> = factorize(arg30);\n    var v3 : List<Int> = mutableListOf(3, 19);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 3249\n    var x4 : List<Int> = factorize(arg40);\n    var v4 : List<Int> = mutableListOf(3, 3, 19, 19);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Int = 185193\n    var x5 : List<Int> = factorize(arg50);\n    var v5 : List<Int> = mutableListOf(3, 3, 3, 19, 19, 19);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Int = 20577\n    var x6 : List<Int> = factorize(arg60);\n    var v6 : List<Int> = mutableListOf(3, 19, 19, 19);\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : Int = 18\n    var x7 : List<Int> = factorize(arg70);\n    var v7 : List<Int> = mutableListOf(2, 3, 3);\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]", "language": "kotlin", "canonical_solution": "\n    val fact = mutableListOf<Int>()\n    var currentN = n\n    var factor = 2\n    while (currentN >= factor * factor) {\n        while (currentN % factor == 0) {\n            fact.add(factor)\n            currentN /= factor\n        }\n        factor++\n    }\n    if (currentN > 1) {\n        fact.add(currentN)\n    }\n    return fact\n}\n", "code_without_comments": "fun factorize(n : Int) : List<Int> {\n    val fact = mutableListOf<Int>()\n    var currentN = n\n    var factor = 2\n    while (currentN >= factor * factor) {\n        while (currentN % factor == 0) {\n            fact.add(factor)\n            currentN /= factor\n        }\n        factor++\n    }\n    if (currentN > 1) {\n        fact.add(currentN)\n    }\n    return fact\n}"}
{"task_id": "HumanEval_kotlin/26", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * From a list of integers, remove all elements that occur more than once.\n * Keep order of elements left the same as in the input.\n * >>> remove_duplicates([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n */\nfun removeDuplicates(numbers : List<Any>) : List<Any> {\n", "entry_point": "removeDuplicates", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var x0 : List<Any> = removeDuplicates(arg00);\n    var v0 : List<Any> = mutableListOf();\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(1, 2, 3, 4)\n    var x1 : List<Any> = removeDuplicates(arg10);\n    var v1 : List<Any> = mutableListOf(1, 2, 3, 4);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(1, 2, 3, 2, 4, 3, 5)\n    var x2 : List<Any> = removeDuplicates(arg20);\n    var v2 : List<Any> = mutableListOf(1, 4, 5);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]", "language": "kotlin", "canonical_solution": "\n    val countMap = LinkedHashMap<Any, Int>()\n    for (num in numbers) {\n        countMap[num] = countMap.getOrDefault(num, 0) + 1\n    }\n    return numbers.filter { countMap[it] == 1 }\n}\n", "code_without_comments": "fun removeDuplicates(numbers : List<Any>) : List<Any> {\n    val countMap = LinkedHashMap<Any, Int>()\n    for (num in numbers) {\n        countMap[num] = countMap.getOrDefault(num, 0) + 1\n    }\n    return numbers.filter { countMap[it] == 1 }\n}"}
{"task_id": "HumanEval_kotlin/28", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Concatenate list of strings into a single string\n * >>> concatenate([])\n * ''\n * >>> concatenate(['a', 'b', 'c'])\n * 'abc'\n *\n */\nfun concatenate(strings : List<Any>) : String {\n", "entry_point": "concatenate", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var x0 : String = concatenate(arg00);\n    var v0 : String = \"\"\"\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(\"\"\"x\"\"\", \"\"\"y\"\"\", \"\"\"z\"\"\")\n    var x1 : String = concatenate(arg10);\n    var v1 : String = \"\"\"xyz\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(\"\"\"x\"\"\", \"\"\"y\"\"\", \"\"\"z\"\"\", \"\"\"w\"\"\", \"\"\"k\"\"\")\n    var x2 : String = concatenate(arg20);\n    var v2 : String = \"\"\"xyzwk\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'", "language": "kotlin", "canonical_solution": "\n    return strings.filterIsInstance<String>().joinToString(\"\")\n}\n", "code_without_comments": "fun concatenate(strings : List<Any>) : String {\n    return strings.filterIsInstance<String>().joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/29", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Filter an input list of strings only for ones that start with a given prefix.\n * >>> filter_by_prefix([], 'a')\n * []\n * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n * ['abc', 'array']\n *\n */\nfun filterByPrefix(strings : List<Any>, prefix : String) : List<Any> {\n", "entry_point": "filterByPrefix", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var arg01 : String = \"\"\"john\"\"\"\n    var x0 : List<Any> = filterByPrefix(arg00, arg01);\n    var v0 : List<Any> = mutableListOf();\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(\"\"\"xxx\"\"\", \"\"\"asd\"\"\", \"\"\"xxy\"\"\", \"\"\"john doe\"\"\", \"\"\"xxxAAA\"\"\", \"\"\"xxx\"\"\")\n    var arg11 : String = \"\"\"xxx\"\"\"\n    var x1 : List<Any> = filterByPrefix(arg10, arg11);\n    var v1 : List<Any> = mutableListOf(\"\"\"xxx\"\"\", \"\"\"xxxAAA\"\"\", \"\"\"xxx\"\"\");\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n\n}\n", "description": "Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']", "language": "kotlin", "canonical_solution": "\n    val filteredList = mutableListOf<Any>()\n    for (item in strings) {\n        if (item is String && item.startsWith(prefix)) {\n            filteredList.add(item)\n        }\n    }\n    return filteredList\n}\n", "code_without_comments": "fun filterByPrefix(strings : List<Any>, prefix : String) : List<Any> {\n    val filteredList = mutableListOf<Any>()\n    for (item in strings) {\n        if (item is String && item.startsWith(prefix)) {\n            filteredList.add(item)\n        }\n    }\n    return filteredList\n}"}
{"task_id": "HumanEval_kotlin/30", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return only positive numbers in the list.\n * >>> get_positive([-1, 2, -4, 5, 6])\n * [2, 5, 6]\n * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [5, 3, 2, 3, 9, 123, 1]\n *\n */\nfun getPositive(l : List<Any>) : List<Any> {\n", "entry_point": "getPositive", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(-1, -2, 4, 5, 6)\n    var x0 : List<Any> = getPositive(arg00);\n    var v0 : List<Any> = mutableListOf(4, 5, 6);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)\n    var x1 : List<Any> = getPositive(arg10);\n    var v1 : List<Any> = mutableListOf(5, 3, 2, 3, 3, 9, 123, 1);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(-1, -2)\n    var x2 : List<Any> = getPositive(arg20);\n    var v2 : List<Any> = mutableListOf();\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf()\n    var x3 : List<Any> = getPositive(arg30);\n    var v3 : List<Any> = mutableListOf();\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]", "language": "kotlin", "canonical_solution": "\n    return l.filterIsInstance<Int>().filter { it > 0 }\n}\n", "code_without_comments": "fun getPositive(l : List<Any>) : List<Any> {\n    return l.filterIsInstance<Int>().filter { it > 0 }\n}"}
{"task_id": "HumanEval_kotlin/33", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * This function takes a list l and returns a list l' such that\n * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n * to the values of the corresponding indicies of l, but sorted.\n * >>> sort_third([1, 2, 3])\n * [1, 2, 3]\n * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n * [2, 6, 3, 4, 8, 9, 5]\n *\n */\nfun sortThird(l : List<Int>) : List<Int> {\n", "entry_point": "sortThird", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, 2, 3)\n    var x0 : List<Int> = sortThird(arg00);\n    var v0 : List<Int> = mutableListOf(1, 2, 3);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)\n    var x1 : List<Int> = sortThird(arg10);\n    var v1 : List<Int> = mutableListOf(1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)\n    var x2 : List<Int> = sortThird(arg20);\n    var v2 : List<Int> = mutableListOf(-10, 8, -12, 3, 23, 2, 4, 11, 12, 5);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(5, 6, 3, 4, 8, 9, 2)\n    var x3 : List<Int> = sortThird(arg30);\n    var v3 : List<Int> = mutableListOf(2, 6, 3, 4, 8, 9, 5);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(5, 8, 3, 4, 6, 9, 2)\n    var x4 : List<Int> = sortThird(arg40);\n    var v4 : List<Int> = mutableListOf(2, 8, 3, 4, 6, 9, 5);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Int> = mutableListOf(5, 6, 9, 4, 8, 3, 2)\n    var x5 : List<Int> = sortThird(arg50);\n    var v5 : List<Int> = mutableListOf(2, 6, 9, 4, 8, 3, 5);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Int> = mutableListOf(5, 6, 3, 4, 8, 9, 2, 1)\n    var x6 : List<Int> = sortThird(arg60);\n    var v6 : List<Int> = mutableListOf(2, 6, 3, 4, 8, 9, 5, 1);\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]", "language": "kotlin", "canonical_solution": "\n    val thirds = l.filterIndexed { index, _ -> index % 3 == 0 }.sorted()\n    return l.mapIndexed { index, value -> if (index % 3 == 0) thirds[index / 3] else value }\n}\n", "code_without_comments": "fun sortThird(l : List<Int>) : List<Int> {\n    val thirds = l.filterIndexed { index, _ -> index % 3 == 0 }.sorted()\n    return l.mapIndexed { index, value -> if (index % 3 == 0) thirds[index / 3] else value }\n}"}
{"task_id": "HumanEval_kotlin/34", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return sorted unique elements in a list\n * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n *\n */\nfun unique(l : List<Int>) : List<Int> {\n", "entry_point": "unique", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(5, 3, 5, 2, 3, 3, 9, 0, 123)\n    var x0 : List<Int> = unique(arg00);\n    var v0 : List<Int> = mutableListOf(0, 2, 3, 5, 9, 123);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n\n}\n", "description": "Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]", "language": "kotlin", "canonical_solution": "\n    return l.toSet().toList().sorted()\n}\n", "code_without_comments": "fun unique(l : List<Int>) : List<Int> {\n    return l.toSet().toList().sorted()\n}"}
{"task_id": "HumanEval_kotlin/35", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return maximum element in the list.\n * >>> max_element([1, 2, 3])\n * 3\n * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * 123\n *\n */\nfun maxElement(l : List<Int>) : Int {\n", "entry_point": "maxElement", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, 2, 3)\n    var x0 : Int = maxElement(arg00);\n    var v0 : Int = 3;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10)\n    var x1 : Int = maxElement(arg10);\n    var v1 : Int = 124;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n\n}\n", "description": "Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123", "language": "kotlin", "canonical_solution": "\n    return l.maxOrNull()!!\n}\n", "code_without_comments": "fun maxElement(l : List<Int>) : Int {\n    return l.maxOrNull()!!\n}"}
{"task_id": "HumanEval_kotlin/36", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n * >>> fizz_buzz(50)\n * 0\n * >>> fizz_buzz(78)\n * 2\n * >>> fizz_buzz(79)\n * 3\n *\n */\nfun fizzBuzz(n : Int) : Int {\n", "entry_point": "fizzBuzz", "test": "\nfun main() {\n    var arg00 : Int = 50\n    var x0 : Int = fizzBuzz(arg00);\n    var v0 : Int = 0;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 78\n    var x1 : Int = fizzBuzz(arg10);\n    var v1 : Int = 2;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 79\n    var x2 : Int = fizzBuzz(arg20);\n    var v2 : Int = 3;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 100\n    var x3 : Int = fizzBuzz(arg30);\n    var v3 : Int = 3;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 200\n    var x4 : Int = fizzBuzz(arg40);\n    var v4 : Int = 6;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Int = 4000\n    var x5 : Int = fizzBuzz(arg50);\n    var v5 : Int = 192;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Int = 10000\n    var x6 : Int = fizzBuzz(arg60);\n    var v6 : Int = 639;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : Int = 100000\n    var x7 : Int = fizzBuzz(arg70);\n    var v7 : Int = 8026;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3", "language": "kotlin", "canonical_solution": "\n    var result = 0\n    for (i in 1 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            val digits = i.toString().toCharArray()\n            for (c in digits) {\n                if (c == '7') {\n                    result += 1\n                }\n            }\n        }\n    }\n    return result\n}\n", "code_without_comments": "fun fizzBuzz(n : Int) : Int {\n    var result = 0\n    for (i in 1 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            val digits = i.toString().toCharArray()\n            for (c in digits) {\n                if (c == '7') {\n                    result += 1\n                }\n            }\n        }\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/37", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * This function takes a list l and returns a list l' such that\n * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n * to the values of the even indicies of l, but sorted.\n * >>> sort_even([1, 2, 3])\n * [1, 2, 3]\n * >>> sort_even([5, 6, 3, 4])\n * [3, 6, 5, 4]\n *\n */\nfun sortEven(l : List<Int>) : List<Int> {\n", "entry_point": "sortEven", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, 2, 3)\n    var x0 : List<Int> = sortEven(arg00);\n    var v0 : List<Int> = mutableListOf(1, 2, 3);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)\n    var x1 : List<Int> = sortEven(arg10);\n    var v1 : List<Int> = mutableListOf(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)\n    var x2 : List<Int> = sortEven(arg20);\n    var v2 : List<Int> = mutableListOf(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]", "language": "kotlin", "canonical_solution": "\n    val evens = l.filterIndexed { index, _ -> index % 2 == 0 }.sorted()\n    val odds = l.filterIndexed { index, _ -> index % 2 != 0 }\n    return evens.zip(odds, { a, b -> listOf(a, b) }).flatten() + if (evens.size > odds.size) listOf(evens.last()) else emptyList()\n}\n", "code_without_comments": "fun sortEven(l : List<Int>) : List<Int> {\n    val evens = l.filterIndexed { index, _ -> index % 2 == 0 }.sorted()\n    val odds = l.filterIndexed { index, _ -> index % 2 != 0 }\n    return evens.zip(odds, { a, b -> listOf(a, b) }).flatten() + if (evens.size > odds.size) listOf(evens.last()) else emptyList()\n}"}
{"task_id": "HumanEval_kotlin/40", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * triples_sum_to_zero takes a list of integers as an input.\n * it returns True if there are three distinct elements in the list that\n * sum to zero, and False otherwise.\n\n * >>> triples_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> triples_sum_to_zero([1, 3, -2, 1])\n * True\n * >>> triples_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n * True\n * >>> triples_sum_to_zero([1])\n * False\n *\n */\nfun triplesSumToZero(l : List<Int>) : Boolean {\n", "entry_point": "triplesSumToZero", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, 3, 5, 0)\n    var x0 : Boolean = triplesSumToZero(arg00);\n    var v0 : Boolean = false;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(1, 3, 5, -1)\n    var x1 : Boolean = triplesSumToZero(arg10);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(1, 3, -2, 1)\n    var x2 : Boolean = triplesSumToZero(arg20);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(1, 2, 3, 7)\n    var x3 : Boolean = triplesSumToZero(arg30);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(1, 2, 5, 7)\n    var x4 : Boolean = triplesSumToZero(arg40);\n    var v4 : Boolean = false;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Int> = mutableListOf(2, 4, -5, 3, 9, 7)\n    var x5 : Boolean = triplesSumToZero(arg50);\n    var v5 : Boolean = true;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Int> = mutableListOf(1)\n    var x6 : Boolean = triplesSumToZero(arg60);\n    var v6 : Boolean = false;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Int> = mutableListOf(1, 3, 5, -100)\n    var x7 : Boolean = triplesSumToZero(arg70);\n    var v7 : Boolean = false;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<Int> = mutableListOf(100, 3, 5, -100)\n    var x8 : Boolean = triplesSumToZero(arg80);\n    var v8 : Boolean = false;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n\n}\n", "description": "triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False", "language": "kotlin", "canonical_solution": "\n    for (i in 0 until l.size) {\n        for (j in i + 1 until l.size) {\n            for (k in j + 1 until l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n", "code_without_comments": "fun triplesSumToZero(l : List<Int>) : Boolean {\n    for (i in 0 until l.size) {\n        for (j in i + 1 until l.size) {\n            for (k in j + 1 until l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/42", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return list with elements incremented by 1.\n * >>> incr_list([1, 2, 3])\n * [2, 3, 4]\n * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n *\n */\nfun incrList(l : List<Any>) : List<Any> {\n", "entry_point": "incrList", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var x0 : List<Any> = incrList(arg00);\n    var v0 : List<Any> = mutableListOf();\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(3, 2, 1)\n    var x1 : List<Any> = incrList(arg10);\n    var v1 : List<Any> = mutableListOf(4, 3, 2);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(5, 2, 5, 2, 3, 3, 9, 0, 123)\n    var x2 : List<Any> = incrList(arg20);\n    var v2 : List<Any> = mutableListOf(6, 3, 6, 3, 4, 4, 10, 1, 124);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]", "language": "kotlin", "canonical_solution": "\n    val result = mutableListOf<Any>()\n    for (item in l) {\n        when (item) {\n            is Int -> result.add(item + 1)\n            is Double -> result.add(item + 1.0)\n            else -> result.add(item)\n        }\n    }\n    return result\n}\n", "code_without_comments": "fun incrList(l : List<Any>) : List<Any> {\n    val result = mutableListOf<Any>()\n    for (item in l) {\n        when (item) {\n            is Int -> result.add(item + 1)\n            is Double -> result.add(item + 1.0)\n            else -> result.add(item)\n        }\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/43", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * pairs_sum_to_zero takes a list of integers as an input.\n * it returns True if there are two distinct elements in the list that\n * sum to zero, and False otherwise.\n * >>> pairs_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> pairs_sum_to_zero([1, 3, -2, 1])\n * False\n * >>> pairs_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n * True\n * >>> pairs_sum_to_zero([1])\n * False\n *\n */\nfun pairsSumToZero(l : List<Int>) : Boolean {\n", "entry_point": "pairsSumToZero", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, 3, 5, 0)\n    var x0 : Boolean = pairsSumToZero(arg00);\n    var v0 : Boolean = false;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(1, 3, -2, 1)\n    var x1 : Boolean = pairsSumToZero(arg10);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(1, 2, 3, 7)\n    var x2 : Boolean = pairsSumToZero(arg20);\n    var v2 : Boolean = false;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(2, 4, -5, 3, 5, 7)\n    var x3 : Boolean = pairsSumToZero(arg30);\n    var v3 : Boolean = true;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(1)\n    var x4 : Boolean = pairsSumToZero(arg40);\n    var v4 : Boolean = false;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Int> = mutableListOf(-3, 9, -1, 3, 2, 30)\n    var x5 : Boolean = pairsSumToZero(arg50);\n    var v5 : Boolean = true;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Int> = mutableListOf(-3, 9, -1, 3, 2, 31)\n    var x6 : Boolean = pairsSumToZero(arg60);\n    var v6 : Boolean = true;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Int> = mutableListOf(-3, 9, -1, 4, 2, 30)\n    var x7 : Boolean = pairsSumToZero(arg70);\n    var v7 : Boolean = false;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<Int> = mutableListOf(-3, 9, -1, 4, 2, 31)\n    var x8 : Boolean = pairsSumToZero(arg80);\n    var v8 : Boolean = false;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n\n}\n", "description": "pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False", "language": "kotlin", "canonical_solution": "\n    for (i in l.indices) {\n        for (j in i + 1 until l.size) {\n            if (l[i] + l[j] == 0) {\n                return true\n            }\n        }\n    }\n    return false\n}\n", "code_without_comments": "fun pairsSumToZero(l : List<Int>) : Boolean {\n    for (i in l.indices) {\n        for (j in i + 1 until l.size) {\n            if (l[i] + l[j] == 0) {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/48", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Checks if given string is a palindrome\n * >>> is_palindrome('')\n * True\n * >>> is_palindrome('aba')\n * True\n * >>> is_palindrome('aaaaa')\n * True\n * >>> is_palindrome('zbcd')\n * False\n *\n */\nfun isPalindrome(text : String) : Boolean {\n", "entry_point": "isPalindrome", "test": "\nfun main() {\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : Boolean = isPalindrome(arg00);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"aba\"\"\"\n    var x1 : Boolean = isPalindrome(arg10);\n    var v1 : Boolean = true;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"aaaaa\"\"\"\n    var x2 : Boolean = isPalindrome(arg20);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"zbcd\"\"\"\n    var x3 : Boolean = isPalindrome(arg30);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"xywyx\"\"\"\n    var x4 : Boolean = isPalindrome(arg40);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"xywyz\"\"\"\n    var x5 : Boolean = isPalindrome(arg50);\n    var v5 : Boolean = false;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"xywzx\"\"\"\n    var x6 : Boolean = isPalindrome(arg60);\n    var v6 : Boolean = false;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False", "language": "kotlin", "canonical_solution": "\n    for (i in 0 until text.length / 2) {\n        if (text[i] != text[text.length - 1 - i]) {\n            return false\n        }\n    }\n    return true\n}\n", "code_without_comments": "fun isPalindrome(text : String) : Boolean {\n    for (i in 0 until text.length / 2) {\n        if (text[i] != text[text.length - 1 - i]) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/49", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return 2^n modulo p (be aware of numerics).\n * >>> modp(3, 5)\n * 3\n * >>> modp(1101, 101)\n * 2\n * >>> modp(0, 101)\n * 1\n * >>> modp(3, 11)\n * 8\n * >>> modp(100, 101)\n * 1\n *\n */\nfun modp(n : Int, p : Int) : Int {\n", "entry_point": "modp", "test": "\nfun main() {\n    var arg00 : Int = 3\n    var arg01 : Int = 5\n    var x0 : Int = modp(arg00, arg01);\n    var v0 : Int = 3;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 1101\n    var arg11 : Int = 101\n    var x1 : Int = modp(arg10, arg11);\n    var v1 : Int = 2;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 0\n    var arg21 : Int = 101\n    var x2 : Int = modp(arg20, arg21);\n    var v2 : Int = 1;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 3\n    var arg31 : Int = 11\n    var x3 : Int = modp(arg30, arg31);\n    var v3 : Int = 8;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 100\n    var arg41 : Int = 101\n    var x4 : Int = modp(arg40, arg41);\n    var v4 : Int = 1;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Int = 30\n    var arg51 : Int = 5\n    var x5 : Int = modp(arg50, arg51);\n    var v5 : Int = 4;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Int = 31\n    var arg61 : Int = 5\n    var x6 : Int = modp(arg60, arg61);\n    var v6 : Int = 3;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1", "language": "kotlin", "canonical_solution": "\n    var ret = 1\n    for (i in 0 until n) {\n        ret = (2 * ret) % p\n    }\n    return ret\n}\n", "code_without_comments": "fun modp(n : Int, p : Int) : Int {\n    var ret = 1\n    for (i in 0 until n) {\n        ret = (2 * ret) % p\n    }\n    return ret\n}"}
{"task_id": "HumanEval_kotlin/51", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * remove_vowels is a function that takes string and returns string without vowels.\n * >>> remove_vowels('')\n * ''\n * >>> remove_vowels(\"abcdef\\nghijklm\")\n * 'bcdf\\nghjklm'\n * >>> remove_vowels('abcdef')\n * 'bcdf'\n * >>> remove_vowels('aaaaa')\n * ''\n * >>> remove_vowels('aaBAA')\n * 'B'\n * >>> remove_vowels('zbcd')\n * 'zbcd'\n *\n */\nfun removeVowels(text : String) : String {\n", "entry_point": "removeVowels", "test": "\nfun main() {\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : String = removeVowels(arg00);\n    var v0 : String = \"\"\"\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"abcdef\\nghijklm\"\"\"\n    var x1 : String = removeVowels(arg10);\n    var v1 : String = \"\"\"bcdf\\nghjklm\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"fedcba\"\"\"\n    var x2 : String = removeVowels(arg20);\n    var v2 : String = \"\"\"fdcb\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"eeeee\"\"\"\n    var x3 : String = removeVowels(arg30);\n    var v3 : String = \"\"\"\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"acBAA\"\"\"\n    var x4 : String = removeVowels(arg40);\n    var v4 : String = \"\"\"cB\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"EcBOO\"\"\"\n    var x5 : String = removeVowels(arg50);\n    var v5 : String = \"\"\"cB\"\"\";\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"ybcd\"\"\"\n    var x6 : String = removeVowels(arg60);\n    var v6 : String = \"\"\"ybcd\"\"\";\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'", "language": "kotlin", "canonical_solution": "\n    return text.filter { it.lowercase() !in \"aeiou\" }\n}\n", "code_without_comments": "fun removeVowels(text : String) : String {\n    return text.filter { it.lowercase() !in \"aeiou\" }\n}"}
{"task_id": "HumanEval_kotlin/52", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return True if all numbers in the list l are below threshold t.\n * >>> below_threshold([1, 2, 4, 10], 100)\n * True\n * >>> below_threshold([1, 20, 4, 10], 5)\n * False\n *\n */\nfun belowThreshold(l : List<Int>, t : Int) : Boolean {\n", "entry_point": "belowThreshold", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, 2, 4, 10)\n    var arg01 : Int = 100\n    var x0 : Boolean = belowThreshold(arg00, arg01);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(1, 20, 4, 10)\n    var arg11 : Int = 5\n    var x1 : Boolean = belowThreshold(arg10, arg11);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(1, 20, 4, 10)\n    var arg21 : Int = 21\n    var x2 : Boolean = belowThreshold(arg20, arg21);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(1, 20, 4, 10)\n    var arg31 : Int = 22\n    var x3 : Boolean = belowThreshold(arg30, arg31);\n    var v3 : Boolean = true;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(1, 8, 4, 10)\n    var arg41 : Int = 11\n    var x4 : Boolean = belowThreshold(arg40, arg41);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Int> = mutableListOf(1, 8, 4, 10)\n    var arg51 : Int = 10\n    var x5 : Boolean = belowThreshold(arg50, arg51);\n    var v5 : Boolean = false;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n\n}\n", "description": "Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False", "language": "kotlin", "canonical_solution": "\n    for (e in l) {\n        if (e >= t) {\n            return false\n        }\n    }\n    return true\n}\n", "code_without_comments": "fun belowThreshold(l : List<Int>, t : Int) : Boolean {\n    for (e in l) {\n        if (e >= t) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/54", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Check if two words have the same characters.\n * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n * True\n * >>> same_chars('abcd', 'dddddddabc')\n * True\n * >>> same_chars('dddddddabc', 'abcd')\n * True\n * >>> same_chars('eabcd', 'dddddddabc')\n * False\n * >>> same_chars('abcd', 'dddddddabce')\n * False\n * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n * False\n *\n */\nfun sameChars(s0 : String, s1 : String) : Boolean {\n", "entry_point": "sameChars", "test": "\nfun main() {\n    var arg00 : String = \"\"\"eabcdzzzz\"\"\"\n    var arg01 : String = \"\"\"dddzzzzzzzddeddabc\"\"\"\n    var x0 : Boolean = sameChars(arg00, arg01);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"abcd\"\"\"\n    var arg11 : String = \"\"\"dddddddabc\"\"\"\n    var x1 : Boolean = sameChars(arg10, arg11);\n    var v1 : Boolean = true;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"dddddddabc\"\"\"\n    var arg21 : String = \"\"\"abcd\"\"\"\n    var x2 : Boolean = sameChars(arg20, arg21);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"eabcd\"\"\"\n    var arg31 : String = \"\"\"dddddddabc\"\"\"\n    var x3 : Boolean = sameChars(arg30, arg31);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"abcd\"\"\"\n    var arg41 : String = \"\"\"dddddddabcf\"\"\"\n    var x4 : Boolean = sameChars(arg40, arg41);\n    var v4 : Boolean = false;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"eabcdzzzz\"\"\"\n    var arg51 : String = \"\"\"dddzzzzzzzddddabc\"\"\"\n    var x5 : Boolean = sameChars(arg50, arg51);\n    var v5 : Boolean = false;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"aabb\"\"\"\n    var arg61 : String = \"\"\"aaccc\"\"\"\n    var x6 : Boolean = sameChars(arg60, arg61);\n    var v6 : Boolean = false;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False", "language": "kotlin", "canonical_solution": "\n    return s0.toSet() == s1.toSet()\n}\n", "code_without_comments": "fun sameChars(s0 : String, s1 : String) : Boolean {\n    return s0.toSet() == s1.toSet()\n}"}
{"task_id": "HumanEval_kotlin/56", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * brackets is a string of \"<\" and \">\".\n * return True if every opening bracket has a corresponding closing bracket.\n\n * >>> correct_bracketing(\"<\")\n * False\n * >>> correct_bracketing(\"<>\")\n * True\n * >>> correct_bracketing(\"<<><>>\")\n * True\n * >>> correct_bracketing(\"><<>\")\n * False\n *\n */\nfun correctBracketing(brackets : String) : Boolean {\n", "entry_point": "correctBracketing", "test": "\nfun main() {\n    var arg00 : String = \"\"\"<>\"\"\"\n    var x0 : Boolean = correctBracketing(arg00);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"<<><>>\"\"\"\n    var x1 : Boolean = correctBracketing(arg10);\n    var v1 : Boolean = true;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"<><><<><>><>\"\"\"\n    var x2 : Boolean = correctBracketing(arg20);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"<><><<<><><>><>><<><><<>>>\"\"\"\n    var x3 : Boolean = correctBracketing(arg30);\n    var v3 : Boolean = true;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"<<<><>>>>\"\"\"\n    var x4 : Boolean = correctBracketing(arg40);\n    var v4 : Boolean = false;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"><<>\"\"\"\n    var x5 : Boolean = correctBracketing(arg50);\n    var v5 : Boolean = false;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"<\"\"\"\n    var x6 : Boolean = correctBracketing(arg60);\n    var v6 : Boolean = false;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"<<<<\"\"\"\n    var x7 : Boolean = correctBracketing(arg70);\n    var v7 : Boolean = false;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : String = \"\"\">\"\"\"\n    var x8 : Boolean = correctBracketing(arg80);\n    var v8 : Boolean = false;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : String = \"\"\"<<>\"\"\"\n    var x9 : Boolean = correctBracketing(arg90);\n    var v9 : Boolean = false;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : String = \"\"\"<><><<><>><>><<>\"\"\"\n    var x10 : Boolean = correctBracketing(arg100);\n    var v10 : Boolean = false;\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n    var arg110 : String = \"\"\"<><><<><>><>>><>\"\"\"\n    var x11 : Boolean = correctBracketing(arg110);\n    var v11 : Boolean = false;\n    if (x11 != v11) {\n        throw Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11)\n    }\n\n\n}\n", "description": "brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False", "language": "kotlin", "canonical_solution": "\n    var depth = 0\n    for (b in brackets) {\n        if (b == '<') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n", "code_without_comments": "fun correctBracketing(brackets : String) : Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '<') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}"}
{"task_id": "HumanEval_kotlin/57", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return True is list elements are monotonically increasing or decreasing.\n * >>> monotonic([1, 2, 4, 20])\n * True\n * >>> monotonic([1, 20, 4, 10])\n * False\n * >>> monotonic([4, 1, 0, -10])\n * True\n *\n */\nfun monotonic(l : List<Int>) : Boolean {\n", "entry_point": "monotonic", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, 2, 4, 10)\n    var x0 : Boolean = monotonic(arg00);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(1, 2, 4, 20)\n    var x1 : Boolean = monotonic(arg10);\n    var v1 : Boolean = true;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(1, 20, 4, 10)\n    var x2 : Boolean = monotonic(arg20);\n    var v2 : Boolean = false;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(4, 1, 0, -10)\n    var x3 : Boolean = monotonic(arg30);\n    var v3 : Boolean = true;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(4, 1, 1, 0)\n    var x4 : Boolean = monotonic(arg40);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Int> = mutableListOf(1, 2, 3, 2, 5, 60)\n    var x5 : Boolean = monotonic(arg50);\n    var v5 : Boolean = false;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Int> = mutableListOf(1, 2, 3, 4, 5, 60)\n    var x6 : Boolean = monotonic(arg60);\n    var v6 : Boolean = true;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Int> = mutableListOf(9, 9, 9, 9)\n    var x7 : Boolean = monotonic(arg70);\n    var v7 : Boolean = true;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True", "language": "kotlin", "canonical_solution": "\n    val sortedList = l.sorted()\n    val reverseSortedList = l.sortedDescending()\n    return l == sortedList || l == reverseSortedList\n}\n", "code_without_comments": "fun monotonic(l : List<Int>) : Boolean {\n    val sortedList = l.sorted()\n    val reverseSortedList = l.sortedDescending()\n    return l == sortedList || l == reverseSortedList\n}"}
{"task_id": "HumanEval_kotlin/59", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n *\n */\nfun largestPrimeFactor(n : Int) : Int {\n", "entry_point": "largestPrimeFactor", "test": "\nfun main() {\n    var arg00 : Int = 15\n    var x0 : Int = largestPrimeFactor(arg00);\n    var v0 : Int = 5;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 27\n    var x1 : Int = largestPrimeFactor(arg10);\n    var v1 : Int = 3;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 63\n    var x2 : Int = largestPrimeFactor(arg20);\n    var v2 : Int = 7;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 330\n    var x3 : Int = largestPrimeFactor(arg30);\n    var v3 : Int = 11;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 13195\n    var x4 : Int = largestPrimeFactor(arg40);\n    var v4 : Int = 29;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2", "language": "kotlin", "canonical_solution": "\n    fun isPrime(k : Int) : Boolean {\n        if (k < 2) return false\n        for (i in 2 until k) {\n            if (k % i == 0) return false\n        }\n        return true\n    }\n    var largest = 1\n    for (j in 2..n) {\n        if (n % j == 0 && isPrime(j)) {\n            largest = maxOf(largest, j)\n        }\n    }\n    return largest\n}\n", "code_without_comments": "fun largestPrimeFactor(n : Int) : Int {\n    fun isPrime(k : Int) : Boolean {\n        if (k < 2) return false\n        for (i in 2 until k) {\n            if (k % i == 0) return false\n        }\n        return true\n    }\n    var largest = 1\n    for (j in 2..n) {\n        if (n % j == 0 && isPrime(j)) {\n            largest = maxOf(largest, j)\n        }\n    }\n    return largest\n}"}
{"task_id": "HumanEval_kotlin/61", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * brackets is a string of \"(\" and \")\".\n * return True if every opening bracket has a corresponding closing bracket.\n\n * >>> correct_bracketing(\"(\")\n * False\n * >>> correct_bracketing(\"()\")\n * True\n * >>> correct_bracketing(\"(()())\")\n * True\n * >>> correct_bracketing(\")(()\")\n * False\n *\n */\nfun correctBracketing(brackets : String) : Boolean {\n", "entry_point": "correctBracketing", "test": "\nfun main() {\n    var arg00 : String = \"\"\"()\"\"\"\n    var x0 : Boolean = correctBracketing(arg00);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"(()())\"\"\"\n    var x1 : Boolean = correctBracketing(arg10);\n    var v1 : Boolean = true;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"()()(()())()\"\"\"\n    var x2 : Boolean = correctBracketing(arg20);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"()()((()()())())(()()(()))\"\"\"\n    var x3 : Boolean = correctBracketing(arg30);\n    var v3 : Boolean = true;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"((()())))\"\"\"\n    var x4 : Boolean = correctBracketing(arg40);\n    var v4 : Boolean = false;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\")(()\"\"\"\n    var x5 : Boolean = correctBracketing(arg50);\n    var v5 : Boolean = false;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"(\"\"\"\n    var x6 : Boolean = correctBracketing(arg60);\n    var v6 : Boolean = false;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"((((\"\"\"\n    var x7 : Boolean = correctBracketing(arg70);\n    var v7 : Boolean = false;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : String = \"\"\")\"\"\"\n    var x8 : Boolean = correctBracketing(arg80);\n    var v8 : Boolean = false;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : String = \"\"\"(()\"\"\"\n    var x9 : Boolean = correctBracketing(arg90);\n    var v9 : Boolean = false;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : String = \"\"\"()()(()())())(()\"\"\"\n    var x10 : Boolean = correctBracketing(arg100);\n    var v10 : Boolean = false;\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n    var arg110 : String = \"\"\"()()(()())()))()\"\"\"\n    var x11 : Boolean = correctBracketing(arg110);\n    var v11 : Boolean = false;\n    if (x11 != v11) {\n        throw Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11)\n    }\n\n\n}\n", "description": "brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False", "language": "kotlin", "canonical_solution": "\n    var depth = 0\n    for (b in brackets) {\n        if (b == '(') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n", "code_without_comments": "fun correctBracketing(brackets : String) : Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '(') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}"}
{"task_id": "HumanEval_kotlin/64", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Write a function vowels_count which takes a string representing\n * a word as input and returns the number of vowels in the string.\n * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n * vowel, but only when it is at the end of the given word.\n\n * Example:\n * >>> vowels_count(\"abcde\")\n * 2\n * >>> vowels_count(\"ACEDY\")\n * 3\n *\n */\nfun vowelsCount(s : String) : Int {\n", "entry_point": "vowelsCount", "test": "\nfun main() {\n    var arg00 : String = \"\"\"abcde\"\"\"\n    var x0 : Int = vowelsCount(arg00);\n    var v0 : Int = 2;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"Alone\"\"\"\n    var x1 : Int = vowelsCount(arg10);\n    var v1 : Int = 3;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"key\"\"\"\n    var x2 : Int = vowelsCount(arg20);\n    var v2 : Int = 2;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"bye\"\"\"\n    var x3 : Int = vowelsCount(arg30);\n    var v3 : Int = 1;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"keY\"\"\"\n    var x4 : Int = vowelsCount(arg40);\n    var v4 : Int = 2;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"bYe\"\"\"\n    var x5 : Int = vowelsCount(arg50);\n    var v5 : Int = 1;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"ACEDY\"\"\"\n    var x6 : Int = vowelsCount(arg60);\n    var v6 : Int = 3;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3", "language": "kotlin", "canonical_solution": "\n    val vowels = \"aeiouAEIOU\"\n    var n_vowels = 0\n    for (c in s) {\n        if (c in vowels) {\n            n_vowels += 1\n        }\n    }\n    if (s.lastOrNull() == 'y' || s.lastOrNull() == 'Y') {\n        n_vowels += 1\n    }\n    return n_vowels\n}\n", "code_without_comments": "fun vowelsCount(s : String) : Int {\n    val vowels = \"aeiouAEIOU\"\n    var n_vowels = 0\n    for (c in s) {\n        if (c in vowels) {\n            n_vowels += 1\n        }\n    }\n    if (s.lastOrNull() == 'y' || s.lastOrNull() == 'Y') {\n        n_vowels += 1\n    }\n    return n_vowels\n}"}
{"task_id": "HumanEval_kotlin/65", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Circular shift the digits of the integer x, shift the digits right by shift\n * and return the result as a string.\n * If shift > number of digits, return digits reversed.\n * >>> circular_shift(12, 1)\n * \"21\"\n * >>> circular_shift(12, 2)\n * \"12\"\n *\n */\nfun circularShift(x : Int, shift : Int) : String {\n", "entry_point": "circularShift", "test": "\nfun main() {\n    var arg00 : Int = 100\n    var arg01 : Int = 2\n    var x0 : String = circularShift(arg00, arg01);\n    var v0 : String = \"\"\"001\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 12\n    var arg11 : Int = 2\n    var x1 : String = circularShift(arg10, arg11);\n    var v1 : String = \"\"\"12\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 97\n    var arg21 : Int = 8\n    var x2 : String = circularShift(arg20, arg21);\n    var v2 : String = \"\"\"79\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 12\n    var arg31 : Int = 1\n    var x3 : String = circularShift(arg30, arg31);\n    var v3 : String = \"\"\"21\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 11\n    var arg41 : Int = 101\n    var x4 : String = circularShift(arg40, arg41);\n    var v4 : String = \"\"\"11\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"", "language": "kotlin", "canonical_solution": "\n    val s = x.toString()\n    if (shift > s.length) {\n        return s.reversed()\n    } else {\n        return s.substring(s.length - shift) + s.substring(0, s.length - shift)\n    }\n}\n", "code_without_comments": "fun circularShift(x : Int, shift : Int) : String {\n    val s = x.toString()\n    if (shift > s.length) {\n        return s.reversed()\n    } else {\n        return s.substring(s.length - shift) + s.substring(0, s.length - shift)\n    }\n}"}
{"task_id": "HumanEval_kotlin/66", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Task\n * Write a function that takes a string as input and returns the sum of the upper characters only'\n * ASCII codes.\n\n * Examples:\n *     digitSum(\"\") => 0\n *     digitSum(\"abAB\") => 131\n *     digitSum(\"abcCd\") => 67\n *     digitSum(\"helloE\") => 69\n *     digitSum(\"woArBld\") => 131\n *     digitSum(\"aAaaaXa\") => 153\n *\n */\nfun digitsum(s : String) : Int {\n", "entry_point": "digitsum", "test": "\nfun main() {\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : Int = digitsum(arg00);\n    var v0 : Int = 0;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"abAB\"\"\"\n    var x1 : Int = digitsum(arg10);\n    var v1 : Int = 131;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"abcCd\"\"\"\n    var x2 : Int = digitsum(arg20);\n    var v2 : Int = 67;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"helloE\"\"\"\n    var x3 : Int = digitsum(arg30);\n    var v3 : Int = 69;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"woArBld\"\"\"\n    var x4 : Int = digitsum(arg40);\n    var v4 : Int = 131;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"aAaaaXa\"\"\"\n    var x5 : Int = digitsum(arg50);\n    var v5 : Int = 153;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\" How are yOu?\"\"\"\n    var x6 : Int = digitsum(arg60);\n    var v6 : Int = 151;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"You arE Very Smart\"\"\"\n    var x7 : Int = digitsum(arg70);\n    var v7 : Int = 327;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153", "language": "kotlin", "canonical_solution": "\n    var sum = 0\n    for (char in s) {\n        if (char.isUpperCase()) {\n            sum += char.toInt()\n        }\n    }\n    return sum\n}\n", "code_without_comments": "fun digitsum(s : String) : Int {\n    var sum = 0\n    for (char in s) {\n        if (char.isUpperCase()) {\n            sum += char.toInt()\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/67", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * In this task, you will be given a string that represents a number of apples and oranges \n * that are distributed in a basket of fruit this basket contains \n * apples, oranges, and mango fruits. Given the string that represents the total number of \n * the oranges and apples and an integer that represent the total number of the fruits \n * in the basket return the number of the mango fruits in the basket.\n * for examble:\n * fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n * fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n * fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n * fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n *\n */\nfun fruitDistribution(s : String, n : Int) : Int {\n", "entry_point": "fruitDistribution", "test": "\nfun main() {\n    var arg00 : String = \"\"\"5 apples and 6 oranges\"\"\"\n    var arg01 : Int = 19\n    var x0 : Int = fruitDistribution(arg00, arg01);\n    var v0 : Int = 8;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"5 apples and 6 oranges\"\"\"\n    var arg11 : Int = 21\n    var x1 : Int = fruitDistribution(arg10, arg11);\n    var v1 : Int = 10;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"0 apples and 1 oranges\"\"\"\n    var arg21 : Int = 3\n    var x2 : Int = fruitDistribution(arg20, arg21);\n    var v2 : Int = 2;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"1 apples and 0 oranges\"\"\"\n    var arg31 : Int = 3\n    var x3 : Int = fruitDistribution(arg30, arg31);\n    var v3 : Int = 2;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"2 apples and 3 oranges\"\"\"\n    var arg41 : Int = 100\n    var x4 : Int = fruitDistribution(arg40, arg41);\n    var v4 : Int = 95;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"2 apples and 3 oranges\"\"\"\n    var arg51 : Int = 5\n    var x5 : Int = fruitDistribution(arg50, arg51);\n    var v5 : Int = 0;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"1 apples and 100 oranges\"\"\"\n    var arg61 : Int = 120\n    var x6 : Int = fruitDistribution(arg60, arg61);\n    var v6 : Int = 19;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19", "language": "kotlin", "canonical_solution": "\n    val numbers = s.split(\" \").filter { it.toIntOrNull() != null }.map { it.toInt() }\n    return n - numbers.sum()\n}\n", "code_without_comments": "fun fruitDistribution(s : String, n : Int) : Int {\n    val numbers = s.split(\" \").filter { it.toIntOrNull() != null }.map { it.toInt() }\n    return n - numbers.sum()\n}"}
{"task_id": "HumanEval_kotlin/69", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n * zero, and has a frequency greater than or equal to the value of the integer itself. \n * The frequency of an integer is the number of times it appears in the list.\n * If no such a value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1]) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n *     search([5, 5, 4, 4, 4]) == -1\n *\n */\nfun search(lst : List<Int>) : Int {\n", "entry_point": "search", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(5, 5, 5, 5, 1)\n    var x0 : Int = search(arg00);\n    var v0 : Int = 1;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(4, 1, 4, 1, 4, 4)\n    var x1 : Int = search(arg10);\n    var v1 : Int = 4;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(3, 3)\n    var x2 : Int = search(arg20);\n    var v2 : Int = -1;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(8, 8, 8, 8, 8, 8, 8, 8)\n    var x3 : Int = search(arg30);\n    var v3 : Int = 8;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(2, 3, 3, 2, 2)\n    var x4 : Int = search(arg40);\n    var v4 : Int = 2;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Int> = mutableListOf(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)\n    var x5 : Int = search(arg50);\n    var v5 : Int = 1;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Int> = mutableListOf(3, 2, 8, 2)\n    var x6 : Int = search(arg60);\n    var v6 : Int = 2;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Int> = mutableListOf(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)\n    var x7 : Int = search(arg70);\n    var v7 : Int = 1;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<Int> = mutableListOf(8, 8, 3, 6, 5, 6, 4)\n    var x8 : Int = search(arg80);\n    var v8 : Int = -1;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : List<Int> = mutableListOf(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)\n    var x9 : Int = search(arg90);\n    var v9 : Int = 1;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : List<Int> = mutableListOf(1, 9, 10, 1, 3)\n    var x10 : Int = search(arg100);\n    var v10 : Int = 1;\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n    var arg110 : List<Int> = mutableListOf(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)\n    var x11 : Int = search(arg110);\n    var v11 : Int = 5;\n    if (x11 != v11) {\n        throw Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11)\n    }\n\n    var arg120 : List<Int> = mutableListOf(1)\n    var x12 : Int = search(arg120);\n    var v12 : Int = 1;\n    if (x12 != v12) {\n        throw Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12)\n    }\n\n    var arg130 : List<Int> = mutableListOf(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)\n    var x13 : Int = search(arg130);\n    var v13 : Int = 4;\n    if (x13 != v13) {\n        throw Exception(\"Exception -- test case 13 did not pass. x13 = \" + x13)\n    }\n\n    var arg140 : List<Int> = mutableListOf(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)\n    var x14 : Int = search(arg140);\n    var v14 : Int = 2;\n    if (x14 != v14) {\n        throw Exception(\"Exception -- test case 14 did not pass. x14 = \" + x14)\n    }\n\n    var arg150 : List<Int> = mutableListOf(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)\n    var x15 : Int = search(arg150);\n    var v15 : Int = 1;\n    if (x15 != v15) {\n        throw Exception(\"Exception -- test case 15 did not pass. x15 = \" + x15)\n    }\n\n    var arg160 : List<Int> = mutableListOf(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)\n    var x16 : Int = search(arg160);\n    var v16 : Int = 4;\n    if (x16 != v16) {\n        throw Exception(\"Exception -- test case 16 did not pass. x16 = \" + x16)\n    }\n\n    var arg170 : List<Int> = mutableListOf(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)\n    var x17 : Int = search(arg170);\n    var v17 : Int = 4;\n    if (x17 != v17) {\n        throw Exception(\"Exception -- test case 17 did not pass. x17 = \" + x17)\n    }\n\n    var arg180 : List<Int> = mutableListOf(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)\n    var x18 : Int = search(arg180);\n    var v18 : Int = 2;\n    if (x18 != v18) {\n        throw Exception(\"Exception -- test case 18 did not pass. x18 = \" + x18)\n    }\n\n    var arg190 : List<Int> = mutableListOf(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)\n    var x19 : Int = search(arg190);\n    var v19 : Int = -1;\n    if (x19 != v19) {\n        throw Exception(\"Exception -- test case 19 did not pass. x19 = \" + x19)\n    }\n\n    var arg200 : List<Int> = mutableListOf(10)\n    var x20 : Int = search(arg200);\n    var v20 : Int = -1;\n    if (x20 != v20) {\n        throw Exception(\"Exception -- test case 20 did not pass. x20 = \" + x20)\n    }\n\n    var arg210 : List<Int> = mutableListOf(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)\n    var x21 : Int = search(arg210);\n    var v21 : Int = 2;\n    if (x21 != v21) {\n        throw Exception(\"Exception -- test case 21 did not pass. x21 = \" + x21)\n    }\n\n    var arg220 : List<Int> = mutableListOf(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)\n    var x22 : Int = search(arg220);\n    var v22 : Int = 1;\n    if (x22 != v22) {\n        throw Exception(\"Exception -- test case 22 did not pass. x22 = \" + x22)\n    }\n\n    var arg230 : List<Int> = mutableListOf(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)\n    var x23 : Int = search(arg230);\n    var v23 : Int = 1;\n    if (x23 != v23) {\n        throw Exception(\"Exception -- test case 23 did not pass. x23 = \" + x23)\n    }\n\n    var arg240 : List<Int> = mutableListOf(3, 10, 10, 9, 2)\n    var x24 : Int = search(arg240);\n    var v24 : Int = -1;\n    if (x24 != v24) {\n        throw Exception(\"Exception -- test case 24 did not pass. x24 = \" + x24)\n    }\n\n\n}\n", "description": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1", "language": "kotlin", "canonical_solution": "\n    val frq = IntArray(lst.maxOrNull()!! + 1)\n    for (i in lst) {\n        frq[i] += 1\n    }\n    var ans = -1\n    for (i in 1 until frq.size) {\n        if (frq[i] >= i) {\n            ans = i\n        }\n    }\n    return ans\n}\n", "code_without_comments": "fun search(lst : List<Int>) : Int {\n    val frq = IntArray(lst.maxOrNull()!! + 1)\n    for (i in lst) {\n        frq[i] += 1\n    }\n    var ans = -1\n    for (i in 1 until frq.size) {\n        if (frq[i] >= i) {\n            ans = i\n        }\n    }\n    return ans\n}"}
{"task_id": "HumanEval_kotlin/72", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Write a function that returns True if the object q will fly, and False otherwise.\n * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n * Example:\n * will_it_fly([1, 2], 5) ➞ False \n * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n * will_it_fly([3, 2, 3], 1) ➞ False\n * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n * will_it_fly([3, 2, 3], 9) ➞ True\n * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n * will_it_fly([3], 5) ➞ True\n * # 3 is less than the maximum possible weight, and it's balanced.\n *\n */\nfun willItFly(q : List<Int>, w : Int) : Boolean {\n", "entry_point": "willItFly", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(3, 2, 3)\n    var arg01 : Int = 9\n    var x0 : Boolean = willItFly(arg00, arg01);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(1, 2)\n    var arg11 : Int = 5\n    var x1 : Boolean = willItFly(arg10, arg11);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(3)\n    var arg21 : Int = 5\n    var x2 : Boolean = willItFly(arg20, arg21);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(3, 2, 3)\n    var arg31 : Int = 1\n    var x3 : Boolean = willItFly(arg30, arg31);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(1, 2, 3)\n    var arg41 : Int = 6\n    var x4 : Boolean = willItFly(arg40, arg41);\n    var v4 : Boolean = false;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Int> = mutableListOf(5)\n    var arg51 : Int = 5\n    var x5 : Boolean = willItFly(arg50, arg51);\n    var v5 : Boolean = true;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n\n}\n", "description": "Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.", "language": "kotlin", "canonical_solution": "\n    if (q.sum() > w) {\n        return false\n    }\n    for (i in 0 until q.size / 2) {\n        if (q[i] != q[q.size - 1 - i]) {\n            return false\n        }\n    }\n    return true\n}\n", "code_without_comments": "fun willItFly(q : List<Int>, w : Int) : Boolean {\n    if (q.sum() > w) {\n        return false\n    }\n    for (i in 0 until q.size / 2) {\n        if (q[i] != q[q.size - 1 - i]) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/73", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given an array arr of integers, find the minimum number of elements that\n * need to be changed to make the array palindromic. A palindromic array is an array that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n * For example:\n * smallest_change([1,2,3,5,4,7,9,6]) == 4\n * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n * smallest_change([1, 2, 3, 2, 1]) == 0\n *\n */\nfun smallestChange(arr : List<Int>) : Int {\n", "entry_point": "smallestChange", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, 2, 3, 5, 4, 7, 9, 6)\n    var x0 : Int = smallestChange(arg00);\n    var v0 : Int = 4;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(1, 2, 3, 4, 3, 2, 2)\n    var x1 : Int = smallestChange(arg10);\n    var v1 : Int = 1;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(1, 4, 2)\n    var x2 : Int = smallestChange(arg20);\n    var v2 : Int = 1;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(1, 4, 4, 2)\n    var x3 : Int = smallestChange(arg30);\n    var v3 : Int = 1;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(1, 2, 3, 2, 1)\n    var x4 : Int = smallestChange(arg40);\n    var v4 : Int = 0;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Int> = mutableListOf(3, 1, 1, 3)\n    var x5 : Int = smallestChange(arg50);\n    var v5 : Int = 0;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Int> = mutableListOf(1)\n    var x6 : Int = smallestChange(arg60);\n    var v6 : Int = 0;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Int> = mutableListOf(0, 1)\n    var x7 : Int = smallestChange(arg70);\n    var v7 : Int = 1;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0", "language": "kotlin", "canonical_solution": "\n    var ans = 0\n    for (i in 0 until arr.size / 2) {\n        if (arr[i] != arr[arr.size - i - 1]) {\n            ans += 1\n        }\n    }\n    return ans\n}\n", "code_without_comments": "fun smallestChange(arr : List<Int>) : Int {\n    var ans = 0\n    for (i in 0 until arr.size / 2) {\n        if (arr[i] != arr[arr.size - i - 1]) {\n            ans += 1\n        }\n    }\n    return ans\n}"}
{"task_id": "HumanEval_kotlin/74", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Write a function that accepts two lists of strings and returns the list that has \n * total number of chars in the all strings of the list less than the other list.\n\n * if the two lists have the same number of chars, return the first list.\n\n * Examples\n * total_match([], []) ➞ []\n * total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n * total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n *\n */\nfun totalMatch(lst1 : List<Any>, lst2 : List<Any>) : List<Any> {\n", "entry_point": "totalMatch", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var arg01 : List<Any> = mutableListOf()\n    var x0 : List<Any> = totalMatch(arg00, arg01);\n    var v0 : List<Any> = mutableListOf();\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(\"\"\"hi\"\"\", \"\"\"admin\"\"\")\n    var arg11 : List<Any> = mutableListOf(\"\"\"hi\"\"\", \"\"\"hi\"\"\")\n    var x1 : List<Any> = totalMatch(arg10, arg11);\n    var v1 : List<Any> = mutableListOf(\"\"\"hi\"\"\", \"\"\"hi\"\"\");\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(\"\"\"hi\"\"\", \"\"\"admin\"\"\")\n    var arg21 : List<Any> = mutableListOf(\"\"\"hi\"\"\", \"\"\"hi\"\"\", \"\"\"admin\"\"\", \"\"\"project\"\"\")\n    var x2 : List<Any> = totalMatch(arg20, arg21);\n    var v2 : List<Any> = mutableListOf(\"\"\"hi\"\"\", \"\"\"admin\"\"\");\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(\"\"\"4\"\"\")\n    var arg31 : List<Any> = mutableListOf(\"\"\"1\"\"\", \"\"\"2\"\"\", \"\"\"3\"\"\", \"\"\"4\"\"\", \"\"\"5\"\"\")\n    var x3 : List<Any> = totalMatch(arg30, arg31);\n    var v3 : List<Any> = mutableListOf(\"\"\"4\"\"\");\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(\"\"\"hi\"\"\", \"\"\"admin\"\"\")\n    var arg41 : List<Any> = mutableListOf(\"\"\"hI\"\"\", \"\"\"Hi\"\"\")\n    var x4 : List<Any> = totalMatch(arg40, arg41);\n    var v4 : List<Any> = mutableListOf(\"\"\"hI\"\"\", \"\"\"Hi\"\"\");\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf(\"\"\"hi\"\"\", \"\"\"admin\"\"\")\n    var arg51 : List<Any> = mutableListOf(\"\"\"hI\"\"\", \"\"\"hi\"\"\", \"\"\"hi\"\"\")\n    var x5 : List<Any> = totalMatch(arg50, arg51);\n    var v5 : List<Any> = mutableListOf(\"\"\"hI\"\"\", \"\"\"hi\"\"\", \"\"\"hi\"\"\");\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf(\"\"\"hi\"\"\", \"\"\"admin\"\"\")\n    var arg61 : List<Any> = mutableListOf(\"\"\"hI\"\"\", \"\"\"hi\"\"\", \"\"\"hii\"\"\")\n    var x6 : List<Any> = totalMatch(arg60, arg61);\n    var v6 : List<Any> = mutableListOf(\"\"\"hi\"\"\", \"\"\"admin\"\"\");\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Any> = mutableListOf()\n    var arg71 : List<Any> = mutableListOf(\"\"\"this\"\"\")\n    var x7 : List<Any> = totalMatch(arg70, arg71);\n    var v7 : List<Any> = mutableListOf();\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<Any> = mutableListOf(\"\"\"this\"\"\")\n    var arg81 : List<Any> = mutableListOf()\n    var x8 : List<Any> = totalMatch(arg80, arg81);\n    var v8 : List<Any> = mutableListOf();\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n\n}\n", "description": "Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']", "language": "kotlin", "canonical_solution": "\n    var count1 = 0\n    for (obj in lst1) {\n        if (obj is String) {\n            count1 += obj.length\n        }\n    }\n    var count2 = 0\n    for (obj in lst2) {\n        if (obj is String) {\n            count2 += obj.length\n        }\n    }\n    return if (count1 <= count2) lst1 else lst2\n}\n", "code_without_comments": "fun totalMatch(lst1 : List<Any>, lst2 : List<Any>) : List<Any> {\n    var count1 = 0\n    for (obj in lst1) {\n        if (obj is String) {\n            count1 += obj.length\n        }\n    }\n    var count2 = 0\n    for (obj in lst2) {\n        if (obj is String) {\n            count2 += obj.length\n        }\n    }\n    return if (count1 <= count2) lst1 else lst2\n}"}
{"task_id": "HumanEval_kotlin/75", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n * and false otherwise.\n * Knowing that (a) is less then 100. \n * Example:\n * is_multiply_prime(30) == True\n * 30 = 2 * 3 * 5\n *\n */\nfun isMultiplyPrime(a : Int) : Boolean {\n", "entry_point": "isMultiplyPrime", "test": "\nfun main() {\n    var arg00 : Int = 5\n    var x0 : Boolean = isMultiplyPrime(arg00);\n    var v0 : Boolean = false;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 30\n    var x1 : Boolean = isMultiplyPrime(arg10);\n    var v1 : Boolean = true;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 8\n    var x2 : Boolean = isMultiplyPrime(arg20);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 10\n    var x3 : Boolean = isMultiplyPrime(arg30);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 125\n    var x4 : Boolean = isMultiplyPrime(arg40);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Int = 105\n    var x5 : Boolean = isMultiplyPrime(arg50);\n    var v5 : Boolean = true;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Int = 126\n    var x6 : Boolean = isMultiplyPrime(arg60);\n    var v6 : Boolean = false;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : Int = 729\n    var x7 : Boolean = isMultiplyPrime(arg70);\n    var v7 : Boolean = false;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : Int = 891\n    var x8 : Boolean = isMultiplyPrime(arg80);\n    var v8 : Boolean = false;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : Int = 1001\n    var x9 : Boolean = isMultiplyPrime(arg90);\n    var v9 : Boolean = true;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n\n}\n", "description": "Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5", "language": "kotlin", "canonical_solution": "\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        for (i in 2 until n) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n    for (i in 2..99) {\n        if (!isPrime(i)) continue\n        for (j in 2..99) {\n            if (!isPrime(j)) continue\n            for (k in 2..99) {\n                if (!isPrime(k)) continue\n                if (i * j * k == a) return true\n            }\n        }\n    }\n    return false\n}\n", "code_without_comments": "fun isMultiplyPrime(a : Int) : Boolean {\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        for (i in 2 until n) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n    for (i in 2..99) {\n        if (!isPrime(i)) continue\n        for (j in 2..99) {\n            if (!isPrime(j)) continue\n            for (k in 2..99) {\n                if (!isPrime(k)) continue\n                if (i * j * k == a) return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/76", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Your task is to write a function that returns true if a number x is a simple\n * power of n and false in other cases.\n * x is a simple power of n if n**int=x\n * For example:\n * is_simple_power(1, 4) => true\n * is_simple_power(2, 2) => true\n * is_simple_power(8, 2) => true\n * is_simple_power(3, 2) => false\n * is_simple_power(3, 1) => false\n * is_simple_power(5, 3) => false\n *\n */\nfun isSimplePower(x : Int, n : Int) : Boolean {\n", "entry_point": "isSimplePower", "test": "\nfun main() {\n    var arg00 : Int = 16\n    var arg01 : Int = 2\n    var x0 : Boolean = isSimplePower(arg00, arg01);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 143214\n    var arg11 : Int = 16\n    var x1 : Boolean = isSimplePower(arg10, arg11);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 4\n    var arg21 : Int = 2\n    var x2 : Boolean = isSimplePower(arg20, arg21);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 9\n    var arg31 : Int = 3\n    var x3 : Boolean = isSimplePower(arg30, arg31);\n    var v3 : Boolean = true;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 16\n    var arg41 : Int = 4\n    var x4 : Boolean = isSimplePower(arg40, arg41);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Int = 24\n    var arg51 : Int = 2\n    var x5 : Boolean = isSimplePower(arg50, arg51);\n    var v5 : Boolean = false;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Int = 128\n    var arg61 : Int = 4\n    var x6 : Boolean = isSimplePower(arg60, arg61);\n    var v6 : Boolean = false;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : Int = 12\n    var arg71 : Int = 6\n    var x7 : Boolean = isSimplePower(arg70, arg71);\n    var v7 : Boolean = false;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : Int = 1\n    var arg81 : Int = 1\n    var x8 : Boolean = isSimplePower(arg80, arg81);\n    var v8 : Boolean = true;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : Int = 1\n    var arg91 : Int = 12\n    var x9 : Boolean = isSimplePower(arg90, arg91);\n    var v9 : Boolean = true;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n\n}\n", "description": "Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false", "language": "kotlin", "canonical_solution": "\n    var power = 1\n    while (power < x) {\n        power *= n\n    }\n    return power == x\n}\n", "code_without_comments": "fun isSimplePower(x : Int, n : Int) : Boolean {\n    var power = 1\n    while (power < x) {\n        power *= n\n    }\n    return power == x\n}"}
{"task_id": "HumanEval_kotlin/82", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Write a function that takes a string and returns True if the string\n * length is a prime number or False otherwise\n * Examples\n * prime_length('Hello') == True\n * prime_length('abcdcba') == True\n * prime_length('kittens') == True\n * prime_length('orange') == False\n *\n */\nfun primeLength(string : String) : Boolean {\n", "entry_point": "primeLength", "test": "\nfun main() {\n    var arg00 : String = \"\"\"Hello\"\"\"\n    var x0 : Boolean = primeLength(arg00);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"abcdcba\"\"\"\n    var x1 : Boolean = primeLength(arg10);\n    var v1 : Boolean = true;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"kittens\"\"\"\n    var x2 : Boolean = primeLength(arg20);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"orange\"\"\"\n    var x3 : Boolean = primeLength(arg30);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"wow\"\"\"\n    var x4 : Boolean = primeLength(arg40);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"world\"\"\"\n    var x5 : Boolean = primeLength(arg50);\n    var v5 : Boolean = true;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"MadaM\"\"\"\n    var x6 : Boolean = primeLength(arg60);\n    var v6 : Boolean = true;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"Wow\"\"\"\n    var x7 : Boolean = primeLength(arg70);\n    var v7 : Boolean = true;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : String = \"\"\"\"\"\"\n    var x8 : Boolean = primeLength(arg80);\n    var v8 : Boolean = false;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : String = \"\"\"HI\"\"\"\n    var x9 : Boolean = primeLength(arg90);\n    var v9 : Boolean = true;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : String = \"\"\"go\"\"\"\n    var x10 : Boolean = primeLength(arg100);\n    var v10 : Boolean = true;\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n    var arg110 : String = \"\"\"gogo\"\"\"\n    var x11 : Boolean = primeLength(arg110);\n    var v11 : Boolean = false;\n    if (x11 != v11) {\n        throw Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11)\n    }\n\n    var arg120 : String = \"\"\"aaaaaaaaaaaaaaa\"\"\"\n    var x12 : Boolean = primeLength(arg120);\n    var v12 : Boolean = false;\n    if (x12 != v12) {\n        throw Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12)\n    }\n\n    var arg130 : String = \"\"\"Madam\"\"\"\n    var x13 : Boolean = primeLength(arg130);\n    var v13 : Boolean = true;\n    if (x13 != v13) {\n        throw Exception(\"Exception -- test case 13 did not pass. x13 = \" + x13)\n    }\n\n    var arg140 : String = \"\"\"M\"\"\"\n    var x14 : Boolean = primeLength(arg140);\n    var v14 : Boolean = false;\n    if (x14 != v14) {\n        throw Exception(\"Exception -- test case 14 did not pass. x14 = \" + x14)\n    }\n\n    var arg150 : String = \"\"\"0\"\"\"\n    var x15 : Boolean = primeLength(arg150);\n    var v15 : Boolean = false;\n    if (x15 != v15) {\n        throw Exception(\"Exception -- test case 15 did not pass. x15 = \" + x15)\n    }\n\n\n}\n", "description": "Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False", "language": "kotlin", "canonical_solution": "\n    val l = string.length\n    if (l <= 1) return false\n    for (i in 2..l/2) {\n        if (l % i == 0) return false\n    }\n    return true\n}\n", "code_without_comments": "fun primeLength(string : String) : Boolean {\n    val l = string.length\n    if (l <= 1) return false\n    for (i in 2..l/2) {\n        if (l % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/84", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a positive integer N, return the total sum of its digits in binary.\n * \n * Example\n *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n * \n * Variables:\n *     @N integer\n *          Constraints: 0 ≤ N ≤ 10000.\n * Output:\n *      a string of binary number\n *\n */\nfun solve(n : Int) : String {\n", "entry_point": "solve", "test": "\nfun main() {\n    var arg00 : Int = 1000\n    var x0 : String = solve(arg00);\n    var v0 : String = \"\"\"1\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 150\n    var x1 : String = solve(arg10);\n    var v1 : String = \"\"\"110\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 147\n    var x2 : String = solve(arg20);\n    var v2 : String = \"\"\"1100\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 333\n    var x3 : String = solve(arg30);\n    var v3 : String = \"\"\"1001\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 963\n    var x4 : String = solve(arg40);\n    var v4 : String = \"\"\"10010\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number", "language": "kotlin", "canonical_solution": "\n    val sum = n.toString().map { it - '0' }.sum()\n    return sum.toString(2)\n}\n", "code_without_comments": "fun solve(n : Int) : String {\n    val sum = n.toString().map { it - '0' }.sum()\n    return sum.toString(2)\n}"}
{"task_id": "HumanEval_kotlin/85", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n * Examples:\n *     add([4, 2, 6, 7]) ==> 2 \n *\n */\nfun add(lst : List<Int>) : Int {\n", "entry_point": "add", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(4, 88)\n    var x0 : Int = add(arg00);\n    var v0 : Int = 88;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(4, 5, 6, 7, 2, 122)\n    var x1 : Int = add(arg10);\n    var v1 : Int = 122;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(4, 0, 6, 7)\n    var x2 : Int = add(arg20);\n    var v2 : Int = 0;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(4, 4, 6, 8)\n    var x3 : Int = add(arg30);\n    var v3 : Int = 12;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2", "language": "kotlin", "canonical_solution": "\n    var sum = 0\n    for (i in 1 until lst.size step 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n", "code_without_comments": "fun add(lst : List<Int>) : Int {\n    var sum = 0\n    for (i in 1 until lst.size step 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/86", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Write a function that takes a string and returns an ordered version of it.\n * Ordered version of string, is a string where all words (separated by space)\n * are replaced by a new word where all the characters arranged in\n * ascending order based on ascii value.\n * Note: You should keep the order of words and blank spaces in the sentence.\n\n * For example:\n * anti_shuffle('Hi') returns 'Hi'\n * anti_shuffle('hello') returns 'ehllo'\n * anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n *\n */\nfun antiShuffle(s : String) : String {\n", "entry_point": "antiShuffle", "test": "\nfun main() {\n    var arg00 : String = \"\"\"Hi\"\"\"\n    var x0 : String = antiShuffle(arg00);\n    var v0 : String = \"\"\"Hi\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"hello\"\"\"\n    var x1 : String = antiShuffle(arg10);\n    var v1 : String = \"\"\"ehllo\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"number\"\"\"\n    var x2 : String = antiShuffle(arg20);\n    var v2 : String = \"\"\"bemnru\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"abcd\"\"\"\n    var x3 : String = antiShuffle(arg30);\n    var v3 : String = \"\"\"abcd\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"Hello World!!!\"\"\"\n    var x4 : String = antiShuffle(arg40);\n    var v4 : String = \"\"\"Hello !!!Wdlor\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"\"\"\"\n    var x5 : String = antiShuffle(arg50);\n    var v5 : String = \"\"\"\"\"\";\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"Hi. My name is Mister Robot. How are you?\"\"\"\n    var x6 : String = antiShuffle(arg60);\n    var v6 : String = \"\"\".Hi My aemn is Meirst .Rboot How aer ?ouy\"\"\";\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'", "language": "kotlin", "canonical_solution": "\n    val words = s.split(\" \")\n    val result = words.map { word ->\n        val chars = word.toCharArray()\n        chars.sort()\n        String(chars)\n    }\n    return result.joinToString(\" \")\n}\n", "code_without_comments": "fun antiShuffle(s : String) : String {\n    val words = s.split(\" \")\n    val result = words.map { word ->\n        val chars = word.toCharArray()\n        chars.sort()\n        String(chars)\n    }\n    return result.joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/89", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Create a function encrypt that takes a string as an argument and\n * returns a string encrypted with the alphabet being rotated. \n * The alphabet should be rotated in a manner such that the letters \n * shift down by two multiplied to two places.\n * For example:\n * encrypt('hi') returns 'lm'\n * encrypt('asdfghjkl') returns 'ewhjklnop'\n * encrypt('gf') returns 'kj'\n * encrypt('et') returns 'ix'\n *\n */\nfun encrypt(s : String) : String {\n", "entry_point": "encrypt", "test": "\nfun main() {\n    var arg00 : String = \"\"\"hi\"\"\"\n    var x0 : String = encrypt(arg00);\n    var v0 : String = \"\"\"lm\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"asdfghjkl\"\"\"\n    var x1 : String = encrypt(arg10);\n    var v1 : String = \"\"\"ewhjklnop\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"gf\"\"\"\n    var x2 : String = encrypt(arg20);\n    var v2 : String = \"\"\"kj\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"et\"\"\"\n    var x3 : String = encrypt(arg30);\n    var v3 : String = \"\"\"ix\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"faewfawefaewg\"\"\"\n    var x4 : String = encrypt(arg40);\n    var v4 : String = \"\"\"jeiajeaijeiak\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"hellomyfriend\"\"\"\n    var x5 : String = encrypt(arg50);\n    var v5 : String = \"\"\"lippsqcjvmirh\"\"\";\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\"\"\n    var x6 : String = encrypt(arg60);\n    var v6 : String = \"\"\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\"\";\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"a\"\"\"\n    var x7 : String = encrypt(arg70);\n    var v7 : String = \"\"\"e\"\"\";\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'", "language": "kotlin", "canonical_solution": "\n    val d = 'a'..'z'\n    val shift = 2 * 2\n    return s.map { c ->\n        if (c in d) {\n            val shifted = (c - 'a' + shift) % 26 + 'a'.toInt()\n            shifted.toChar()\n        } else {\n            c\n        }\n    }.joinToString(\"\")\n}\n", "code_without_comments": "fun encrypt(s : String) : String {\n    val d = 'a'..'z'\n    val shift = 2 * 2\n    return s.map { c ->\n        if (c in d) {\n            val shifted = (c - 'a' + shift) % 26 + 'a'.toInt()\n            shifted.toChar()\n        } else {\n            c\n        }\n    }.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/90", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * You are given a list of integers.\n * Write a function next_smallest() that returns the 2nd smallest element of the list.\n * Return  if there is no such element.\n * \n * next_smallest([1, 2, 3, 4, 5]) == 2\n * next_smallest([5, 1, 4, 3, 2]) == 2\n * next_smallest([]) == None\n * next_smallest([1, 1]) == None\n *\n */\nfun nextSmallest(lst : List<Any>) : Int? {\n", "entry_point": "nextSmallest", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(1, 2, 3, 4, 5)\n    var x0 : Int? = nextSmallest(arg00);\n    var v0 : Int? = 2;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(5, 1, 4, 3, 2)\n    var x1 : Int? = nextSmallest(arg10);\n    var v1 : Int? = 2;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf()\n    var x2 : Int? = nextSmallest(arg20);\n    var v2 : Int? = null;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(1, 1)\n    var x3 : Int? = nextSmallest(arg30);\n    var v3 : Int? = null;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(1, 1, 1, 1, 0)\n    var x4 : Int? = nextSmallest(arg40);\n    var v4 : Int? = 1;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf(1, 1)\n    var x5 : Int? = nextSmallest(arg50);\n    var v5 : Int? = null;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf(-35, 34, 12, -45)\n    var x6 : Int? = nextSmallest(arg60);\n    var v6 : Int? = -35;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return  if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None", "language": "kotlin", "canonical_solution": "\n    val uniqueList = lst.filterIsInstance<Int>().distinct()\n    return if (uniqueList.size < 2) null else uniqueList.sorted()[1]\n}\n", "code_without_comments": "fun nextSmallest(lst : List<Any>) : Int? {\n    val uniqueList = lst.filterIsInstance<Int>().distinct()\n    return if (uniqueList.size < 2) null else uniqueList.sorted()[1]\n}"}
{"task_id": "HumanEval_kotlin/91", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * You'll be given a string of words, and your task is to count the number\n * of boredoms. A boredom is a sentence that starts with the word \"I\".\n * Sentences are delimited by '.', '?' or '!'.\n   \n * For example:\n * >>> is_bored(\"Hello world\")\n * 0\n * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n * 1\n *\n */\nfun isBored(s : String) : Int {\n", "entry_point": "isBored", "test": "\nfun main() {\n    var arg00 : String = \"\"\"Hello world\"\"\"\n    var x0 : Int = isBored(arg00);\n    var v0 : Int = 0;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"Is the sky blue?\"\"\"\n    var x1 : Int = isBored(arg10);\n    var v1 : Int = 0;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"I love It !\"\"\"\n    var x2 : Int = isBored(arg20);\n    var v2 : Int = 1;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"bIt\"\"\"\n    var x3 : Int = isBored(arg30);\n    var v3 : Int = 0;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"I feel good today. I will be productive. will kill It\"\"\"\n    var x4 : Int = isBored(arg40);\n    var v4 : Int = 2;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"You and I are going for a walk\"\"\"\n    var x5 : Int = isBored(arg50);\n    var v5 : Int = 0;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n\n}\n", "description": "You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1", "language": "kotlin", "canonical_solution": "\n    var count = 0\n    val sentences = s.split(\"[.?!]\".toRegex())\n    for (sentence in sentences) {\n        val trimmedSentence = sentence.trim()\n        if (trimmedSentence.startsWith(\"I \")) {\n            count++\n        }\n    }\n    return count\n}\n", "code_without_comments": "fun isBored(s : String) : Int {\n    var count = 0\n    val sentences = s.split(\"[.?!]\".toRegex())\n    for (sentence in sentences) {\n        val trimmedSentence = sentence.trim()\n        if (trimmedSentence.startsWith(\"I \")) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/95", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a dictionary, return True if all keys are strings in lower \n * case or all keys are strings in upper case, else return False.\n * The function should return False is the given dictionary is empty.\n * Examples:\n * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n *\n */\nfun checkDictCase(dict : Map<Any?, Any?>) : Boolean {\n", "entry_point": "checkDictCase", "test": "\nfun main() {\n    var arg00 : Map<Any?, Any?> = mutableMapOf(\"\"\"p\"\"\" to \"\"\"pineapple\"\"\", \"\"\"b\"\"\" to \"\"\"banana\"\"\")\n    var x0 : Boolean = checkDictCase(arg00);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Map<Any?, Any?> = mutableMapOf(\"\"\"p\"\"\" to \"\"\"pineapple\"\"\", \"\"\"A\"\"\" to \"\"\"banana\"\"\", \"\"\"B\"\"\" to \"\"\"banana\"\"\")\n    var x1 : Boolean = checkDictCase(arg10);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Map<Any?, Any?> = mutableMapOf(\"\"\"p\"\"\" to \"\"\"pineapple\"\"\", 5 to \"\"\"banana\"\"\", \"\"\"a\"\"\" to \"\"\"apple\"\"\")\n    var x2 : Boolean = checkDictCase(arg20);\n    var v2 : Boolean = false;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Map<Any?, Any?> = mutableMapOf(\"\"\"Name\"\"\" to \"\"\"John\"\"\", \"\"\"Age\"\"\" to \"\"\"36\"\"\", \"\"\"City\"\"\" to \"\"\"Houston\"\"\")\n    var x3 : Boolean = checkDictCase(arg30);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Map<Any?, Any?> = mutableMapOf(\"\"\"STATE\"\"\" to \"\"\"NC\"\"\", \"\"\"ZIP\"\"\" to \"\"\"12345\"\"\")\n    var x4 : Boolean = checkDictCase(arg40);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Map<Any?, Any?> = mutableMapOf(\"\"\"fruit\"\"\" to \"\"\"Orange\"\"\", \"\"\"taste\"\"\" to \"\"\"Sweet\"\"\")\n    var x5 : Boolean = checkDictCase(arg50);\n    var v5 : Boolean = true;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Map<Any?, Any?> = mutableMapOf()\n    var x6 : Boolean = checkDictCase(arg60);\n    var v6 : Boolean = false;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.", "language": "kotlin", "canonical_solution": "\n    if (dict.isEmpty()) return false\n    var isLower = false\n    var isUpper = false\n    for (key in dict.keys) {\n        if (key is String) {\n            if (key.all { it.isLowerCase() }) isLower = true\n            if (key.all { it.isUpperCase() }) isUpper = true\n        } else {\n            return false\n        }\n    }\n    return isLower != isUpper\n}\n", "code_without_comments": "fun checkDictCase(dict : Map<Any?, Any?>) : Boolean {\n    if (dict.isEmpty()) return false\n    var isLower = false\n    var isUpper = false\n    for (key in dict.keys) {\n        if (key is String) {\n            if (key.all { it.isLowerCase() }) isLower = true\n            if (key.all { it.isUpperCase() }) isUpper = true\n        } else {\n            return false\n        }\n    }\n    return isLower != isUpper\n}"}
{"task_id": "HumanEval_kotlin/98", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a string s, count the number of uppercase vowels in even indices.\n * \n * For example:\n * count_upper('aBCdEf') returns 1\n * count_upper('abcdefg') returns 0\n * count_upper('dBBE') returns 0\n *\n */\nfun countUpper(s : String) : Int {\n", "entry_point": "countUpper", "test": "\nfun main() {\n    var arg00 : String = \"\"\"abcdefg\"\"\"\n    var x0 : Int = countUpper(arg00);\n    var v0 : Int = 0;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"dBBE\"\"\"\n    var x1 : Int = countUpper(arg10);\n    var v1 : Int = 0;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"\"\"\"\n    var x2 : Int = countUpper(arg20);\n    var v2 : Int = 0;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"EEEE\"\"\"\n    var x3 : Int = countUpper(arg30);\n    var v3 : Int = 2;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0", "language": "kotlin", "canonical_solution": "\n    var count = 0\n    for (i in 0 until s.length step 2) {\n        if (s[i] in \"AEIOU\") {\n            count += 1\n        }\n    }\n    return count\n}\n", "code_without_comments": "fun countUpper(s : String) : Int {\n    var count = 0\n    for (i in 0 until s.length step 2) {\n        if (s[i] in \"AEIOU\") {\n            count += 1\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/100", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a positive integer n, you have to make a pile of n levels of stones.\n * The first level has n stones.\n * The number of stones in the next level is:\n *     - the next odd number if n is odd.\n *     - the next even number if n is even.\n * Return the number of stones in each level in a list, where element at index\n * i represents the number of stones in the level (i+1).\n\n * Examples:\n * >>> make_a_pile(3)\n * [3, 5, 7]\n *\n */\nfun makeAPile(n : Int) : List<Int> {\n", "entry_point": "makeAPile", "test": "\nfun main() {\n    var arg00 : Int = 3\n    var x0 : List<Int> = makeAPile(arg00);\n    var v0 : List<Int> = mutableListOf(3, 5, 7);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 4\n    var x1 : List<Int> = makeAPile(arg10);\n    var v1 : List<Int> = mutableListOf(4, 6, 8, 10);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 5\n    var x2 : List<Int> = makeAPile(arg20);\n    var v2 : List<Int> = mutableListOf(5, 7, 9, 11, 13);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 6\n    var x3 : List<Int> = makeAPile(arg30);\n    var v3 : List<Int> = mutableListOf(6, 8, 10, 12, 14, 16);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 8\n    var x4 : List<Int> = makeAPile(arg40);\n    var v4 : List<Int> = mutableListOf(8, 10, 12, 14, 16, 18, 20, 22);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]", "language": "kotlin", "canonical_solution": "\n    val result = mutableListOf<Int>()\n    for (i in 0 until n) {\n        result.add(n + 2 * i)\n    }\n    return result\n}\n", "code_without_comments": "fun makeAPile(n : Int) : List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 0 until n) {\n        result.add(n + 2 * i)\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/106", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Implement the function f that takes n as a parameter,\n * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n * or the sum of numbers from 1 to i otherwise.\n * i starts from 1.\n * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n * Example:\n * f(5) == [1, 2, 6, 24, 15]\n *\n */\nfun f(n : Int) : List<Int> {\n", "entry_point": "f", "test": "\nfun main() {\n    var arg00 : Int = 5\n    var x0 : List<Int> = f(arg00);\n    var v0 : List<Int> = mutableListOf(1, 2, 6, 24, 15);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 7\n    var x1 : List<Int> = f(arg10);\n    var v1 : List<Int> = mutableListOf(1, 2, 6, 24, 15, 720, 28);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 1\n    var x2 : List<Int> = f(arg20);\n    var v2 : List<Int> = mutableListOf(1);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 3\n    var x3 : List<Int> = f(arg30);\n    var v3 : List<Int> = mutableListOf(1, 2, 6);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]", "language": "kotlin", "canonical_solution": "\n    val ret = mutableListOf<Int>()\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            var x = 1\n            for (j in 1..i) {\n                x *= j\n            }\n            ret.add(x)\n        } else {\n            var x = 0\n            for (j in 1..i) {\n                x += j\n            }\n            ret.add(x)\n        }\n    }\n    return ret\n}\n", "code_without_comments": "fun f(n : Int) : List<Int> {\n    val ret = mutableListOf<Int>()\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            var x = 1\n            for (j in 1..i) {\n                x *= j\n            }\n            ret.add(x)\n        } else {\n            var x = 0\n            for (j in 1..i) {\n                x += j\n            }\n            ret.add(x)\n        }\n    }\n    return ret\n}"}
{"task_id": "HumanEval_kotlin/107", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a positive integer n, return a tuple that has the number of even and odd\n * integer palindromes that fall within the range(1, n), inclusive.\n\n * Example 1:\n\n *     Input: 3\n *     Output: (1, 2)\n *     Explanation:\n *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n * Example 2:\n\n *     Input: 12\n *     Output: (4, 6)\n *     Explanation:\n *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n * Note:\n *     1. 1 <= n <= 10^3\n *     2. returned tuple has the number of even and odd integer palindromes respectively.\n *\n */\nfun evenOddPalindrome(n : Int) : List<Int> {\n", "entry_point": "evenOddPalindrome", "test": "\nfun main() {\n    var arg00 : Int = 123\n    var x0 : List<Int> = evenOddPalindrome(arg00);\n    var v0 : List<Int> = mutableListOf(8, 13);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 12\n    var x1 : List<Int> = evenOddPalindrome(arg10);\n    var v1 : List<Int> = mutableListOf(4, 6);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 3\n    var x2 : List<Int> = evenOddPalindrome(arg20);\n    var v2 : List<Int> = mutableListOf(1, 2);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 63\n    var x3 : List<Int> = evenOddPalindrome(arg30);\n    var v3 : List<Int> = mutableListOf(6, 8);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 25\n    var x4 : List<Int> = evenOddPalindrome(arg40);\n    var v4 : List<Int> = mutableListOf(5, 6);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Int = 19\n    var x5 : List<Int> = evenOddPalindrome(arg50);\n    var v5 : List<Int> = mutableListOf(4, 6);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Int = 9\n    var x6 : List<Int> = evenOddPalindrome(arg60);\n    var v6 : List<Int> = mutableListOf(4, 5);\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : Int = 1\n    var x7 : List<Int> = evenOddPalindrome(arg70);\n    var v7 : List<Int> = mutableListOf(0, 1);\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.", "language": "kotlin", "canonical_solution": "\n    fun isPalindrome(num: Int): Boolean = num.toString() == num.toString().reversed()\n    var evenPalindromeCount = 0\n    var oddPalindromeCount = 0\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) evenPalindromeCount++\n            else oddPalindromeCount++\n        }\n    }\n    return listOf(evenPalindromeCount, oddPalindromeCount)\n}\n", "code_without_comments": "fun evenOddPalindrome(n : Int) : List<Int> {\n    fun isPalindrome(num: Int): Boolean = num.toString() == num.toString().reversed()\n    var evenPalindromeCount = 0\n    var oddPalindromeCount = 0\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) evenPalindromeCount++\n            else oddPalindromeCount++\n        }\n    }\n    return listOf(evenPalindromeCount, oddPalindromeCount)\n}"}
{"task_id": "HumanEval_kotlin/110", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * In this problem, you will implement a function that takes two lists of numbers,\n * and determines whether it is possible to perform an exchange of elements\n * between them to make lst1 a list of only even numbers.\n * There is no limit on the number of exchanged elements between lst1 and lst2.\n * If it is possible to exchange elements between the lst1 and lst2 to make\n * all the elements of lst1 to be even, return \"YES\".\n * Otherwise, return \"NO\".\n * For example:\n * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n * It is assumed that the input lists will be non-empty.\n *\n */\nfun exchange(lst1 : List<Int>, lst2 : List<Int>) : String {\n", "entry_point": "exchange", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, 2, 3, 4)\n    var arg01 : List<Int> = mutableListOf(1, 2, 3, 4)\n    var x0 : String = exchange(arg00, arg01);\n    var v0 : String = \"\"\"YES\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(1, 2, 3, 4)\n    var arg11 : List<Int> = mutableListOf(1, 5, 3, 4)\n    var x1 : String = exchange(arg10, arg11);\n    var v1 : String = \"\"\"NO\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(1, 2, 3, 4)\n    var arg21 : List<Int> = mutableListOf(2, 1, 4, 3)\n    var x2 : String = exchange(arg20, arg21);\n    var v2 : String = \"\"\"YES\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(5, 7, 3)\n    var arg31 : List<Int> = mutableListOf(2, 6, 4)\n    var x3 : String = exchange(arg30, arg31);\n    var v3 : String = \"\"\"YES\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(5, 7, 3)\n    var arg41 : List<Int> = mutableListOf(2, 6, 3)\n    var x4 : String = exchange(arg40, arg41);\n    var v4 : String = \"\"\"NO\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Int> = mutableListOf(3, 2, 6, 1, 8, 9)\n    var arg51 : List<Int> = mutableListOf(3, 5, 5, 1, 1, 1)\n    var x5 : String = exchange(arg50, arg51);\n    var v5 : String = \"\"\"NO\"\"\";\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Int> = mutableListOf(100, 200)\n    var arg61 : List<Int> = mutableListOf(200, 200)\n    var x6 : String = exchange(arg60, arg61);\n    var v6 : String = \"\"\"YES\"\"\";\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.", "language": "kotlin", "canonical_solution": "\n    var odd = 0\n    var even = 0\n    for (i in lst1) {\n        if (i % 2 == 1) {\n            odd += 1\n        }\n    }\n    for (i in lst2) {\n        if (i % 2 == 0) {\n            even += 1\n        }\n    }\n    if (even >= odd) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n", "code_without_comments": "fun exchange(lst1 : List<Int>, lst2 : List<Int>) : String {\n    var odd = 0\n    var even = 0\n    for (i in lst1) {\n        if (i % 2 == 1) {\n            odd += 1\n        }\n    }\n    for (i in lst2) {\n        if (i % 2 == 0) {\n            even += 1\n        }\n    }\n    if (even >= odd) {\n        return \"YES\"\n    }\n    return \"NO\"\n}"}
{"task_id": "HumanEval_kotlin/115", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n\n * Example 1:\n *     Input: \n *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         bucket_capacity : 1\n *     Output: 6\n\n * Example 2:\n *     Input: \n *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         bucket_capacity : 2\n *     Output: 5\n * \n * Example 3:\n *     Input: \n *         grid : [[0,0,0], [0,0,0]]\n *         bucket_capacity : 5\n *     Output: 0\n\n * Constraints:\n *     * all wells have the same length\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= capacity <= 10\n *\n */\nfun maxFill(grid : List<List<Int>>, capacity : Int) : Int {\n", "entry_point": "maxFill", "test": "\nfun main() {\n    var arg00 : List<List<Int>> = mutableListOf(mutableListOf(0, 0, 1, 0), mutableListOf(0, 1, 0, 0), mutableListOf(1, 1, 1, 1))\n    var arg01 : Int = 1\n    var x0 : Int = maxFill(arg00, arg01);\n    var v0 : Int = 6;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<List<Int>> = mutableListOf(mutableListOf(0, 0, 1, 1), mutableListOf(0, 0, 0, 0), mutableListOf(1, 1, 1, 1), mutableListOf(0, 1, 1, 1))\n    var arg11 : Int = 2\n    var x1 : Int = maxFill(arg10, arg11);\n    var v1 : Int = 5;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<List<Int>> = mutableListOf(mutableListOf(0, 0, 0), mutableListOf(0, 0, 0))\n    var arg21 : Int = 5\n    var x2 : Int = maxFill(arg20, arg21);\n    var v2 : Int = 0;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<List<Int>> = mutableListOf(mutableListOf(1, 1, 1, 1), mutableListOf(1, 1, 1, 1))\n    var arg31 : Int = 2\n    var x3 : Int = maxFill(arg30, arg31);\n    var v3 : Int = 4;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<List<Int>> = mutableListOf(mutableListOf(1, 1, 1, 1), mutableListOf(1, 1, 1, 1))\n    var arg41 : Int = 9\n    var x4 : Int = maxFill(arg40, arg41);\n    var v4 : Int = 2;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10", "language": "kotlin", "canonical_solution": "\n    var sum = 0\n    for (arr in grid) {\n        sum += Math.ceil(arr.sum().toDouble() / capacity).toInt()\n    }\n    return sum\n}\n", "code_without_comments": "fun maxFill(grid : List<List<Int>>, capacity : Int) : Int {\n    var sum = 0\n    for (arr in grid) {\n        sum += Math.ceil(arr.sum().toDouble() / capacity).toInt()\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/116", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * In this Kata, you have to sort an array of non-negative integers according to\n * number of ones in their binary representation in ascending order.\n * For similar number of ones, sort based on decimal value.\n\n * It must be implemented like this:\n * >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n * >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n * >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n *\n */\nfun sortArray(arr : List<Any>) : List<Any> {\n", "entry_point": "sortArray", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(1, 5, 2, 3, 4)\n    var x0 : List<Any> = sortArray(arg00);\n    var v0 : List<Any> = mutableListOf(1, 2, 4, 3, 5);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(-2, -3, -4, -5, -6)\n    var x1 : List<Any> = sortArray(arg10);\n    var v1 : List<Any> = mutableListOf(-4, -2, -6, -5, -3);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(1, 0, 2, 3, 4)\n    var x2 : List<Any> = sortArray(arg20);\n    var v2 : List<Any> = mutableListOf(0, 1, 2, 4, 3);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf()\n    var x3 : List<Any> = sortArray(arg30);\n    var v3 : List<Any> = mutableListOf();\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)\n    var x4 : List<Any> = sortArray(arg40);\n    var v4 : List<Any> = mutableListOf(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf(3, 6, 44, 12, 32, 5)\n    var x5 : List<Any> = sortArray(arg50);\n    var v5 : List<Any> = mutableListOf(32, 3, 5, 6, 12, 44);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf(2, 4, 8, 16, 32)\n    var x6 : List<Any> = sortArray(arg60);\n    var v6 : List<Any> = mutableListOf(2, 4, 8, 16, 32);\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Any> = mutableListOf(2, 4, 8, 16, 32)\n    var x7 : List<Any> = sortArray(arg70);\n    var v7 : List<Any> = mutableListOf(2, 4, 8, 16, 32);\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]", "language": "kotlin", "canonical_solution": "\n    return arr.filterIsInstance<Int>().sortedWith(compareBy({ it.countOneBits() }, { it })).map { it }\n}\nfun Int.countOneBits(): Int {\n    return this.toString(2).count { it == '1' }\n}\n", "code_without_comments": "fun sortArray(arr : List<Any>) : List<Any> {\n    return arr.filterIsInstance<Int>().sortedWith(compareBy({ it.countOneBits() }, { it })).map { it }\n}\nfun Int.countOneBits(): Int {\n    return this.toString(2).count { it == '1' }\n}"}
{"task_id": "HumanEval_kotlin/118", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * You are given a word. Your task is to find the closest vowel that stands between \n * two consonants from the right side of the word (case sensitive).\n * \n * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n * find any vowel met the above condition. \n\n * You may assume that the given string contains English letter only.\n\n * Example:\n * get_closest_vowel(\"yogurt\") ==> \"u\"\n * get_closest_vowel(\"FULL\") ==> \"U\"\n * get_closest_vowel(\"quick\") ==> \"\"\n * get_closest_vowel(\"ab\") ==> \"\"\n *\n */\nfun getClosestVowel(word : String) : String {\n", "entry_point": "getClosestVowel", "test": "\nfun main() {\n    var arg00 : String = \"\"\"yogurt\"\"\"\n    var x0 : String = getClosestVowel(arg00);\n    var v0 : String = \"\"\"u\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"full\"\"\"\n    var x1 : String = getClosestVowel(arg10);\n    var v1 : String = \"\"\"u\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"easy\"\"\"\n    var x2 : String = getClosestVowel(arg20);\n    var v2 : String = \"\"\"\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"eAsy\"\"\"\n    var x3 : String = getClosestVowel(arg30);\n    var v3 : String = \"\"\"\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"ali\"\"\"\n    var x4 : String = getClosestVowel(arg40);\n    var v4 : String = \"\"\"\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"bad\"\"\"\n    var x5 : String = getClosestVowel(arg50);\n    var v5 : String = \"\"\"a\"\"\";\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"most\"\"\"\n    var x6 : String = getClosestVowel(arg60);\n    var v6 : String = \"\"\"o\"\"\";\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"ab\"\"\"\n    var x7 : String = getClosestVowel(arg70);\n    var v7 : String = \"\"\"\"\"\";\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : String = \"\"\"ba\"\"\"\n    var x8 : String = getClosestVowel(arg80);\n    var v8 : String = \"\"\"\"\"\";\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : String = \"\"\"quick\"\"\"\n    var x9 : String = getClosestVowel(arg90);\n    var v9 : String = \"\"\"\"\"\";\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : String = \"\"\"anime\"\"\"\n    var x10 : String = getClosestVowel(arg100);\n    var v10 : String = \"\"\"i\"\"\";\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n    var arg110 : String = \"\"\"Asia\"\"\"\n    var x11 : String = getClosestVowel(arg110);\n    var v11 : String = \"\"\"\"\"\";\n    if (x11 != v11) {\n        throw Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11)\n    }\n\n    var arg120 : String = \"\"\"Above\"\"\"\n    var x12 : String = getClosestVowel(arg120);\n    var v12 : String = \"\"\"o\"\"\";\n    if (x12 != v12) {\n        throw Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12)\n    }\n\n\n}\n", "description": "You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"", "language": "kotlin", "canonical_solution": "\n    if (word.length < 3) {\n        return \"\"\n    }\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.length - 2 downTo 1) {\n        if (vowels.indexOf(word[i]) != -1 && vowels.indexOf(word[i + 1]) == -1 && vowels.indexOf(word[i - 1]) == -1) {\n            return word[i].toString()\n        }\n    }\n    return \"\"\n}\n", "code_without_comments": "fun getClosestVowel(word : String) : String {\n    if (word.length < 3) {\n        return \"\"\n    }\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.length - 2 downTo 1) {\n        if (vowels.indexOf(word[i]) != -1 && vowels.indexOf(word[i + 1]) == -1 && vowels.indexOf(word[i - 1]) == -1) {\n            return word[i].toString()\n        }\n    }\n    return \"\"\n}"}
{"task_id": "HumanEval_kotlin/119", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * You are given a list of two strings, both strings consist of open\n * parentheses '(' or close parentheses ')' only.\n * Your job is to check if it is possible to concatenate the two strings in\n * some order, that the resulting string will be good.\n * A string S is considered to be good if and only if all parentheses in S\n * are balanced. For example: the string '(())()' is good, while the string\n * '())' is not.\n * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n * Examples:\n * match_parens(['()(', ')']) == 'Yes'\n * match_parens([')', ')']) == 'No'\n *\n */\nfun matchParens(lst : List<String>) : String {\n", "entry_point": "matchParens", "test": "\nfun main() {\n    var arg00 : List<String> = mutableListOf(\"\"\"()(\"\"\", \"\"\")\"\"\")\n    var x0 : String = matchParens(arg00);\n    var v0 : String = \"\"\"Yes\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<String> = mutableListOf(\"\"\")\"\"\", \"\"\")\"\"\")\n    var x1 : String = matchParens(arg10);\n    var v1 : String = \"\"\"No\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<String> = mutableListOf(\"\"\"(()(())\"\"\", \"\"\"())())\"\"\")\n    var x2 : String = matchParens(arg20);\n    var v2 : String = \"\"\"No\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<String> = mutableListOf(\"\"\")())\"\"\", \"\"\"(()()(\"\"\")\n    var x3 : String = matchParens(arg30);\n    var v3 : String = \"\"\"Yes\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<String> = mutableListOf(\"\"\"(())))\"\"\", \"\"\"(()())((\"\"\")\n    var x4 : String = matchParens(arg40);\n    var v4 : String = \"\"\"Yes\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<String> = mutableListOf(\"\"\"()\"\"\", \"\"\"())\"\"\")\n    var x5 : String = matchParens(arg50);\n    var v5 : String = \"\"\"No\"\"\";\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<String> = mutableListOf(\"\"\"(()(\"\"\", \"\"\"()))()\"\"\")\n    var x6 : String = matchParens(arg60);\n    var v6 : String = \"\"\"Yes\"\"\";\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<String> = mutableListOf(\"\"\"((((\"\"\", \"\"\"((())\"\"\")\n    var x7 : String = matchParens(arg70);\n    var v7 : String = \"\"\"No\"\"\";\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<String> = mutableListOf(\"\"\")(()\"\"\", \"\"\"(()(\"\"\")\n    var x8 : String = matchParens(arg80);\n    var v8 : String = \"\"\"No\"\"\";\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : List<String> = mutableListOf(\"\"\")(\"\"\", \"\"\")(\"\"\")\n    var x9 : String = matchParens(arg90);\n    var v9 : String = \"\"\"No\"\"\";\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : List<String> = mutableListOf(\"\"\"(\"\"\", \"\"\")\"\"\")\n    var x10 : String = matchParens(arg100);\n    var v10 : String = \"\"\"Yes\"\"\";\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n    var arg110 : List<String> = mutableListOf(\"\"\")\"\"\", \"\"\"(\"\"\")\n    var x11 : String = matchParens(arg110);\n    var v11 : String = \"\"\"Yes\"\"\";\n    if (x11 != v11) {\n        throw Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11)\n    }\n\n\n}\n", "description": "You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'", "language": "kotlin", "canonical_solution": "\n    val S1 = lst[0] + lst[1]\n    val S2 = lst[1] + lst[0]\n    fun check(s: String): Boolean {\n        var val_ = 0\n        for (i in s) {\n            if (i == '(') {\n                val_ += 1\n            } else {\n                val_ -= 1\n            }\n            if (val_ < 0) {\n                return false\n            }\n        }\n        return val_ == 0\n    }\n    return if (check(S1) || check(S2)) \"Yes\" else \"No\"\n}\n", "code_without_comments": "fun matchParens(lst : List<String>) : String {\n    val S1 = lst[0] + lst[1]\n    val S2 = lst[1] + lst[0]\n    fun check(s: String): Boolean {\n        var val_ = 0\n        for (i in s) {\n            if (i == '(') {\n                val_ += 1\n            } else {\n                val_ -= 1\n            }\n            if (val_ < 0) {\n                return false\n            }\n        }\n        return val_ == 0\n    }\n    return if (check(S1) || check(S2)) \"Yes\" else \"No\"\n}"}
{"task_id": "HumanEval_kotlin/121", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n * \n\n * Examples\n * solution([5, 8, 7, 1]) ==> 12\n * solution([3, 3, 3, 3, 3]) ==> 9\n * solution([30, 13, 24, 321]) ==>0\n *\n */\nfun solution(lst : List<Int>) : Int {\n", "entry_point": "solution", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(3, 3, 3, 3, 3)\n    var x0 : Int = solution(arg00);\n    var v0 : Int = 9;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(30, 13, 24, 321)\n    var x1 : Int = solution(arg10);\n    var v1 : Int = 0;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(5, 9)\n    var x2 : Int = solution(arg20);\n    var v2 : Int = 5;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(2, 4, 8)\n    var x3 : Int = solution(arg30);\n    var v3 : Int = 0;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(30, 13, 23, 32)\n    var x4 : Int = solution(arg40);\n    var v4 : Int = 23;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Int> = mutableListOf(3, 13, 2, 9)\n    var x5 : Int = solution(arg50);\n    var v5 : Int = 3;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n\n}\n", "description": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0", "language": "kotlin", "canonical_solution": "\n    var sum = 0\n    for (i in 0 until lst.size step 2) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n", "code_without_comments": "fun solution(lst : List<Int>) : Int {\n    var sum = 0\n    for (i in 0 until lst.size step 2) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/122", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a non-empty array of integers arr and an integer k, return\n * the sum of the elements with at most two digits from the first k elements of arr.\n\n * Example:\n\n *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n *     Output: 24 # sum of 21 + 3\n\n * Constraints:\n *     1. 1 <= len(arr) <= 100\n *     2. 1 <= k <= len(arr)\n *\n */\nfun addElements(arr : List<Int>, k : Int) : Int {\n", "entry_point": "addElements", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, -2, -3, 41, 57, 76, 87, 88, 99)\n    var arg01 : Int = 3\n    var x0 : Int = addElements(arg00, arg01);\n    var v0 : Int = -4;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(111, 121, 3, 4000, 5, 6)\n    var arg11 : Int = 2\n    var x1 : Int = addElements(arg10, arg11);\n    var v1 : Int = 0;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(11, 21, 3, 90, 5, 6, 7, 8, 9)\n    var arg21 : Int = 4\n    var x2 : Int = addElements(arg20, arg21);\n    var v2 : Int = 125;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(111, 21, 3, 4000, 5, 6, 7, 8, 9)\n    var arg31 : Int = 4\n    var x3 : Int = addElements(arg30, arg31);\n    var v3 : Int = 24;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(1)\n    var arg41 : Int = 1\n    var x4 : Int = addElements(arg40, arg41);\n    var v4 : Int = 1;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)", "language": "kotlin", "canonical_solution": "\n    return arr.take(k).filter { it.toString().length <= 2 }.sum()\n}\n", "code_without_comments": "fun addElements(arr : List<Int>, k : Int) : Int {\n    return arr.take(k).filter { it.toString().length <= 2 }.sum()\n}"}
{"task_id": "HumanEval_kotlin/131", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a positive integer n, return the product of the odd digits.\n * Return 0 if all digits are even.\n * For example:\n * digits(1)  == 1\n * digits(4)  == 0\n * digits(235) == 15\n *\n */\nfun digits(n : Int) : Int {\n", "entry_point": "digits", "test": "\nfun main() {\n    var arg00 : Int = 5\n    var x0 : Int = digits(arg00);\n    var v0 : Int = 5;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 54\n    var x1 : Int = digits(arg10);\n    var v1 : Int = 5;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 120\n    var x2 : Int = digits(arg20);\n    var v2 : Int = 1;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 5014\n    var x3 : Int = digits(arg30);\n    var v3 : Int = 5;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 98765\n    var x4 : Int = digits(arg40);\n    var v4 : Int = 315;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Int = 5576543\n    var x5 : Int = digits(arg50);\n    var v5 : Int = 2625;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Int = 2468\n    var x6 : Int = digits(arg60);\n    var v6 : Int = 0;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15", "language": "kotlin", "canonical_solution": "\n    var product = 1\n    var hasOdd = false\n    for (digit in n.toString()) {\n        val intDigit = digit - '0'\n        if (intDigit % 2 == 1) {\n            product *= intDigit\n            hasOdd = true\n        }\n    }\n    return if (hasOdd) product else 0\n}\n", "code_without_comments": "fun digits(n : Int) : Int {\n    var product = 1\n    var hasOdd = false\n    for (digit in n.toString()) {\n        val intDigit = digit - '0'\n        if (intDigit % 2 == 1) {\n            product *= intDigit\n            hasOdd = true\n        }\n    }\n    return if (hasOdd) product else 0\n}"}
{"task_id": "HumanEval_kotlin/132", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Create a function that takes a string as input which contains only square brackets.\n * The function should return True if and only if there is a valid subsequence of brackets \n * where at least one bracket in the subsequence is nested.\n\n * is_nested('[[]]') ➞ True\n * is_nested('[]]]]]]][[[[[]') ➞ False\n * is_nested('[][]') ➞ False\n * is_nested('[]') ➞ False\n * is_nested('[[][]]') ➞ True\n * is_nested('[[]][[') ➞ True\n *\n */\nfun isNested(string : String) : Boolean {\n", "entry_point": "isNested", "test": "\nfun main() {\n    var arg00 : String = \"\"\"[[]]\"\"\"\n    var x0 : Boolean = isNested(arg00);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"[]]]]]]][[[[[]\"\"\"\n    var x1 : Boolean = isNested(arg10);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"[][]\"\"\"\n    var x2 : Boolean = isNested(arg20);\n    var v2 : Boolean = false;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"[]\"\"\"\n    var x3 : Boolean = isNested(arg30);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"[[[[]]]]\"\"\"\n    var x4 : Boolean = isNested(arg40);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"[]]]]]]]]]]\"\"\"\n    var x5 : Boolean = isNested(arg50);\n    var v5 : Boolean = false;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"[][][[]]\"\"\"\n    var x6 : Boolean = isNested(arg60);\n    var v6 : Boolean = true;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"[[]\"\"\"\n    var x7 : Boolean = isNested(arg70);\n    var v7 : Boolean = false;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : String = \"\"\"[]]\"\"\"\n    var x8 : Boolean = isNested(arg80);\n    var v8 : Boolean = false;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : String = \"\"\"[[]][[\"\"\"\n    var x9 : Boolean = isNested(arg90);\n    var v9 : Boolean = true;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : String = \"\"\"[[][]]\"\"\"\n    var x10 : Boolean = isNested(arg100);\n    var v10 : Boolean = true;\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n    var arg110 : String = \"\"\"\"\"\"\n    var x11 : Boolean = isNested(arg110);\n    var v11 : Boolean = false;\n    if (x11 != v11) {\n        throw Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11)\n    }\n\n    var arg120 : String = \"\"\"[[[[[[[[\"\"\"\n    var x12 : Boolean = isNested(arg120);\n    var v12 : Boolean = false;\n    if (x12 != v12) {\n        throw Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12)\n    }\n\n    var arg130 : String = \"\"\"]]]]]]]]\"\"\"\n    var x13 : Boolean = isNested(arg130);\n    var v13 : Boolean = false;\n    if (x13 != v13) {\n        throw Exception(\"Exception -- test case 13 did not pass. x13 = \" + x13)\n    }\n\n\n}\n", "description": "Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True", "language": "kotlin", "canonical_solution": "\n    val openingBrackets = mutableListOf<Int>()\n    val closingBrackets = mutableListOf<Int>()\n    for (i in string.indices) {\n        if (string[i] == '[') {\n            openingBrackets.add(i)\n        } else {\n            closingBrackets.add(i)\n        }\n    }\n    closingBrackets.reverse()\n    var i = 0\n    val l = closingBrackets.size\n    for (idx in openingBrackets) {\n        if (i < l && idx < closingBrackets[i]) {\n            i += 1\n        }\n    }\n    return i >= 2\n}\n", "code_without_comments": "fun isNested(string : String) : Boolean {\n    val openingBrackets = mutableListOf<Int>()\n    val closingBrackets = mutableListOf<Int>()\n    for (i in string.indices) {\n        if (string[i] == '[') {\n            openingBrackets.add(i)\n        } else {\n            closingBrackets.add(i)\n        }\n    }\n    closingBrackets.reverse()\n    var i = 0\n    val l = closingBrackets.size\n    for (idx in openingBrackets) {\n        if (i < l && idx < closingBrackets[i]) {\n            i += 1\n        }\n    }\n    return i >= 2\n}"}
{"task_id": "HumanEval_kotlin/135", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Create a function which returns the largest index of an element which\n * is not greater than or equal to the element immediately preceding it. If\n * no such element exists then return -1. The given array will not contain\n * duplicate values.\n\n * Examples:\n * can_arrange([1,2,4,3,5]) = 3\n * can_arrange([1,2,3]) = -1\n *\n */\nfun canArrange(arr : List<Any>) : Int {\n", "entry_point": "canArrange", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(1, 2, 4, 3, 5)\n    var x0 : Int = canArrange(arg00);\n    var v0 : Int = 3;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(1, 2, 4, 5)\n    var x1 : Int = canArrange(arg10);\n    var v1 : Int = -1;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(1, 4, 2, 5, 6, 7, 8, 9, 10)\n    var x2 : Int = canArrange(arg20);\n    var v2 : Int = 2;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(4, 8, 5, 7, 3)\n    var x3 : Int = canArrange(arg30);\n    var v3 : Int = 4;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf()\n    var x4 : Int = canArrange(arg40);\n    var v4 : Int = -1;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1", "language": "kotlin", "canonical_solution": "\n    if (arr.isEmpty() || arr.size < 2) {\n        return -1\n    }\n    var ind = -1\n    for (i in 1 until arr.size) {\n        if (arr[i] as Comparable<Any> < arr[i - 1] as Comparable<Any>) {\n            ind = i\n        }\n    }\n    return ind\n}\n", "code_without_comments": "fun canArrange(arr : List<Any>) : Int {\n    if (arr.isEmpty() || arr.size < 2) {\n        return -1\n    }\n    var ind = -1\n    for (i in 1 until arr.size) {\n        if (arr[i] as Comparable<Any> < arr[i - 1] as Comparable<Any>) {\n            ind = i\n        }\n    }\n    return ind\n}"}
{"task_id": "HumanEval_kotlin/136", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Create a function that returns a tuple (a, b), where 'a' is\n * the largest of negative integers, and 'b' is the smallest\n * of positive integers in a list.\n * If there is no negative or positive integers, return them as None.\n\n * Examples:\n * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n * largest_smallest_integers([]) == (None, None)\n * largest_smallest_integers([0]) == (None, None)\n *\n */\nfun largestSmallestIntegers(lst : List<Any>) : List<Int?> {\n", "entry_point": "largestSmallestIntegers", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(2, 4, 1, 3, 5, 7)\n    var x0 : List<Int?> = largestSmallestIntegers(arg00);\n    var v0 : List<Int?> = mutableListOf(null, 1);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(2, 4, 1, 3, 5, 7, 0)\n    var x1 : List<Int?> = largestSmallestIntegers(arg10);\n    var v1 : List<Int?> = mutableListOf(null, 1);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(1, 3, 2, 4, 5, 6, -2)\n    var x2 : List<Int?> = largestSmallestIntegers(arg20);\n    var v2 : List<Int?> = mutableListOf(-2, 1);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(4, 5, 3, 6, 2, 7, -7)\n    var x3 : List<Int?> = largestSmallestIntegers(arg30);\n    var v3 : List<Int?> = mutableListOf(-7, 2);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(7, 3, 8, 4, 9, 2, 5, -9)\n    var x4 : List<Int?> = largestSmallestIntegers(arg40);\n    var v4 : List<Int?> = mutableListOf(-9, 2);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf()\n    var x5 : List<Int?> = largestSmallestIntegers(arg50);\n    var v5 : List<Int?> = mutableListOf(null, null);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf(0)\n    var x6 : List<Int?> = largestSmallestIntegers(arg60);\n    var v6 : List<Int?> = mutableListOf(null, null);\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Any> = mutableListOf(-1, -3, -5, -6)\n    var x7 : List<Int?> = largestSmallestIntegers(arg70);\n    var v7 : List<Int?> = mutableListOf(-1, null);\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<Any> = mutableListOf(-1, -3, -5, -6, 0)\n    var x8 : List<Int?> = largestSmallestIntegers(arg80);\n    var v8 : List<Int?> = mutableListOf(-1, null);\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : List<Any> = mutableListOf(-6, -4, -4, -3, 1)\n    var x9 : List<Int?> = largestSmallestIntegers(arg90);\n    var v9 : List<Int?> = mutableListOf(-3, 1);\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : List<Any> = mutableListOf(-6, -4, -4, -3, -100, 1)\n    var x10 : List<Int?> = largestSmallestIntegers(arg100);\n    var v10 : List<Int?> = mutableListOf(-3, 1);\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n\n}\n", "description": "Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)", "language": "kotlin", "canonical_solution": "\n    val negatives = lst.filterIsInstance<Int>().filter { it < 0 }\n    val positives = lst.filterIsInstance<Int>().filter { it > 0 }\n    return listOf(negatives.maxOrNull(), positives.minOrNull())\n}\n", "code_without_comments": "fun largestSmallestIntegers(lst : List<Any>) : List<Int?> {\n    val negatives = lst.filterIsInstance<Int>().filter { it < 0 }\n    val positives = lst.filterIsInstance<Int>().filter { it > 0 }\n    return listOf(negatives.maxOrNull(), positives.minOrNull())\n}"}
{"task_id": "HumanEval_kotlin/137", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Create a function that takes integers, floats, or strings representing\n * real numbers, and returns the larger variable in its given variable type.\n * Return  if the values are equal.\n * Note: If a real number is represented as a string, the floating point might be . or ,\n\n * compare_one(1, 2.5) ➞ 2.5\n * compare_one(1, \"2,3\") ➞ \"2,3\"\n * compare_one(\"5,1\", \"6\") ➞ \"6\"\n * compare_one(\"1\", 1) ➞ None\n *\n */\nfun compareOne(a : Any, b : Any) : Any? {\n", "entry_point": "compareOne", "test": "\nfun main() {\n    var arg00 : Any = 1\n    var arg01 : Any = 2\n    var x0 : Any? = compareOne(arg00, arg01);\n    var v0 : Any? = 2;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Any = 1\n    var arg11 : Any = 2.5\n    var x1 : Any? = compareOne(arg10, arg11);\n    var v1 : Any? = 2.5;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Any = 2\n    var arg21 : Any = 3\n    var x2 : Any? = compareOne(arg20, arg21);\n    var v2 : Any? = 3;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Any = 5\n    var arg31 : Any = 6\n    var x3 : Any? = compareOne(arg30, arg31);\n    var v3 : Any? = 6;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Any = 1\n    var arg41 : Any = \"\"\"2,3\"\"\"\n    var x4 : Any? = compareOne(arg40, arg41);\n    var v4 : Any? = \"\"\"2,3\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Any = \"\"\"5,1\"\"\"\n    var arg51 : Any = \"\"\"6\"\"\"\n    var x5 : Any? = compareOne(arg50, arg51);\n    var v5 : Any? = \"\"\"6\"\"\";\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Any = \"\"\"1\"\"\"\n    var arg61 : Any = \"\"\"2\"\"\"\n    var x6 : Any? = compareOne(arg60, arg61);\n    var v6 : Any? = \"\"\"2\"\"\";\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : Any = \"\"\"1\"\"\"\n    var arg71 : Any = 1\n    var x7 : Any? = compareOne(arg70, arg71);\n    var v7 : Any? = null;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return  if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None", "language": "kotlin", "canonical_solution": "\n    val tempA = when (a) {\n        is String -> a.replace(',', '.').toDouble()\n        is Double -> a\n        is Int -> a.toDouble()\n        else -> return null\n    }\n    val tempB = when (b) {\n        is String -> b.replace(',', '.').toDouble()\n        is Double -> b\n        is Int -> b.toDouble()\n        else -> return null\n    }\n    if (tempA == tempB) return null\n    return if (tempA > tempB) a else b\n}\n", "code_without_comments": "fun compareOne(a : Any, b : Any) : Any? {\n    val tempA = when (a) {\n        is String -> a.replace(',', '.').toDouble()\n        is Double -> a\n        is Int -> a.toDouble()\n        else -> return null\n    }\n    val tempB = when (b) {\n        is String -> b.replace(',', '.').toDouble()\n        is Double -> b\n        is Int -> b.toDouble()\n        else -> return null\n    }\n    if (tempA == tempB) return null\n    return if (tempA > tempB) a else b\n}"}
{"task_id": "HumanEval_kotlin/140", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a string text, replace all spaces in it with underscores, \n * and if a string has more than 2 consecutive spaces, \n * then replace all consecutive spaces with - \n * \n * fix_spaces(\"Example\") == \"Example\"\n * fix_spaces(\"Example 1\") == \"Example_1\"\n * fix_spaces(\" Example 2\") == \"_Example_2\"\n * fix_spaces(\" Example   3\") == \"_Example-3\"\n *\n */\nfun fixSpaces(text : String) : String {\n", "entry_point": "fixSpaces", "test": "\nfun main() {\n    var arg00 : String = \"\"\"Example\"\"\"\n    var x0 : String = fixSpaces(arg00);\n    var v0 : String = \"\"\"Example\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"Mudasir Hanif \"\"\"\n    var x1 : String = fixSpaces(arg10);\n    var v1 : String = \"\"\"Mudasir_Hanif_\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"Yellow Yellow  Dirty  Fellow\"\"\"\n    var x2 : String = fixSpaces(arg20);\n    var v2 : String = \"\"\"Yellow_Yellow__Dirty__Fellow\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"Exa   mple\"\"\"\n    var x3 : String = fixSpaces(arg30);\n    var v3 : String = \"\"\"Exa-mple\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"   Exa 1 2 2 mple\"\"\"\n    var x4 : String = fixSpaces(arg40);\n    var v4 : String = \"\"\"-Exa_1_2_2_mple\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"", "language": "kotlin", "canonical_solution": "\n    val sb = StringBuilder()\n    var start = 0\n    var end = 0\n    for (i in text.indices) {\n        if (text[i] == ' ') {\n            end += 1\n        } else {\n            if (end - start > 2) {\n                sb.append('-')\n            } else if (end - start > 0) {\n                sb.append(\"_\".repeat(end - start))\n            }\n            sb.append(text[i])\n            start = i + 1\n            end = i + 1\n        }\n    }\n    if (end - start > 2) {\n        sb.append('-')\n    } else if (end - start > 0) {\n        sb.append(\"_\".repeat(end - start))\n    }\n    return sb.toString()\n}\n", "code_without_comments": "fun fixSpaces(text : String) : String {\n    val sb = StringBuilder()\n    var start = 0\n    var end = 0\n    for (i in text.indices) {\n        if (text[i] == ' ') {\n            end += 1\n        } else {\n            if (end - start > 2) {\n                sb.append('-')\n            } else if (end - start > 0) {\n                sb.append(\"_\".repeat(end - start))\n            }\n            sb.append(text[i])\n            start = i + 1\n            end = i + 1\n        }\n    }\n    if (end - start > 2) {\n        sb.append('-')\n    } else if (end - start > 0) {\n        sb.append(\"_\".repeat(end - start))\n    }\n    return sb.toString()\n}"}
{"task_id": "HumanEval_kotlin/142", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * \"\n * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n * \n * Examples:\n * For lst = [1,2,3] the output should be 6\n * For lst = []  the output should be 0\n * For lst = [-1,-5,2,-1,-5]  the output should be -126\n *\n */\nfun sumSquares(lst : List<Any>) : Int {\n", "entry_point": "sumSquares", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(1, 2, 3)\n    var x0 : Int = sumSquares(arg00);\n    var v0 : Int = 6;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(1, 4, 9)\n    var x1 : Int = sumSquares(arg10);\n    var v1 : Int = 14;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf()\n    var x2 : Int = sumSquares(arg20);\n    var v2 : Int = 0;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(1, 1, 1, 1, 1, 1, 1, 1, 1)\n    var x3 : Int = sumSquares(arg30);\n    var v3 : Int = 9;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(-1, -1, -1, -1, -1, -1, -1, -1, -1)\n    var x4 : Int = sumSquares(arg40);\n    var v4 : Int = -3;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf(0)\n    var x5 : Int = sumSquares(arg50);\n    var v5 : Int = 0;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf(-1, -5, 2, -1, -5)\n    var x6 : Int = sumSquares(arg60);\n    var v6 : Int = -126;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Any> = mutableListOf(-56, -99, 1, 0, -2)\n    var x7 : Int = sumSquares(arg70);\n    var v7 : Int = 3030;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<Any> = mutableListOf(-1, 0, 0, 0, 0, 0, 0, 0, -1)\n    var x8 : Int = sumSquares(arg80);\n    var v8 : Int = 0;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : List<Any> = mutableListOf(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)\n    var x9 : Int = sumSquares(arg90);\n    var v9 : Int = -14196;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : List<Any> = mutableListOf(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)\n    var x10 : Int = sumSquares(arg100);\n    var v10 : Int = -1448;\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n\n}\n", "description": "\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126", "language": "kotlin", "canonical_solution": "\n    var result = 0\n    for (i in lst.indices) {\n        if (i % 3 == 0) {\n            result += (lst[i] as Int).times(lst[i] as Int)\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            result += (lst[i] as Int).times(lst[i] as Int).times(lst[i] as Int)\n        } else {\n            result += lst[i] as Int\n        }\n    }\n    return result\n}\n", "code_without_comments": "fun sumSquares(lst : List<Any>) : Int {\n    var result = 0\n    for (i in lst.indices) {\n        if (i % 3 == 0) {\n            result += (lst[i] as Int).times(lst[i] as Int)\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            result += (lst[i] as Int).times(lst[i] as Int).times(lst[i] as Int)\n        } else {\n            result += lst[i] as Int\n        }\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/143", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * You are given a string representing a sentence,\n * the sentence contains some words separated by a space,\n * and you have to return a string that contains the words from the original sentence,\n * whose lengths are prime numbers,\n * the order of the words in the new string should be the same as the original one.\n\n * Example 1:\n *     Input: sentence = \"This is a test\"\n *     Output: \"is\"\n\n * Example 2:\n *     Input: sentence = \"lets go for swimming\"\n *     Output: \"go for\"\n\n * Constraints:\n *     * 1 <= len(sentence) <= 100\n *     * sentence contains only letters\n *\n */\nfun wordsInSentence(sentence : String) : String {\n", "entry_point": "wordsInSentence", "test": "\nfun main() {\n    var arg00 : String = \"\"\"This is a test\"\"\"\n    var x0 : String = wordsInSentence(arg00);\n    var v0 : String = \"\"\"is\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"lets go for swimming\"\"\"\n    var x1 : String = wordsInSentence(arg10);\n    var v1 : String = \"\"\"go for\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"there is no place available here\"\"\"\n    var x2 : String = wordsInSentence(arg20);\n    var v2 : String = \"\"\"there is no place\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"Hi I am Hussein\"\"\"\n    var x3 : String = wordsInSentence(arg30);\n    var v3 : String = \"\"\"Hi am Hussein\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"go for it\"\"\"\n    var x4 : String = wordsInSentence(arg40);\n    var v4 : String = \"\"\"go for it\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"here\"\"\"\n    var x5 : String = wordsInSentence(arg50);\n    var v5 : String = \"\"\"\"\"\";\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"here is\"\"\"\n    var x6 : String = wordsInSentence(arg60);\n    var v6 : String = \"\"\"is\"\"\";\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters", "language": "kotlin", "canonical_solution": "\n    val new_lst = mutableListOf<String>()\n    for (word in sentence.split(\" \")) {\n        if (isPrime(word.length)) {\n            new_lst.add(word)\n        }\n    }\n    return new_lst.joinToString(\" \")\n}\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    for (i in 3..Math.sqrt(n.toDouble()).toInt() step 2) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n", "code_without_comments": "fun wordsInSentence(sentence : String) : String {\n    val new_lst = mutableListOf<String>()\n    for (word in sentence.split(\" \")) {\n        if (isPrime(word.length)) {\n            new_lst.add(word)\n        }\n    }\n    return new_lst.joinToString(\" \")\n}\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    for (i in 3..Math.sqrt(n.toDouble()).toInt() step 2) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/146", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Write a function that takes an array of numbers as input and returns \n * the number of elements in the array that are greater than 10 and both \n * first and last digits of a number are odd (1, 3, 5, 7, 9).\n * For example:\n * specialFilter([15, -73, 14, -15]) => 1 \n * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n *\n */\nfun specialfilter(nums : List<Any>) : Int {\n", "entry_point": "specialfilter", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(5, -2, 1, -5)\n    var x0 : Int = specialfilter(arg00);\n    var v0 : Int = 0;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(15, -73, 14, -15)\n    var x1 : Int = specialfilter(arg10);\n    var v1 : Int = 1;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(33, -2, -3, 45, 21, 109)\n    var x2 : Int = specialfilter(arg20);\n    var v2 : Int = 2;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(43, -12, 93, 125, 121, 109)\n    var x3 : Int = specialfilter(arg30);\n    var v3 : Int = 4;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(71, -2, -33, 75, 21, 19)\n    var x4 : Int = specialfilter(arg40);\n    var v4 : Int = 3;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf(1)\n    var x5 : Int = specialfilter(arg50);\n    var v5 : Int = 0;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf()\n    var x6 : Int = specialfilter(arg60);\n    var v6 : Int = 0;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2", "language": "kotlin", "canonical_solution": "\n    val oddDigits = setOf(1, 3, 5, 7, 9)\n    return nums.filterIsInstance<Int>()\n               .filter { it > 10 }\n               .count {\n                   val numStr = it.toString()\n                   oddDigits.contains(numStr.first().digitToInt()) &&\n                   oddDigits.contains(numStr.last().digitToInt())\n               }\n}\n", "code_without_comments": "fun specialfilter(nums : List<Any>) : Int {\n    val oddDigits = setOf(1, 3, 5, 7, 9)\n    return nums.filterIsInstance<Int>()\n               .filter { it > 10 }\n               .count {\n                   val numStr = it.toString()\n                   oddDigits.contains(numStr.first().digitToInt()) &&\n                   oddDigits.contains(numStr.last().digitToInt())\n               }\n}"}
{"task_id": "HumanEval_kotlin/147", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * You are given a positive integer n. You have to create an integer array a of length n.\n *     For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n * and a[i] + a[j] + a[k] is a multiple of 3.\n\n * Example :\n *     Input: n = 5\n *     Output: 1\n *     Explanation: \n *     a = [1, 3, 7, 13, 21]\n *     The only valid triple is (1, 7, 13).\n *\n */\nfun getMaxTriples(n : Int) : Int {\n", "entry_point": "getMaxTriples", "test": "\nfun main() {\n    var arg00 : Int = 5\n    var x0 : Int = getMaxTriples(arg00);\n    var v0 : Int = 1;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 6\n    var x1 : Int = getMaxTriples(arg10);\n    var v1 : Int = 4;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 10\n    var x2 : Int = getMaxTriples(arg20);\n    var v2 : Int = 36;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 100\n    var x3 : Int = getMaxTriples(arg30);\n    var v3 : Int = 53361;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).", "language": "kotlin", "canonical_solution": "\n    val A = (1..n).map { i -> i * i - i + 1 }\n    var count = 0\n    for (i in 0 until A.size) {\n        for (j in i + 1 until A.size) {\n            for (k in j + 1 until A.size) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "code_without_comments": "fun getMaxTriples(n : Int) : Int {\n    val A = (1..n).map { i -> i * i - i + 1 }\n    var count = 0\n    for (i in 0 until A.size) {\n        for (j in i + 1 until A.size) {\n            for (k in j + 1 until A.size) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/151", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a list of numbers, return the sum of squares of the numbers\n * in the list that are odd. Ignore numbers that are negative or not integers.\n * \n * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n * double_the_difference([-1, -2, 0]) == 0\n * double_the_difference([9, -2]) == 81\n * double_the_difference([0]) == 0  \n   \n * If the input list is empty, return 0.\n *\n */\nfun doubleTheDifference(lst : List<Any>) : Int {\n", "entry_point": "doubleTheDifference", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var x0 : Int = doubleTheDifference(arg00);\n    var v0 : Int = 0;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(5, 4)\n    var x1 : Int = doubleTheDifference(arg10);\n    var v1 : Int = 25;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(0.1, 0.2, 0.3)\n    var x2 : Int = doubleTheDifference(arg20);\n    var v2 : Int = 0;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(-10, -20, -30)\n    var x3 : Int = doubleTheDifference(arg30);\n    var v3 : Int = 0;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(-1, -2, 8)\n    var x4 : Int = doubleTheDifference(arg40);\n    var v4 : Int = 0;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf(0.2, 3, 5)\n    var x5 : Int = doubleTheDifference(arg50);\n    var v5 : Int = 34;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf(-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99)\n    var x6 : Int = doubleTheDifference(arg60);\n    var v6 : Int = 166650;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.", "language": "kotlin", "canonical_solution": "\n    return lst.filterIsInstance<Int>()\n              .filter { it > 0 && it % 2 != 0 }\n              .map { it * it }\n              .sum()\n}\n", "code_without_comments": "fun doubleTheDifference(lst : List<Any>) : Int {\n    return lst.filterIsInstance<Int>()\n              .filter { it > 0 && it % 2 != 0 }\n              .map { it * it }\n              .sum()\n}"}
{"task_id": "HumanEval_kotlin/152", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * I think we all remember that feeling when the result of some long-awaited\n * event is finally known. The feelings and thoughts you have at that moment are\n * definitely worth noting down and comparing.\n * Your task is to determine if a person correctly guessed the results of a number of matches.\n * You are given two arrays of scores and guesses of equal length, where each index shows a match. \n * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n * \n * \n * example:\n\n * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n *\n */\nfun compare(game : List<Int>, guess : List<Int>) : List<Int> {\n", "entry_point": "compare", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, 2, 3, 4, 5, 1)\n    var arg01 : List<Int> = mutableListOf(1, 2, 3, 4, 2, -2)\n    var x0 : List<Int> = compare(arg00, arg01);\n    var v0 : List<Int> = mutableListOf(0, 0, 0, 0, 3, 3);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(0, 0, 0, 0, 0, 0)\n    var arg11 : List<Int> = mutableListOf(0, 0, 0, 0, 0, 0)\n    var x1 : List<Int> = compare(arg10, arg11);\n    var v1 : List<Int> = mutableListOf(0, 0, 0, 0, 0, 0);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(1, 2, 3)\n    var arg21 : List<Int> = mutableListOf(-1, -2, -3)\n    var x2 : List<Int> = compare(arg20, arg21);\n    var v2 : List<Int> = mutableListOf(2, 4, 6);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(1, 2, 3, 5)\n    var arg31 : List<Int> = mutableListOf(-1, 2, 3, 4)\n    var x3 : List<Int> = compare(arg30, arg31);\n    var v3 : List<Int> = mutableListOf(2, 0, 0, 1);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]", "language": "kotlin", "canonical_solution": "\n    return game.zip(guess).map { (g, gs) -> Math.abs(g - gs) }\n}\n", "code_without_comments": "fun compare(game : List<Int>, guess : List<Int>) : List<Int> {\n    return game.zip(guess).map { (g, gs) -> Math.abs(g - gs) }\n}"}
{"task_id": "HumanEval_kotlin/153", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * You will be given the name of a class (a string) and a list of extensions.\n * The extensions are to be used to load additional classes to the class. The\n * strength of the extension is as follows: Let CAP be the number of the uppercase\n * letters in the extension's name, and let SM be the number of lowercase letters \n * in the extension's name, the strength is given by the fraction CAP - SM. \n * You should find the strongest extension and return a string in this \n * format: ClassName.StrongestExtensionName.\n * If there are two or more extensions with the same strength, you should\n * choose the one that comes first in the list.\n * For example, if you are given \"Slices\" as the class and a list of the\n * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n * (its strength is -1).\n * Example:\n * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n *\n */\nfun strongestExtension(className : String, extensions : List<String>) : String {\n", "entry_point": "strongestExtension", "test": "\nfun main() {\n    var arg00 : String = \"\"\"Watashi\"\"\"\n    var arg01 : List<String> = mutableListOf(\"\"\"tEN\"\"\", \"\"\"niNE\"\"\", \"\"\"eIGHt8OKe\"\"\")\n    var x0 : String = strongestExtension(arg00, arg01);\n    var v0 : String = \"\"\"Watashi.eIGHt8OKe\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"Boku123\"\"\"\n    var arg11 : List<String> = mutableListOf(\"\"\"nani\"\"\", \"\"\"NazeDa\"\"\", \"\"\"YEs.WeCaNe\"\"\", \"\"\"32145tggg\"\"\")\n    var x1 : String = strongestExtension(arg10, arg11);\n    var v1 : String = \"\"\"Boku123.YEs.WeCaNe\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"__YESIMHERE\"\"\"\n    var arg21 : List<String> = mutableListOf(\"\"\"t\"\"\", \"\"\"eMptY\"\"\", \"\"\"nothing\"\"\", \"\"\"zeR00\"\"\", \"\"\"NuLl__\"\"\", \"\"\"123NoooneB321\"\"\")\n    var x2 : String = strongestExtension(arg20, arg21);\n    var v2 : String = \"\"\"__YESIMHERE.NuLl__\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"K\"\"\"\n    var arg31 : List<String> = mutableListOf(\"\"\"Ta\"\"\", \"\"\"TAR\"\"\", \"\"\"t234An\"\"\", \"\"\"cosSo\"\"\")\n    var x3 : String = strongestExtension(arg30, arg31);\n    var v3 : String = \"\"\"K.TAR\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"__HAHA\"\"\"\n    var arg41 : List<String> = mutableListOf(\"\"\"Tab\"\"\", \"\"\"123\"\"\", \"\"\"781345\"\"\", \"\"\"-_-\"\"\")\n    var x4 : String = strongestExtension(arg40, arg41);\n    var v4 : String = \"\"\"__HAHA.123\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"YameRore\"\"\"\n    var arg51 : List<String> = mutableListOf(\"\"\"HhAas\"\"\", \"\"\"okIWILL123\"\"\", \"\"\"WorkOut\"\"\", \"\"\"Fails\"\"\", \"\"\"-_-\"\"\")\n    var x5 : String = strongestExtension(arg50, arg51);\n    var v5 : String = \"\"\"YameRore.okIWILL123\"\"\";\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"finNNalLLly\"\"\"\n    var arg61 : List<String> = mutableListOf(\"\"\"Die\"\"\", \"\"\"NowW\"\"\", \"\"\"Wow\"\"\", \"\"\"WoW\"\"\")\n    var x6 : String = strongestExtension(arg60, arg61);\n    var v6 : String = \"\"\"finNNalLLly.WoW\"\"\";\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"_\"\"\"\n    var arg71 : List<String> = mutableListOf(\"\"\"Bb\"\"\", \"\"\"91245\"\"\")\n    var x7 : String = strongestExtension(arg70, arg71);\n    var v7 : String = \"\"\"_.Bb\"\"\";\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : String = \"\"\"Sp\"\"\"\n    var arg81 : List<String> = mutableListOf(\"\"\"671235\"\"\", \"\"\"Bb\"\"\")\n    var x8 : String = strongestExtension(arg80, arg81);\n    var v8 : String = \"\"\"Sp.671235\"\"\";\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n\n}\n", "description": "You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'", "language": "kotlin", "canonical_solution": "\n    var maxStrength = Int.MIN_VALUE\n    var strongestExtension = \"\"\n    for (extension in extensions) {\n        val cap = extension.count { it.isUpperCase() }\n        val sm = extension.count { it.isLowerCase() }\n        val strength = cap - sm\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n    return \"$className.$strongestExtension\"\n}\n", "code_without_comments": "fun strongestExtension(className : String, extensions : List<String>) : String {\n    var maxStrength = Int.MIN_VALUE\n    var strongestExtension = \"\"\n    for (extension in extensions) {\n        val cap = extension.count { it.isUpperCase() }\n        val sm = extension.count { it.isLowerCase() }\n        val strength = cap - sm\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n    return \"$className.$strongestExtension\"\n}"}
{"task_id": "HumanEval_kotlin/154", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n * cycpattern_check(\"abcd\",\"abd\") => False\n * cycpattern_check(\"hello\",\"ell\") => True\n * cycpattern_check(\"whassup\",\"psus\") => False\n * cycpattern_check(\"abab\",\"baa\") => True\n * cycpattern_check(\"efef\",\"eeff\") => False\n * cycpattern_check(\"himenss\",\"simen\") => True\n\n *\n */\nfun cycpatternCheck(a : String, b : String) : Boolean {\n", "entry_point": "cycpatternCheck", "test": "\nfun main() {\n    var arg00 : String = \"\"\"xyzw\"\"\"\n    var arg01 : String = \"\"\"xyw\"\"\"\n    var x0 : Boolean = cycpatternCheck(arg00, arg01);\n    var v0 : Boolean = false;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"yello\"\"\"\n    var arg11 : String = \"\"\"ell\"\"\"\n    var x1 : Boolean = cycpatternCheck(arg10, arg11);\n    var v1 : Boolean = true;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"whattup\"\"\"\n    var arg21 : String = \"\"\"ptut\"\"\"\n    var x2 : Boolean = cycpatternCheck(arg20, arg21);\n    var v2 : Boolean = false;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"efef\"\"\"\n    var arg31 : String = \"\"\"fee\"\"\"\n    var x3 : Boolean = cycpatternCheck(arg30, arg31);\n    var v3 : Boolean = true;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"abab\"\"\"\n    var arg41 : String = \"\"\"aabb\"\"\"\n    var x4 : Boolean = cycpatternCheck(arg40, arg41);\n    var v4 : Boolean = false;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"winemtt\"\"\"\n    var arg51 : String = \"\"\"tinem\"\"\"\n    var x5 : Boolean = cycpatternCheck(arg50, arg51);\n    var v5 : Boolean = true;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n\n}\n", "description": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True", "language": "kotlin", "canonical_solution": "\n    val l = b.length\n    val pat = b + b\n    for (i in 0..a.length - l) {\n        for (j in 0..l) {\n            if (a.substring(i, i + l) == pat.substring(j, j + l)) {\n                return true\n            }\n        }\n    }\n    return false\n}\n", "code_without_comments": "fun cycpatternCheck(a : String, b : String) : Boolean {\n    val l = b.length\n    val pat = b + b\n    for (i in 0..a.length - l) {\n        for (j in 0..l) {\n            if (a.substring(i, i + l) == pat.substring(j, j + l)) {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/155", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n *  Example:\n *     even_odd_count(-12) ==> (1, 1)\n *     even_odd_count(123) ==> (1, 2)\n *\n */\nfun evenOddCount(num : Int) : List<Int> {\n", "entry_point": "evenOddCount", "test": "\nfun main() {\n    var arg00 : Int = 7\n    var x0 : List<Int> = evenOddCount(arg00);\n    var v0 : List<Int> = mutableListOf(0, 1);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = -78\n    var x1 : List<Int> = evenOddCount(arg10);\n    var v1 : List<Int> = mutableListOf(1, 1);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 3452\n    var x2 : List<Int> = evenOddCount(arg20);\n    var v2 : List<Int> = mutableListOf(2, 2);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 346211\n    var x3 : List<Int> = evenOddCount(arg30);\n    var v3 : List<Int> = mutableListOf(3, 3);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = -345821\n    var x4 : List<Int> = evenOddCount(arg40);\n    var v4 : List<Int> = mutableListOf(3, 3);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Int = -2\n    var x5 : List<Int> = evenOddCount(arg50);\n    var v5 : List<Int> = mutableListOf(1, 0);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Int = -45347\n    var x6 : List<Int> = evenOddCount(arg60);\n    var v6 : List<Int> = mutableListOf(2, 3);\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : Int = 0\n    var x7 : List<Int> = evenOddCount(arg70);\n    var v7 : List<Int> = mutableListOf(1, 0);\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)", "language": "kotlin", "canonical_solution": "\n    var even_count = 0\n    var odd_count = 0\n    for (i in num.toString().filter { it != '-' }) {\n        if (i.toString().toInt() % 2 == 0) {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return listOf(even_count, odd_count)\n}\n", "code_without_comments": "fun evenOddCount(num : Int) : List<Int> {\n    var even_count = 0\n    var odd_count = 0\n    for (i in num.toString().filter { it != '-' }) {\n        if (i.toString().toInt() % 2 == 0) {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return listOf(even_count, odd_count)\n}"}
{"task_id": "HumanEval_kotlin/3", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n * at that point function should return True. Otherwise it should return False.\n * >>> below_zero([1, 2, 3])\n * False\n * >>> below_zero([1, 2, -4, 5])\n * True\n *\n */\nfun belowZero(operations : List<Any>) : Boolean {\n", "entry_point": "belowZero", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var x0 : Boolean = belowZero(arg00);\n    var v0 : Boolean = false;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(1, 2, -3, 1, 2, -3)\n    var x1 : Boolean = belowZero(arg10);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(1, 2, -4, 5, 6)\n    var x2 : Boolean = belowZero(arg20);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(1, -1, 2, -2, 5, -5, 4, -4)\n    var x3 : Boolean = belowZero(arg30);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(1, -1, 2, -2, 5, -5, 4, -5)\n    var x4 : Boolean = belowZero(arg40);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf(1, -2, 2, -2, 5, -5, 4, -4)\n    var x5 : Boolean = belowZero(arg50);\n    var v5 : Boolean = true;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n\n}\n", "description": "You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True", "language": "kotlin", "canonical_solution": "\n    var balance = 0\n    for (op in operations) {\n        balance += op as Int\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n", "code_without_comments": "fun belowZero(operations : List<Any>) : Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op as Int\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/8", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n * Empty sum should be equal to 0 and empty product should be equal to 1.\n * >>> sum_product([])\n * (0, 1)\n * >>> sum_product([1, 2, 3, 4])\n * (10, 24)\n *\n */\nfun sumProduct(numbers : List<Any>) : List<Int> {\n", "entry_point": "sumProduct", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var x0 : List<Int> = sumProduct(arg00);\n    var v0 : List<Int> = mutableListOf(0, 1);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(1, 1, 1)\n    var x1 : List<Int> = sumProduct(arg10);\n    var v1 : List<Int> = mutableListOf(3, 1);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(100, 0)\n    var x2 : List<Int> = sumProduct(arg20);\n    var v2 : List<Int> = mutableListOf(100, 0);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(3, 5, 7)\n    var x3 : List<Int> = sumProduct(arg30);\n    var v3 : List<Int> = mutableListOf(15, 105);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(10)\n    var x4 : List<Int> = sumProduct(arg40);\n    var v4 : List<Int> = mutableListOf(10, 10);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)", "language": "kotlin", "canonical_solution": "\n    var sumValue = 0\n    var prodValue = 1\n    for (obj in numbers) {\n        if (obj is Int) {\n            val n = obj\n            sumValue += n\n            prodValue *= n\n        }\n    }\n    return listOf(sumValue, prodValue)\n}\n", "code_without_comments": "fun sumProduct(numbers : List<Any>) : List<Int> {\n    var sumValue = 0\n    var prodValue = 1\n    for (obj in numbers) {\n        if (obj is Int) {\n            val n = obj\n            sumValue += n\n            prodValue *= n\n        }\n    }\n    return listOf(sumValue, prodValue)\n}"}
{"task_id": "HumanEval_kotlin/9", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * From a given list of integers, generate a list of rolling maximum element found until given moment\n * in the sequence.\n * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n * [1, 2, 3, 3, 3, 4, 4]\n *\n */\nfun rollingMax(numbers : List<Any>) : List<Any> {\n", "entry_point": "rollingMax", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var x0 : List<Any> = rollingMax(arg00);\n    var v0 : List<Any> = mutableListOf();\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(1, 2, 3, 4)\n    var x1 : List<Any> = rollingMax(arg10);\n    var v1 : List<Any> = mutableListOf(1, 2, 3, 4);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(4, 3, 2, 1)\n    var x2 : List<Any> = rollingMax(arg20);\n    var v2 : List<Any> = mutableListOf(4, 4, 4, 4);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(3, 2, 3, 100, 3)\n    var x3 : List<Any> = rollingMax(arg30);\n    var v3 : List<Any> = mutableListOf(3, 3, 3, 100, 100);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]", "language": "kotlin", "canonical_solution": "\n    val result = mutableListOf<Any>()\n    if (numbers.isEmpty()) {\n        return result\n    }\n    var max = numbers[0] as Int\n    for (num in numbers) {\n        val current = num as Int\n        max = maxOf(max, current)\n        result.add(max)\n    }\n    return result\n}\n", "code_without_comments": "fun rollingMax(numbers : List<Any>) : List<Any> {\n    val result = mutableListOf<Any>()\n    if (numbers.isEmpty()) {\n        return result\n    }\n    var max = numbers[0] as Int\n    for (num in numbers) {\n        val current = num as Int\n        max = maxOf(max, current)\n        result.add(max)\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/12", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Out of list of strings, return the longest one. Return the first one in case of multiple\n * strings of the same length. Return  in case the input list is empty.\n * >>> longest([])\n\n * >>> longest(['a', 'b', 'c'])\n * 'a'\n * >>> longest(['a', 'bb', 'ccc'])\n * 'ccc'\n *\n */\nfun longest(strings : List<Any>) : String? {\n", "entry_point": "longest", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var x0 : String? = longest(arg00);\n    var v0 : String? = null;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(\"\"\"x\"\"\", \"\"\"y\"\"\", \"\"\"z\"\"\")\n    var x1 : String? = longest(arg10);\n    var v1 : String? = \"\"\"x\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(\"\"\"x\"\"\", \"\"\"yyy\"\"\", \"\"\"zzzz\"\"\", \"\"\"www\"\"\", \"\"\"kkkk\"\"\", \"\"\"abc\"\"\")\n    var x2 : String? = longest(arg20);\n    var v2 : String? = \"\"\"zzzz\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return  in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'", "language": "kotlin", "canonical_solution": "\n    var longest: String? = null\n    var maxLength = 0\n    for (obj in strings) {\n        val str = obj as String\n        if (str.length > maxLength) {\n            maxLength = str.length\n            longest = str\n        }\n    }\n    return longest\n}\n", "code_without_comments": "fun longest(strings : List<Any>) : String? {\n    var longest: String? = null\n    var maxLength = 0\n    for (obj in strings) {\n        val str = obj as String\n        if (str.length > maxLength) {\n            maxLength = str.length\n            longest = str\n        }\n    }\n    return longest\n}"}
{"task_id": "HumanEval_kotlin/17", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Input to this function is a string representing musical notes in a special ASCII format.\n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n\n * Here is a legend:\n * 'o' - whole note, lasts four beats\n * 'o|' - half note, lasts two beats\n * '.|' - quater note, lasts one beat\n\n * >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n *\n */\nfun parseMusic(musicString : String) : List<Any> {\n", "entry_point": "parseMusic", "test": "\nfun main() {\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : List<Any> = parseMusic(arg00);\n    var v0 : List<Any> = mutableListOf();\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"o o o o\"\"\"\n    var x1 : List<Any> = parseMusic(arg10);\n    var v1 : List<Any> = mutableListOf(4, 4, 4, 4);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\".| .| .| .|\"\"\"\n    var x2 : List<Any> = parseMusic(arg20);\n    var v2 : List<Any> = mutableListOf(1, 1, 1, 1);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"o| o| .| .| o o o o\"\"\"\n    var x3 : List<Any> = parseMusic(arg30);\n    var v3 : List<Any> = mutableListOf(2, 2, 1, 1, 4, 4, 4, 4);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"o| .| o| .| o o| o o|\"\"\"\n    var x4 : List<Any> = parseMusic(arg40);\n    var v4 : List<Any> = mutableListOf(2, 1, 2, 1, 4, 2, 4, 2);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "language": "kotlin", "canonical_solution": "\n    val notes = musicString.split(\" \")\n    val beats = mutableListOf<Any>()\n    for (note in notes) {\n        when (note) {\n            \"o\" -> beats.add(4)\n            \"o|\" -> beats.add(2)\n            \".|\" -> beats.add(1)\n        }\n    }\n    return beats\n}\n", "code_without_comments": "fun parseMusic(musicString : String) : List<Any> {\n    val notes = musicString.split(\" \")\n    val beats = mutableListOf<Any>()\n    for (note in notes) {\n        when (note) {\n            \"o\" -> beats.add(4)\n            \"o|\" -> beats.add(2)\n            \".|\" -> beats.add(1)\n        }\n    }\n    return beats\n}"}
{"task_id": "HumanEval_kotlin/20", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n * other and return them in order (smaller number, larger number).\n * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n * (2.0, 2.2)\n * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n * (2.0, 2.0)\n *\n */\nfun findClosestElements(numbers : List<Double>) : List<Double> {\n", "entry_point": "findClosestElements", "test": "\nfun main() {\n    var arg00 : List<Double> = mutableListOf(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)\n    var x0 : List<Double> = findClosestElements(arg00);\n    var v0 : List<Double> = mutableListOf(3.9, 4.0);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Double> = mutableListOf(1.0, 2.0, 5.9, 4.0, 5.0)\n    var x1 : List<Double> = findClosestElements(arg10);\n    var v1 : List<Double> = mutableListOf(5.0, 5.9);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Double> = mutableListOf(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)\n    var x2 : List<Double> = findClosestElements(arg20);\n    var v2 : List<Double> = mutableListOf(2.0, 2.2);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Double> = mutableListOf(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)\n    var x3 : List<Double> = findClosestElements(arg30);\n    var v3 : List<Double> = mutableListOf(2.0, 2.0);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Double> = mutableListOf(1.1, 2.2, 3.1, 4.1, 5.1)\n    var x4 : List<Double> = findClosestElements(arg40);\n    var v4 : List<Double> = mutableListOf(2.2, 3.1);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)", "language": "kotlin", "canonical_solution": "\n    var closestPair: List<Double> = listOf(numbers[0], numbers[1])\n    var distance = Math.abs(numbers[1] - numbers[0])\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            val newDistance = Math.abs(numbers[i] - numbers[j])\n            if (newDistance < distance) {\n                closestPair = listOf(numbers[i], numbers[j])\n                distance = newDistance\n            }\n        }\n    }\n    return closestPair.sorted()\n}\n", "code_without_comments": "fun findClosestElements(numbers : List<Double>) : List<Double> {\n    var closestPair: List<Double> = listOf(numbers[0], numbers[1])\n    var distance = Math.abs(numbers[1] - numbers[0])\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            val newDistance = Math.abs(numbers[i] - numbers[j])\n            if (newDistance < distance) {\n                closestPair = listOf(numbers[i], numbers[j])\n                distance = newDistance\n            }\n        }\n    }\n    return closestPair.sorted()\n}"}
{"task_id": "HumanEval_kotlin/58", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return sorted unique common elements for two lists.\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n\n *\n */\nfun common(l1 : List<Int>, l2 : List<Any>) : List<Any> {\n", "entry_point": "common", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(1, 4, 3, 34, 653, 2, 5)\n    var arg01 : List<Any> = mutableListOf(5, 7, 1, 5, 9, 653, 121)\n    var x0 : List<Any> = common(arg00, arg01);\n    var v0 : List<Any> = mutableListOf(1, 5, 653);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(5, 3, 2, 8)\n    var arg11 : List<Any> = mutableListOf(3, 2)\n    var x1 : List<Any> = common(arg10, arg11);\n    var v1 : List<Any> = mutableListOf(2, 3);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(4, 3, 2, 8)\n    var arg21 : List<Any> = mutableListOf(3, 2, 4)\n    var x2 : List<Any> = common(arg20, arg21);\n    var v2 : List<Any> = mutableListOf(2, 3, 4);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(4, 3, 2, 8)\n    var arg31 : List<Any> = mutableListOf()\n    var x3 : List<Any> = common(arg30, arg31);\n    var v3 : List<Any> = mutableListOf();\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]", "language": "kotlin", "canonical_solution": "\n    val set = l2.toSet()\n    val result = l1.filter { set.contains(it) }.toSet().toList()\n    return result.sorted()\n}\n", "code_without_comments": "fun common(l1 : List<Int>, l2 : List<Any>) : List<Any> {\n    val set = l2.toSet()\n    val result = l1.filter { set.contains(it) }.toSet().toList()\n    return result.sorted()\n}"}
{"task_id": "HumanEval_kotlin/62", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * xs represent coefficients of a polynomial.\n * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n *  Return derivative of this polynomial in the same form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n *\n */\nfun derivative(xs : List<Int>) : List<Any> {\n", "entry_point": "derivative", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(3, 1, 2, 4, 5)\n    var x0 : List<Any> = derivative(arg00);\n    var v0 : List<Any> = mutableListOf(1, 4, 12, 20);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(1, 2, 3)\n    var x1 : List<Any> = derivative(arg10);\n    var v1 : List<Any> = mutableListOf(2, 6);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(3, 2, 1)\n    var x2 : List<Any> = derivative(arg20);\n    var v2 : List<Any> = mutableListOf(2, 2);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(3, 2, 1, 0, 4)\n    var x3 : List<Any> = derivative(arg30);\n    var v3 : List<Any> = mutableListOf(2, 2, 0, 16);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(1)\n    var x4 : List<Any> = derivative(arg40);\n    var v4 : List<Any> = mutableListOf();\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]", "language": "kotlin", "canonical_solution": "\n    val result = mutableListOf<Any>()\n    for (i in 1 until xs.size) {\n        result.add(i * xs[i])\n    }\n    return result\n}\n", "code_without_comments": "fun derivative(xs : List<Int>) : List<Any> {\n    val result = mutableListOf<Any>()\n    for (i in 1 until xs.size) {\n        result.add(i * xs[i])\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/68", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * \"Given an array representing a branch of a tree that has non-negative integer nodes\n * your task is to pluck one of the nodes and return it.\n * The plucked node should be the node with the smallest even value.\n * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n * The plucked node should be returned in a list, [ smalest_value, its index ],\n * If there are no even values or the given array is empty, return [].\n\n * Example 1:\n *     Input: [4,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n * Example 2:\n *     Input: [1,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n * Example 3:\n *     Input: []\n *     Output: []\n * \n * Example 4:\n *     Input: [5, 0, 3, 0, 4, 2]\n *     Output: [0, 1]\n *     Explanation: 0 is the smallest value, but  there are two zeros,\n *                  so we will choose the first zero, which has the smallest index.\n\n * Constraints:\n *     * 1 <= nodes.length <= 10000\n *     * 0 <= node.value\n *\n */\nfun pluck(arr : List<Any>) : List<Any> {\n", "entry_point": "pluck", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(4, 2, 3)\n    var x0 : List<Any> = pluck(arg00);\n    var v0 : List<Any> = mutableListOf(2, 1);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(1, 2, 3)\n    var x1 : List<Any> = pluck(arg10);\n    var v1 : List<Any> = mutableListOf(2, 1);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf()\n    var x2 : List<Any> = pluck(arg20);\n    var v2 : List<Any> = mutableListOf();\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(5, 0, 3, 0, 4, 2)\n    var x3 : List<Any> = pluck(arg30);\n    var v3 : List<Any> = mutableListOf(0, 1);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(1, 2, 3, 0, 5, 3)\n    var x4 : List<Any> = pluck(arg40);\n    var v4 : List<Any> = mutableListOf(0, 3);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf(5, 4, 8, 4, 8)\n    var x5 : List<Any> = pluck(arg50);\n    var v5 : List<Any> = mutableListOf(4, 1);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf(7, 6, 7, 1)\n    var x6 : List<Any> = pluck(arg60);\n    var v6 : List<Any> = mutableListOf(6, 1);\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Any> = mutableListOf(7, 9, 7, 1)\n    var x7 : List<Any> = pluck(arg70);\n    var v7 : List<Any> = mutableListOf();\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "\"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value", "language": "kotlin", "canonical_solution": "\n    if (arr.isEmpty()) return listOf()\n    var smallestEven = Int.MAX_VALUE\n    var index = -1\n    for (i in arr.indices) {\n        val value = arr[i] as Int\n        if (value % 2 == 0 && value <= smallestEven) {\n            if (value < smallestEven) {\n                smallestEven = value\n                index = i\n            } else if (i < index) {\n                index = i\n            }\n        }\n    }\n    if (index != -1) {\n        return listOf(smallestEven, index)\n    }\n    return listOf()\n}\n", "code_without_comments": "fun pluck(arr : List<Any>) : List<Any> {\n    if (arr.isEmpty()) return listOf()\n    var smallestEven = Int.MAX_VALUE\n    var index = -1\n    for (i in arr.indices) {\n        val value = arr[i] as Int\n        if (value % 2 == 0 && value <= smallestEven) {\n            if (value < smallestEven) {\n                smallestEven = value\n                index = i\n            } else if (i < index) {\n                index = i\n            }\n        }\n    }\n    if (index != -1) {\n        return listOf(smallestEven, index)\n    }\n    return listOf()\n}"}
{"task_id": "HumanEval_kotlin/70", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given list of integers, return list in strange order.\n * Strange sorting, is when you start with the minimum value,\n * then maximum of the remaining integers, then minimum and so on.\n\n * Examples:\n * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n * strange_sort_list([]) == []\n *\n */\nfun strangeSortList(lst : List<Any>) : List<Any> {\n", "entry_point": "strangeSortList", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(1, 2, 3, 4)\n    var x0 : List<Any> = strangeSortList(arg00);\n    var v0 : List<Any> = mutableListOf(1, 4, 2, 3);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(5, 6, 7, 8, 9)\n    var x1 : List<Any> = strangeSortList(arg10);\n    var v1 : List<Any> = mutableListOf(5, 9, 6, 8, 7);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(1, 2, 3, 4, 5)\n    var x2 : List<Any> = strangeSortList(arg20);\n    var v2 : List<Any> = mutableListOf(1, 5, 2, 4, 3);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(5, 6, 7, 8, 9, 1)\n    var x3 : List<Any> = strangeSortList(arg30);\n    var v3 : List<Any> = mutableListOf(1, 9, 5, 8, 6, 7);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(5, 5, 5, 5)\n    var x4 : List<Any> = strangeSortList(arg40);\n    var v4 : List<Any> = mutableListOf(5, 5, 5, 5);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf()\n    var x5 : List<Any> = strangeSortList(arg50);\n    var v5 : List<Any> = mutableListOf();\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf(1, 2, 3, 4, 5, 6, 7, 8)\n    var x6 : List<Any> = strangeSortList(arg60);\n    var v6 : List<Any> = mutableListOf(1, 8, 2, 7, 3, 6, 4, 5);\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Any> = mutableListOf(0, 2, 2, 2, 5, 5, -5, -5)\n    var x7 : List<Any> = strangeSortList(arg70);\n    var v7 : List<Any> = mutableListOf(-5, 5, -5, 5, 0, 2, 2, 2);\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<Any> = mutableListOf(111111)\n    var x8 : List<Any> = strangeSortList(arg80);\n    var v8 : List<Any> = mutableListOf(111111);\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n\n}\n", "description": "Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []", "language": "kotlin", "canonical_solution": "\n    val res = mutableListOf<Any>()\n    var switch = true\n    val mutableList = lst.toMutableList()\n    while (mutableList.isNotEmpty()) {\n        val value = if (switch) mutableList.minWithOrNull(Comparator { a, b -> a.toString().compareTo(b.toString()) }) else mutableList.maxWithOrNull(Comparator { a, b -> a.toString().compareTo(b.toString()) })\n        if (value != null) {\n            res.add(value)\n            mutableList.remove(value)\n        }\n        switch = !switch\n    }\n    return res\n}\n", "code_without_comments": "fun strangeSortList(lst : List<Any>) : List<Any> {\n    val res = mutableListOf<Any>()\n    var switch = true\n    val mutableList = lst.toMutableList()\n    while (mutableList.isNotEmpty()) {\n        val value = if (switch) mutableList.minWithOrNull(Comparator { a, b -> a.toString().compareTo(b.toString()) }) else mutableList.maxWithOrNull(Comparator { a, b -> a.toString().compareTo(b.toString()) })\n        if (value != null) {\n            res.add(value)\n            mutableList.remove(value)\n        }\n        switch = !switch\n    }\n    return res\n}"}
{"task_id": "HumanEval_kotlin/87", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * You are given a 2 dimensional data, as a nested lists,\n * which is similar to matrix, however, unlike matrices,\n * each row may contain a different number of columns.\n * Given lst, and integer x, find integers x in the list,\n * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n * each tuple is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also, sort coordinates of the row by columns in descending order.\n * \n * Examples:\n * get_row([\n *   [1,2,3,4,5,6],\n *   [1,2,3,4,1,6],\n *   [1,2,3,4,5,1]\n * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n * get_row([], 1) == []\n * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n *\n */\nfun getRow(lst : List<Any>, x : Int) : List<Any> {\n", "entry_point": "getRow", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var arg01 : Int = 1\n    var x0 : List<Any> = getRow(arg00, arg01);\n    var v0 : List<Any> = mutableListOf();\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(mutableListOf(1))\n    var arg11 : Int = 2\n    var x1 : List<Any> = getRow(arg10, arg11);\n    var v1 : List<Any> = mutableListOf();\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(mutableListOf(), mutableListOf(1), mutableListOf(1, 2, 3))\n    var arg21 : Int = 3\n    var x2 : List<Any> = getRow(arg20, arg21);\n    var v2 : List<Any> = mutableListOf(mutableListOf(2, 2));\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n\n}\n", "description": "You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]", "language": "kotlin", "canonical_solution": "\n    val result = mutableListOf<List<Int>>()\n    lst.forEachIndexed { i, row ->\n        row as List<Int>\n        row.forEachIndexed { j, value ->\n            if (value == x) {\n                result.add(listOf(i, j))\n            }\n        }\n    }\n    return result.sortedWith(compareBy({ it[0] }, { -it[1] }))\n}\n", "code_without_comments": "fun getRow(lst : List<Any>, x : Int) : List<Any> {\n    val result = mutableListOf<List<Int>>()\n    lst.forEachIndexed { i, row ->\n        row as List<Int>\n        row.forEachIndexed { j, value ->\n            if (value == x) {\n                result.add(listOf(i, j))\n            }\n        }\n    }\n    return result.sortedWith(compareBy({ it[0] }, { -it[1] }))\n}"}
{"task_id": "HumanEval_kotlin/88", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given an array of non-negative integers, return a copy of the given array after sorting,\n * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n * or sort it in descending order if the sum( first index value, last index value) is even.\n\n * Note:\n * * don't change the given array.\n\n * Examples:\n * * sort_array([]) => []\n * * sort_array([5]) => [5]\n * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n *\n */\nfun sortArray(array : List<Any>) : List<Any> {\n", "entry_point": "sortArray", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf()\n    var x0 : List<Any> = sortArray(arg00);\n    var v0 : List<Any> = mutableListOf();\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(5)\n    var x1 : List<Any> = sortArray(arg10);\n    var v1 : List<Any> = mutableListOf(5);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(2, 4, 3, 0, 1, 5)\n    var x2 : List<Any> = sortArray(arg20);\n    var v2 : List<Any> = mutableListOf(0, 1, 2, 3, 4, 5);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(2, 4, 3, 0, 1, 5, 6)\n    var x3 : List<Any> = sortArray(arg30);\n    var v3 : List<Any> = mutableListOf(6, 5, 4, 3, 2, 1, 0);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(2, 1)\n    var x4 : List<Any> = sortArray(arg40);\n    var v4 : List<Any> = mutableListOf(1, 2);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf(15, 42, 87, 32, 11, 0)\n    var x5 : List<Any> = sortArray(arg50);\n    var v5 : List<Any> = mutableListOf(0, 11, 15, 32, 42, 87);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf(21, 14, 23, 11)\n    var x6 : List<Any> = sortArray(arg60);\n    var v6 : List<Any> = mutableListOf(23, 21, 14, 11);\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]", "language": "kotlin", "canonical_solution": "\n    return if (array.isEmpty()) listOf() else array.toMutableList().apply {\n        val shouldReverse = (first() as Int + last() as Int) % 2 == 0\n        sortWith(compareBy { it as Int })\n        if (shouldReverse) reverse()\n    }\n}\n", "code_without_comments": "fun sortArray(array : List<Any>) : List<Any> {\n    return if (array.isEmpty()) listOf() else array.toMutableList().apply {\n        val shouldReverse = (first() as Int + last() as Int) % 2 == 0\n        sortWith(compareBy { it as Int })\n        if (shouldReverse) reverse()\n    }\n}"}
{"task_id": "HumanEval_kotlin/92", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Create a function that takes 3 numbers.\n * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n * Returns false in any other cases.\n * \n * Examples\n * any_int(5, 2, 7) ➞ True\n * \n * any_int(3, 2, 2) ➞ False\n\n * any_int(3, -2, 1) ➞ True\n * \n * any_int(3.6, -2.2, 2) ➞ False\n  \n\n * \n *\n */\nfun anyInt(x : Any, y : Any, z : Any) : Boolean {\n", "entry_point": "anyInt", "test": "\nfun main() {\n    var arg00 : Any = 2\n    var arg01 : Any = 3\n    var arg02 : Any = 1\n    var x0 : Boolean = anyInt(arg00, arg01, arg02);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Any = 2.5\n    var arg11 : Any = 2\n    var arg12 : Any = 3\n    var x1 : Boolean = anyInt(arg10, arg11, arg12);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Any = 1.5\n    var arg21 : Any = 5\n    var arg22 : Any = 3.5\n    var x2 : Boolean = anyInt(arg20, arg21, arg22);\n    var v2 : Boolean = false;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Any = 2\n    var arg31 : Any = 6\n    var arg32 : Any = 2\n    var x3 : Boolean = anyInt(arg30, arg31, arg32);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Any = 4\n    var arg41 : Any = 2\n    var arg42 : Any = 2\n    var x4 : Boolean = anyInt(arg40, arg41, arg42);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Any = 2.2\n    var arg51 : Any = 2.2\n    var arg52 : Any = 2.2\n    var x5 : Boolean = anyInt(arg50, arg51, arg52);\n    var v5 : Boolean = false;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Any = -4\n    var arg61 : Any = 6\n    var arg62 : Any = 2\n    var x6 : Boolean = anyInt(arg60, arg61, arg62);\n    var v6 : Boolean = true;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : Any = 2\n    var arg71 : Any = 1\n    var arg72 : Any = 1\n    var x7 : Boolean = anyInt(arg70, arg71, arg72);\n    var v7 : Boolean = true;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : Any = 3\n    var arg81 : Any = 4\n    var arg82 : Any = 7\n    var x8 : Boolean = anyInt(arg80, arg81, arg82);\n    var v8 : Boolean = true;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : Any = 3.0\n    var arg91 : Any = 4\n    var arg92 : Any = 7\n    var x9 : Boolean = anyInt(arg90, arg91, arg92);\n    var v9 : Boolean = false;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n\n}\n", "description": "Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False", "language": "kotlin", "canonical_solution": "\n    if (x is Int && y is Int && z is Int) {\n        return (x + y == z) || (x + z == y) || (y + z == x)\n    }\n    return false\n}\n", "code_without_comments": "fun anyInt(x : Any, y : Any, z : Any) : Boolean {\n    if (x is Int && y is Int && z is Int) {\n        return (x + y == z) || (x + z == y) || (y + z == x)\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/94", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * You are given a list of integers.\n * You need to find the largest prime value and return the sum of its digits.\n\n * Examples:\n * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n * For lst = [0,81,12,3,1,21] the output should be 3\n * For lst = [0,8,1,2,1,7] the output should be 7\n *\n */\nfun skjkasdkd(lst : List<Int>) : Int {\n", "entry_point": "skjkasdkd", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)\n    var x0 : Int = skjkasdkd(arg00);\n    var v0 : Int = 10;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)\n    var x1 : Int = skjkasdkd(arg10);\n    var v1 : Int = 25;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)\n    var x2 : Int = skjkasdkd(arg20);\n    var v2 : Int = 13;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)\n    var x3 : Int = skjkasdkd(arg30);\n    var v3 : Int = 11;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Int> = mutableListOf(0, 81, 12, 3, 1, 21)\n    var x4 : Int = skjkasdkd(arg40);\n    var v4 : Int = 3;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Int> = mutableListOf(0, 8, 1, 2, 1, 7)\n    var x5 : Int = skjkasdkd(arg50);\n    var v5 : Int = 7;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Int> = mutableListOf(8191)\n    var x6 : Int = skjkasdkd(arg60);\n    var v6 : Int = 19;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Int> = mutableListOf(8191, 123456, 127, 7)\n    var x7 : Int = skjkasdkd(arg70);\n    var v7 : Int = 19;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<Int> = mutableListOf(127, 97, 8192)\n    var x8 : Int = skjkasdkd(arg80);\n    var v8 : Int = 10;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n\n}\n", "description": "You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7", "language": "kotlin", "canonical_solution": "\n    var maxx = 0\n    for (i in lst) {\n        if (i > maxx && isPrime(i)) {\n            maxx = i\n        }\n    }\n    var sum = 0\n    for (c in maxx.toString()) {\n        sum += c - '0'\n    }\n    return sum\n}\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n", "code_without_comments": "fun skjkasdkd(lst : List<Int>) : Int {\n    var maxx = 0\n    for (i in lst) {\n        if (i > maxx && isPrime(i)) {\n            maxx = i\n        }\n    }\n    var sum = 0\n    for (c in maxx.toString()) {\n        sum += c - '0'\n    }\n    return sum\n}\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/96", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Implement a function that takes an non-negative integer and returns an array of the first n\n * integers that are prime numbers and less than n.\n * for example:\n * count_up_to(5) => [2,3]\n * count_up_to(11) => [2,3,5,7]\n * count_up_to(0) => []\n * count_up_to(20) => [2,3,5,7,11,13,17,19]\n * count_up_to(1) => []\n * count_up_to(18) => [2,3,5,7,11,13,17]\n *\n */\nfun countUpTo(n : Int) : List<Any> {\n", "entry_point": "countUpTo", "test": "\nfun main() {\n    var arg00 : Int = 5\n    var x0 : List<Any> = countUpTo(arg00);\n    var v0 : List<Any> = mutableListOf(2, 3);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 6\n    var x1 : List<Any> = countUpTo(arg10);\n    var v1 : List<Any> = mutableListOf(2, 3, 5);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 7\n    var x2 : List<Any> = countUpTo(arg20);\n    var v2 : List<Any> = mutableListOf(2, 3, 5);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 10\n    var x3 : List<Any> = countUpTo(arg30);\n    var v3 : List<Any> = mutableListOf(2, 3, 5, 7);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : Int = 0\n    var x4 : List<Any> = countUpTo(arg40);\n    var v4 : List<Any> = mutableListOf();\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : Int = 22\n    var x5 : List<Any> = countUpTo(arg50);\n    var v5 : List<Any> = mutableListOf(2, 3, 5, 7, 11, 13, 17, 19);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : Int = 1\n    var x6 : List<Any> = countUpTo(arg60);\n    var v6 : List<Any> = mutableListOf();\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : Int = 18\n    var x7 : List<Any> = countUpTo(arg70);\n    var v7 : List<Any> = mutableListOf(2, 3, 5, 7, 11, 13, 17);\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : Int = 47\n    var x8 : List<Any> = countUpTo(arg80);\n    var v8 : List<Any> = mutableListOf(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43);\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : Int = 101\n    var x9 : List<Any> = countUpTo(arg90);\n    var v9 : List<Any> = mutableListOf(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n\n}\n", "description": "Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]", "language": "kotlin", "canonical_solution": "\n    val primes = mutableListOf<Any>()\n    for (i in 2 until n) {\n        var isPrime = true\n        for (j in 2..Math.sqrt(i.toDouble()).toInt()) {\n            if (i % j == 0) {\n                isPrime = false\n                break\n            }\n        }\n        if (isPrime) {\n            primes.add(i)\n        }\n    }\n    return primes\n}\n", "code_without_comments": "fun countUpTo(n : Int) : List<Any> {\n    val primes = mutableListOf<Any>()\n    for (i in 2 until n) {\n        var isPrime = true\n        for (j in 2..Math.sqrt(i.toDouble()).toInt()) {\n            if (i % j == 0) {\n                isPrime = false\n                break\n            }\n        }\n        if (isPrime) {\n            primes.add(i)\n        }\n    }\n    return primes\n}"}
{"task_id": "HumanEval_kotlin/101", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * You will be given a string of words separated by commas or spaces. Your task is\n * to split the string into words and return an array of the words.\n * \n * For example:\n * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n *\n */\nfun wordsString(s : String) : List<Any> {\n", "entry_point": "wordsString", "test": "\nfun main() {\n    var arg00 : String = \"\"\"Hi, my name is John\"\"\"\n    var x0 : List<Any> = wordsString(arg00);\n    var v0 : List<Any> = mutableListOf(\"\"\"Hi\"\"\", \"\"\"my\"\"\", \"\"\"name\"\"\", \"\"\"is\"\"\", \"\"\"John\"\"\");\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"One, two, three, four, five, six\"\"\"\n    var x1 : List<Any> = wordsString(arg10);\n    var v1 : List<Any> = mutableListOf(\"\"\"One\"\"\", \"\"\"two\"\"\", \"\"\"three\"\"\", \"\"\"four\"\"\", \"\"\"five\"\"\", \"\"\"six\"\"\");\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"Hi, my name\"\"\"\n    var x2 : List<Any> = wordsString(arg20);\n    var v2 : List<Any> = mutableListOf(\"\"\"Hi\"\"\", \"\"\"my\"\"\", \"\"\"name\"\"\");\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"One,, two, three, four, five, six,\"\"\"\n    var x3 : List<Any> = wordsString(arg30);\n    var v3 : List<Any> = mutableListOf(\"\"\"One\"\"\", \"\"\"two\"\"\", \"\"\"three\"\"\", \"\"\"four\"\"\", \"\"\"five\"\"\", \"\"\"six\"\"\");\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"\"\"\"\n    var x4 : List<Any> = wordsString(arg40);\n    var v4 : List<Any> = mutableListOf();\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"ahmed     , gamal\"\"\"\n    var x5 : List<Any> = wordsString(arg50);\n    var v5 : List<Any> = mutableListOf(\"\"\"ahmed\"\"\", \"\"\"gamal\"\"\");\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n\n}\n", "description": "You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "language": "kotlin", "canonical_solution": "\n    val splitWords = s.split(\"[, ]+\".toRegex())\n    return splitWords.filter { it.isNotEmpty() }.map { it as Any }\n}\n", "code_without_comments": "fun wordsString(s : String) : List<Any> {\n    val splitWords = s.split(\"[, ]+\".toRegex())\n    return splitWords.filter { it.isNotEmpty() }.map { it as Any }\n}"}
{"task_id": "HumanEval_kotlin/104", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a list of positive integers x. return a sorted list of all \n * elements that hasn't any even digit.\n\n * Note: Returned list should be sorted in increasing order.\n * \n * For example:\n * >>> unique_digits([15, 33, 1422, 1])\n * [1, 15, 33]\n * >>> unique_digits([152, 323, 1422, 10])\n * []\n *\n */\nfun uniqueDigits(x : List<Int>) : List<Any> {\n", "entry_point": "uniqueDigits", "test": "\nfun main() {\n    var arg00 : List<Int> = mutableListOf(15, 33, 1422, 1)\n    var x0 : List<Any> = uniqueDigits(arg00);\n    var v0 : List<Any> = mutableListOf(1, 15, 33);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Int> = mutableListOf(152, 323, 1422, 10)\n    var x1 : List<Any> = uniqueDigits(arg10);\n    var v1 : List<Any> = mutableListOf();\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Int> = mutableListOf(12345, 2033, 111, 151)\n    var x2 : List<Any> = uniqueDigits(arg20);\n    var v2 : List<Any> = mutableListOf(111, 151);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Int> = mutableListOf(135, 103, 31)\n    var x3 : List<Any> = uniqueDigits(arg30);\n    var v3 : List<Any> = mutableListOf(31, 135);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []", "language": "kotlin", "canonical_solution": "\n    val oddDigitElements = x.filter { num ->\n        num.toString().all { char -> char.toString().toInt() % 2 != 0 }\n    }\n    return oddDigitElements.sorted() as List<Any>\n}\n", "code_without_comments": "fun uniqueDigits(x : List<Int>) : List<Any> {\n    val oddDigitElements = x.filter { num ->\n        num.toString().all { char -> char.toString().toInt() % 2 != 0 }\n    }\n    return oddDigitElements.sorted() as List<Any>\n}"}
{"task_id": "HumanEval_kotlin/105", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n * reverse the resulting array, and then replace each digit by its corresponding name from\n * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n * For example:\n *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n * \n *   If the array is empty, return an empty array:\n *   arr = []\n *   return []\n * \n *   If the array has any strange number ignore it:\n *   arr = [1, -1 , 55] \n *         -> sort arr -> [-1, 1, 55]\n *         -> reverse arr -> [55, 1, -1]\n *   return = ['One']\n *\n */\nfun byLength(arr : List<Any>) : List<Any> {\n", "entry_point": "byLength", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(2, 1, 1, 4, 5, 8, 2, 3)\n    var x0 : List<Any> = byLength(arg00);\n    var v0 : List<Any> = mutableListOf(\"\"\"Eight\"\"\", \"\"\"Five\"\"\", \"\"\"Four\"\"\", \"\"\"Three\"\"\", \"\"\"Two\"\"\", \"\"\"Two\"\"\", \"\"\"One\"\"\", \"\"\"One\"\"\");\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf()\n    var x1 : List<Any> = byLength(arg10);\n    var v1 : List<Any> = mutableListOf();\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(1, -1, 55)\n    var x2 : List<Any> = byLength(arg20);\n    var v2 : List<Any> = mutableListOf(\"\"\"One\"\"\");\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(1, -1, 3, 2)\n    var x3 : List<Any> = byLength(arg30);\n    var v3 : List<Any> = mutableListOf(\"\"\"Three\"\"\", \"\"\"Two\"\"\", \"\"\"One\"\"\");\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(9, 4, 8)\n    var x4 : List<Any> = byLength(arg40);\n    var v4 : List<Any> = mutableListOf(\"\"\"Nine\"\"\", \"\"\"Eight\"\"\", \"\"\"Four\"\"\");\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n\n}\n", "description": "Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']", "language": "kotlin", "canonical_solution": "\n    val map = mapOf(\n        1 to \"One\",\n        2 to \"Two\",\n        3 to \"Three\",\n        4 to \"Four\",\n        5 to \"Five\",\n        6 to \"Six\",\n        7 to \"Seven\",\n        8 to \"Eight\",\n        9 to \"Nine\"\n    )\n    val filteredAndSorted = arr.filterIsInstance<Int>()\n                               .filter { it in 1..9 }\n                               .sortedDescending()\n    return filteredAndSorted.map { map[it] }.filterNotNull()\n}\n", "code_without_comments": "fun byLength(arr : List<Any>) : List<Any> {\n    val map = mapOf(\n        1 to \"One\",\n        2 to \"Two\",\n        3 to \"Three\",\n        4 to \"Four\",\n        5 to \"Five\",\n        6 to \"Six\",\n        7 to \"Seven\",\n        8 to \"Eight\",\n        9 to \"Nine\"\n    )\n    val filteredAndSorted = arr.filterIsInstance<Int>()\n                               .filter { it in 1..9 }\n                               .sortedDescending()\n    return filteredAndSorted.map { map[it] }.filterNotNull()\n}"}
{"task_id": "HumanEval_kotlin/111", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a string representing a space separated lowercase letters, return a dictionary\n * of the letter with the most repetition and containing the corresponding count.\n * If several letters have the same occurrence, return all of them.\n * \n * Example:\n * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n * histogram('a b b a') == {'a': 2, 'b': 2}\n * histogram('a b c a b') == {'a': 2, 'b': 2}\n * histogram('b b b b a') == {'b': 4}\n * histogram('') == {}\n\n *\n */\nfun histogram(test : String) : Map<Any?, Any?> {\n", "entry_point": "histogram", "test": "\nfun main() {\n    var arg00 : String = \"\"\"a b b a\"\"\"\n    var x0 : Map<Any?, Any?> = histogram(arg00);\n    var v0 : Map<Any?, Any?> = mutableMapOf(\"\"\"a\"\"\" to 2, \"\"\"b\"\"\" to 2);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"a b c a b\"\"\"\n    var x1 : Map<Any?, Any?> = histogram(arg10);\n    var v1 : Map<Any?, Any?> = mutableMapOf(\"\"\"a\"\"\" to 2, \"\"\"b\"\"\" to 2);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"a b c d g\"\"\"\n    var x2 : Map<Any?, Any?> = histogram(arg20);\n    var v2 : Map<Any?, Any?> = mutableMapOf(\"\"\"a\"\"\" to 1, \"\"\"b\"\"\" to 1, \"\"\"c\"\"\" to 1, \"\"\"d\"\"\" to 1, \"\"\"g\"\"\" to 1);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"r t g\"\"\"\n    var x3 : Map<Any?, Any?> = histogram(arg30);\n    var v3 : Map<Any?, Any?> = mutableMapOf(\"\"\"r\"\"\" to 1, \"\"\"t\"\"\" to 1, \"\"\"g\"\"\" to 1);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"b b b b a\"\"\"\n    var x4 : Map<Any?, Any?> = histogram(arg40);\n    var v4 : Map<Any?, Any?> = mutableMapOf(\"\"\"b\"\"\" to 4);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"r t g\"\"\"\n    var x5 : Map<Any?, Any?> = histogram(arg50);\n    var v5 : Map<Any?, Any?> = mutableMapOf(\"\"\"r\"\"\" to 1, \"\"\"t\"\"\" to 1, \"\"\"g\"\"\" to 1);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"\"\"\"\n    var x6 : Map<Any?, Any?> = histogram(arg60);\n    var v6 : Map<Any?, Any?> = mutableMapOf();\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"a\"\"\"\n    var x7 : Map<Any?, Any?> = histogram(arg70);\n    var v7 : Map<Any?, Any?> = mutableMapOf(\"\"\"a\"\"\" to 1);\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}", "language": "kotlin", "canonical_solution": "\n    val dict1 = mutableMapOf<String, Int>()\n    val list1 = test.split(\" \").filter { it.isNotEmpty() }\n    val counts = list1.groupingBy { it }.eachCount()\n    val maxCount = counts.values.maxOrNull() ?: 0\n    counts.forEach { (letter, count) ->\n        if (count == maxCount) {\n            dict1[letter] = count\n        }\n    }\n    return dict1.toMap()\n}\n", "code_without_comments": "fun histogram(test : String) : Map<Any?, Any?> {\n    val dict1 = mutableMapOf<String, Int>()\n    val list1 = test.split(\" \").filter { it.isNotEmpty() }\n    val counts = list1.groupingBy { it }.eachCount()\n    val maxCount = counts.values.maxOrNull() ?: 0\n    counts.forEach { (letter, count) ->\n        if (count == maxCount) {\n            dict1[letter] = count\n        }\n    }\n    return dict1.toMap()\n}"}
{"task_id": "HumanEval_kotlin/117", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a string s and a natural number n, you have been tasked to implement \n * a function that returns a list of all words from string s that contain exactly \n * n consonants, in order these words appear in the string s.\n * If the string s is empty then the function should return an empty list.\n * Note: you may assume the input string contains only letters and spaces.\n * Examples:\n * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n * select_words(\"simple white space\", 2) ==> []\n * select_words(\"Hello world\", 4) ==> [\"world\"]\n * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n *\n */\nfun selectWords(s : String, n : Int) : List<Any> {\n", "entry_point": "selectWords", "test": "\nfun main() {\n    var arg00 : String = \"\"\"Mary had a little lamb\"\"\"\n    var arg01 : Int = 4\n    var x0 : List<Any> = selectWords(arg00, arg01);\n    var v0 : List<Any> = mutableListOf(\"\"\"little\"\"\");\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"Mary had a little lamb\"\"\"\n    var arg11 : Int = 3\n    var x1 : List<Any> = selectWords(arg10, arg11);\n    var v1 : List<Any> = mutableListOf(\"\"\"Mary\"\"\", \"\"\"lamb\"\"\");\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"simple white space\"\"\"\n    var arg21 : Int = 2\n    var x2 : List<Any> = selectWords(arg20, arg21);\n    var v2 : List<Any> = mutableListOf();\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"Hello world\"\"\"\n    var arg31 : Int = 4\n    var x3 : List<Any> = selectWords(arg30, arg31);\n    var v3 : List<Any> = mutableListOf(\"\"\"world\"\"\");\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"Uncle sam\"\"\"\n    var arg41 : Int = 3\n    var x4 : List<Any> = selectWords(arg40, arg41);\n    var v4 : List<Any> = mutableListOf(\"\"\"Uncle\"\"\");\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"\"\"\"\n    var arg51 : Int = 4\n    var x5 : List<Any> = selectWords(arg50, arg51);\n    var v5 : List<Any> = mutableListOf();\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"a b c d e f\"\"\"\n    var arg61 : Int = 1\n    var x6 : List<Any> = selectWords(arg60, arg61);\n    var v6 : List<Any> = mutableListOf(\"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"d\"\"\", \"\"\"f\"\"\");\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]", "language": "kotlin", "canonical_solution": "\n    val result = mutableListOf<Any>()\n    val words = s.split(\"\\\\s+\".toRegex())\n    for (word in words) {\n        val nConsonants = word.lowercase().count { it !in \"aeiou\" }\n        if (nConsonants == n) {\n            result.add(word)\n        }\n    }\n    return result\n}\n", "code_without_comments": "fun selectWords(s : String, n : Int) : List<Any> {\n    val result = mutableListOf<Any>()\n    val words = s.split(\"\\\\s+\".toRegex())\n    for (word in words) {\n        val nConsonants = word.lowercase().count { it !in \"aeiou\" }\n        if (nConsonants == n) {\n            result.add(word)\n        }\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/125", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n * Examples\n * split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n * split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n * split_words(\"abcdef\") == 3 \n *\n */\nfun splitWords(txt : String) : Any {\n", "entry_point": "splitWords", "test": "\nfun main() {\n    var arg00 : String = \"\"\"Hello world!\"\"\"\n    var x0 : Any = splitWords(arg00);\n    var v0 : Any = mutableListOf(\"\"\"Hello\"\"\", \"\"\"world!\"\"\");\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"Hello,world!\"\"\"\n    var x1 : Any = splitWords(arg10);\n    var v1 : Any = mutableListOf(\"\"\"Hello\"\"\", \"\"\"world!\"\"\");\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"Hello world,!\"\"\"\n    var x2 : Any = splitWords(arg20);\n    var v2 : Any = mutableListOf(\"\"\"Hello\"\"\", \"\"\"world,!\"\"\");\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"Hello,Hello,world !\"\"\"\n    var x3 : Any = splitWords(arg30);\n    var v3 : Any = mutableListOf(\"\"\"Hello,Hello,world\"\"\", \"\"\"!\"\"\");\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"abcdef\"\"\"\n    var x4 : Any = splitWords(arg40);\n    var v4 : Any = 3;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"aaabb\"\"\"\n    var x5 : Any = splitWords(arg50);\n    var v5 : Any = 2;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"aaaBb\"\"\"\n    var x6 : Any = splitWords(arg60);\n    var v6 : Any = 1;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"\"\"\"\n    var x7 : Any = splitWords(arg70);\n    var v7 : Any = 0;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n\n}\n", "description": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3", "language": "kotlin", "canonical_solution": "\n    if (\" \" in txt) {\n        return txt.split(\" \")\n    } else if (\",\" in txt) {\n        return txt.split(\",\")\n    } else {\n        return txt.count { it.isLowerCase() && (it - 'a') % 2 == 1 }\n    }\n}\n", "code_without_comments": "fun splitWords(txt : String) : Any {\n    if (\" \" in txt) {\n        return txt.split(\" \")\n    } else if (\",\" in txt) {\n        return txt.split(\",\")\n    } else {\n        return txt.count { it.isLowerCase() && (it - 'a') % 2 == 1 }\n    }\n}"}
{"task_id": "HumanEval_kotlin/126", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a list of numbers, return whether or not they are sorted\n * in ascending order. If list has more than 1 duplicate of the same\n * number, return False. Assume no negative numbers and only integers.\n\n * Examples\n * is_sorted([5]) ➞ True\n * is_sorted([1, 2, 3, 4, 5]) ➞ True\n * is_sorted([1, 3, 2, 4, 5]) ➞ False\n * is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n * is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n * is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n * is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n * is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n *\n */\nfun isSorted(lst : List<Any>) : Boolean {\n", "entry_point": "isSorted", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(5)\n    var x0 : Boolean = isSorted(arg00);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(1, 2, 3, 4, 5)\n    var x1 : Boolean = isSorted(arg10);\n    var v1 : Boolean = true;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(1, 3, 2, 4, 5)\n    var x2 : Boolean = isSorted(arg20);\n    var v2 : Boolean = false;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(1, 2, 3, 4, 5, 6)\n    var x3 : Boolean = isSorted(arg30);\n    var v3 : Boolean = true;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(1, 2, 3, 4, 5, 6, 7)\n    var x4 : Boolean = isSorted(arg40);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf(1, 3, 2, 4, 5, 6, 7)\n    var x5 : Boolean = isSorted(arg50);\n    var v5 : Boolean = false;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf()\n    var x6 : Boolean = isSorted(arg60);\n    var v6 : Boolean = true;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Any> = mutableListOf(1)\n    var x7 : Boolean = isSorted(arg70);\n    var v7 : Boolean = true;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<Any> = mutableListOf(3, 2, 1)\n    var x8 : Boolean = isSorted(arg80);\n    var v8 : Boolean = false;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : List<Any> = mutableListOf(1, 2, 2, 2, 3, 4)\n    var x9 : Boolean = isSorted(arg90);\n    var v9 : Boolean = false;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : List<Any> = mutableListOf(1, 2, 3, 3, 3, 4)\n    var x10 : Boolean = isSorted(arg100);\n    var v10 : Boolean = false;\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n    var arg110 : List<Any> = mutableListOf(1, 2, 2, 3, 3, 4)\n    var x11 : Boolean = isSorted(arg110);\n    var v11 : Boolean = true;\n    if (x11 != v11) {\n        throw Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11)\n    }\n\n    var arg120 : List<Any> = mutableListOf(1, 2, 3, 4)\n    var x12 : Boolean = isSorted(arg120);\n    var v12 : Boolean = true;\n    if (x12 != v12) {\n        throw Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12)\n    }\n\n\n}\n", "description": "Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False", "language": "kotlin", "canonical_solution": "\n    val countDigit = mutableMapOf<Int, Int>()\n    for (i in 1 until lst.size) {\n        val current = lst[i] as Int\n        val previous = lst[i - 1] as Int\n        if (current < previous) return false\n        countDigit[current] = countDigit.getOrDefault(current, 0) + 1\n        if (countDigit[current]!! > 2) return false\n    }\n    return true\n}\n", "code_without_comments": "fun isSorted(lst : List<Any>) : Boolean {\n    val countDigit = mutableMapOf<Int, Int>()\n    for (i in 1 until lst.size) {\n        val current = lst[i] as Int\n        val previous = lst[i - 1] as Int\n        if (current < previous) return false\n        countDigit[current] = countDigit.getOrDefault(current, 0) + 1\n        if (countDigit[current]!! > 2) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/129", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n * each cell of the grid contains a value. Every integer in the range [1, N * N]\n * inclusive appears exactly once on the cells of the grid.\n\n * You have to find the minimum path of length k in the grid. You can start\n * from any cell, and in each step you can move to any of the neighbor cells,\n * in other words, you can go to cells which share an edge with you current\n * cell.\n * Please note that a path of length k means visiting exactly k cells (not\n * necessarily distinct).\n * You CANNOT go off the grid.\n * A path A (of length k) is considered less than a path B (of length k) if\n * after making the ordered lists of the values on the cells that A and B go\n * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n * lst_A[j] = lst_B[j].\n * It is guaranteed that the answer is unique.\n * Return an ordered list of the values on the cells that the minimum path go through.\n\n * Examples:\n\n *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n *     Output: [1, 2, 1]\n\n *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n *     Output: [1]\n *\n */\nfun minpath(grid : List<List<Int>>, k : Int) : List<Int> {\n", "entry_point": "minpath", "test": "\nfun main() {\n    var arg00 : List<List<Int>> = mutableListOf(mutableListOf(1, 2, 3), mutableListOf(4, 5, 6), mutableListOf(7, 8, 9))\n    var arg01 : Int = 3\n    var x0 : List<Int> = minpath(arg00, arg01);\n    var v0 : List<Int> = mutableListOf(1, 2, 1);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<List<Int>> = mutableListOf(mutableListOf(5, 9, 3), mutableListOf(4, 1, 6), mutableListOf(7, 8, 2))\n    var arg11 : Int = 1\n    var x1 : List<Int> = minpath(arg10, arg11);\n    var v1 : List<Int> = mutableListOf(1);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<List<Int>> = mutableListOf(mutableListOf(1, 2, 3, 4), mutableListOf(5, 6, 7, 8), mutableListOf(9, 10, 11, 12), mutableListOf(13, 14, 15, 16))\n    var arg21 : Int = 4\n    var x2 : List<Int> = minpath(arg20, arg21);\n    var v2 : List<Int> = mutableListOf(1, 2, 1, 2);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<List<Int>> = mutableListOf(mutableListOf(6, 4, 13, 10), mutableListOf(5, 7, 12, 1), mutableListOf(3, 16, 11, 15), mutableListOf(8, 14, 9, 2))\n    var arg31 : Int = 7\n    var x3 : List<Int> = minpath(arg30, arg31);\n    var v3 : List<Int> = mutableListOf(1, 10, 1, 10, 1, 10, 1);\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<List<Int>> = mutableListOf(mutableListOf(8, 14, 9, 2), mutableListOf(6, 4, 13, 15), mutableListOf(5, 7, 1, 12), mutableListOf(3, 10, 11, 16))\n    var arg41 : Int = 5\n    var x4 : List<Int> = minpath(arg40, arg41);\n    var v4 : List<Int> = mutableListOf(1, 7, 1, 7, 1);\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<List<Int>> = mutableListOf(mutableListOf(11, 8, 7, 2), mutableListOf(5, 16, 14, 4), mutableListOf(9, 3, 15, 6), mutableListOf(12, 13, 10, 1))\n    var arg51 : Int = 9\n    var x5 : List<Int> = minpath(arg50, arg51);\n    var v5 : List<Int> = mutableListOf(1, 6, 1, 6, 1, 6, 1, 6, 1);\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<List<Int>> = mutableListOf(mutableListOf(12, 13, 10, 1), mutableListOf(9, 3, 15, 6), mutableListOf(5, 16, 14, 4), mutableListOf(11, 8, 7, 2))\n    var arg61 : Int = 12\n    var x6 : List<Int> = minpath(arg60, arg61);\n    var v6 : List<Int> = mutableListOf(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6);\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<List<Int>> = mutableListOf(mutableListOf(2, 7, 4), mutableListOf(3, 1, 5), mutableListOf(6, 8, 9))\n    var arg71 : Int = 8\n    var x7 : List<Int> = minpath(arg70, arg71);\n    var v7 : List<Int> = mutableListOf(1, 3, 1, 3, 1, 3, 1, 3);\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<List<Int>> = mutableListOf(mutableListOf(6, 1, 5), mutableListOf(3, 8, 9), mutableListOf(2, 7, 4))\n    var arg81 : Int = 8\n    var x8 : List<Int> = minpath(arg80, arg81);\n    var v8 : List<Int> = mutableListOf(1, 5, 1, 5, 1, 5, 1, 5);\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : List<List<Int>> = mutableListOf(mutableListOf(1, 2), mutableListOf(3, 4))\n    var arg91 : Int = 10\n    var x9 : List<Int> = minpath(arg90, arg91);\n    var v9 : List<Int> = mutableListOf(1, 2, 1, 2, 1, 2, 1, 2, 1, 2);\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : List<List<Int>> = mutableListOf(mutableListOf(1, 3), mutableListOf(3, 2))\n    var arg101 : Int = 10\n    var x10 : List<Int> = minpath(arg100, arg101);\n    var v10 : List<Int> = mutableListOf(1, 3, 1, 3, 1, 3, 1, 3, 1, 3);\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n\n}\n", "description": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]", "language": "kotlin", "canonical_solution": "\n    val n = grid.size\n    var valMin = n * n + 1\n    var startX = 0\n    var startY = 0\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                startX = i\n                startY = j\n                break\n            }\n        }\n    }\n    val directions = listOf(Pair(0, 1), Pair(1, 0), Pair(0, -1), Pair(-1, 0))\n    val ans = mutableListOf<Int>()\n    ans.add(grid[startX][startY])\n    var currentX = startX\n    var currentY = startY\n    for (i in 1 until k) {\n        var minNeighbor = n * n + 1\n        var nextX = currentX\n        var nextY = currentY\n        for (dir in directions) {\n            val newX = currentX + dir.first\n            val newY = currentY + dir.second\n            if (newX in 0 until n && newY in 0 until n) {\n                if (grid[newX][newY] < minNeighbor) {\n                    minNeighbor = grid[newX][newY]\n                    nextX = newX\n                    nextY = newY\n                }\n            }\n        }\n        ans.add(minNeighbor)\n        currentX = nextX\n        currentY = nextY\n    }\n    return ans\n}\n", "code_without_comments": "fun minpath(grid : List<List<Int>>, k : Int) : List<Int> {\n    val n = grid.size\n    var valMin = n * n + 1\n    var startX = 0\n    var startY = 0\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                startX = i\n                startY = j\n                break\n            }\n        }\n    }\n    val directions = listOf(Pair(0, 1), Pair(1, 0), Pair(0, -1), Pair(-1, 0))\n    val ans = mutableListOf<Int>()\n    ans.add(grid[startX][startY])\n    var currentX = startX\n    var currentY = startY\n    for (i in 1 until k) {\n        var minNeighbor = n * n + 1\n        var nextX = currentX\n        var nextY = currentY\n        for (dir in directions) {\n            val newX = currentX + dir.first\n            val newY = currentY + dir.second\n            if (newX in 0 until n && newY in 0 until n) {\n                if (grid[newX][newY] < minNeighbor) {\n                    minNeighbor = grid[newX][newY]\n                    nextX = newX\n                    nextY = newY\n                }\n            }\n        }\n        ans.add(minNeighbor)\n        currentX = nextX\n        currentY = nextY\n    }\n    return ans\n}"}
{"task_id": "HumanEval_kotlin/133", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * You are given a list of numbers.\n * You need to return the sum of squared numbers in the given list,\n * round each element in the list to the upper int(Ceiling) first.\n * Examples:\n * For lst = [1,2,3] the output should be 14\n * For lst = [1,4,9] the output should be 98\n * For lst = [1,3,5,7] the output should be 84\n * For lst = [1.4,4.2,0] the output should be 29\n * For lst = [-2.4,1,1] the output should be 6\n * \n\n *\n */\nfun sumSquares(lst : List<Any>) : Int {\n", "entry_point": "sumSquares", "test": "\nfun main() {\n    var arg00 : List<Any> = mutableListOf(1, 2, 3)\n    var x0 : Int = sumSquares(arg00);\n    var v0 : Int = 14;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<Any> = mutableListOf(1.0, 2, 3)\n    var x1 : Int = sumSquares(arg10);\n    var v1 : Int = 14;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<Any> = mutableListOf(1, 3, 5, 7)\n    var x2 : Int = sumSquares(arg20);\n    var v2 : Int = 84;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<Any> = mutableListOf(1.4, 4.2, 0)\n    var x3 : Int = sumSquares(arg30);\n    var v3 : Int = 29;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<Any> = mutableListOf(-2.4, 1, 1)\n    var x4 : Int = sumSquares(arg40);\n    var v4 : Int = 6;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<Any> = mutableListOf(100, 1, 15, 2)\n    var x5 : Int = sumSquares(arg50);\n    var v5 : Int = 10230;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<Any> = mutableListOf(10000, 10000)\n    var x6 : Int = sumSquares(arg60);\n    var v6 : Int = 200000000;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<Any> = mutableListOf(-1.4, 4.6, 6.3)\n    var x7 : Int = sumSquares(arg70);\n    var v7 : Int = 75;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<Any> = mutableListOf(-1.4, 17.9, 18.9, 19.9)\n    var x8 : Int = sumSquares(arg80);\n    var v8 : Int = 1086;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : List<Any> = mutableListOf(0)\n    var x9 : Int = sumSquares(arg90);\n    var v9 : Int = 0;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : List<Any> = mutableListOf(-1)\n    var x10 : Int = sumSquares(arg100);\n    var v10 : Int = 1;\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n    var arg110 : List<Any> = mutableListOf(-1, 1, 0)\n    var x11 : Int = sumSquares(arg110);\n    var v11 : Int = 2;\n    if (x11 != v11) {\n        throw Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11)\n    }\n\n\n}\n", "description": "You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6", "language": "kotlin", "canonical_solution": "\n    var squared = 0\n    for (num in lst) {\n        if (num is Number) {\n            squared += Math.pow(Math.ceil(num.toDouble()), 2.0).toInt()\n        }\n    }\n    return squared\n}\n", "code_without_comments": "fun sumSquares(lst : List<Any>) : Int {\n    var squared = 0\n    for (num in lst) {\n        if (num is Number) {\n            squared += Math.pow(Math.ceil(num.toDouble()), 2.0).toInt()\n        }\n    }\n    return squared\n}"}
{"task_id": "HumanEval_kotlin/141", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Create a function which takes a string representing a file's name, and returns\n * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n * A file's name is considered to be valid if and only if all the following conditions \n * are met:\n * - There should not be more than three digits ('0'-'9') in the file's name.\n * - The file's name contains exactly one dot '.'\n * - The substring before the dot should not be empty, and it starts with a letter from \n * the latin alphapet ('a'-'z' and 'A'-'Z').\n * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n * Examples:\n * file_name_check(\"example.txt\") # => 'Yes'\n * file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n *\n */\nfun fileNameCheck(fileName : String) : String {\n", "entry_point": "fileNameCheck", "test": "\nfun main() {\n    var arg00 : String = \"\"\"example.txt\"\"\"\n    var x0 : String = fileNameCheck(arg00);\n    var v0 : String = \"\"\"Yes\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"1example.dll\"\"\"\n    var x1 : String = fileNameCheck(arg10);\n    var v1 : String = \"\"\"No\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"s1sdf3.asd\"\"\"\n    var x2 : String = fileNameCheck(arg20);\n    var v2 : String = \"\"\"No\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"K.dll\"\"\"\n    var x3 : String = fileNameCheck(arg30);\n    var v3 : String = \"\"\"Yes\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"MY16FILE3.exe\"\"\"\n    var x4 : String = fileNameCheck(arg40);\n    var v4 : String = \"\"\"Yes\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"His12FILE94.exe\"\"\"\n    var x5 : String = fileNameCheck(arg50);\n    var v5 : String = \"\"\"No\"\"\";\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"_Y.txt\"\"\"\n    var x6 : String = fileNameCheck(arg60);\n    var v6 : String = \"\"\"No\"\"\";\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"?aREYA.exe\"\"\"\n    var x7 : String = fileNameCheck(arg70);\n    var v7 : String = \"\"\"No\"\"\";\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : String = \"\"\"/this_is_valid.dll\"\"\"\n    var x8 : String = fileNameCheck(arg80);\n    var v8 : String = \"\"\"No\"\"\";\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : String = \"\"\"this_is_valid.wow\"\"\"\n    var x9 : String = fileNameCheck(arg90);\n    var v9 : String = \"\"\"No\"\"\";\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : String = \"\"\"this_is_valid.txt\"\"\"\n    var x10 : String = fileNameCheck(arg100);\n    var v10 : String = \"\"\"Yes\"\"\";\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n    var arg110 : String = \"\"\"this_is_valid.txtexe\"\"\"\n    var x11 : String = fileNameCheck(arg110);\n    var v11 : String = \"\"\"No\"\"\";\n    if (x11 != v11) {\n        throw Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11)\n    }\n\n    var arg120 : String = \"\"\"#this2_i4s_5valid.ten\"\"\"\n    var x12 : String = fileNameCheck(arg120);\n    var v12 : String = \"\"\"No\"\"\";\n    if (x12 != v12) {\n        throw Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12)\n    }\n\n    var arg130 : String = \"\"\"@this1_is6_valid.exe\"\"\"\n    var x13 : String = fileNameCheck(arg130);\n    var v13 : String = \"\"\"No\"\"\";\n    if (x13 != v13) {\n        throw Exception(\"Exception -- test case 13 did not pass. x13 = \" + x13)\n    }\n\n    var arg140 : String = \"\"\"this_is_12valid.6exe4.txt\"\"\"\n    var x14 : String = fileNameCheck(arg140);\n    var v14 : String = \"\"\"No\"\"\";\n    if (x14 != v14) {\n        throw Exception(\"Exception -- test case 14 did not pass. x14 = \" + x14)\n    }\n\n    var arg150 : String = \"\"\"all.exe.txt\"\"\"\n    var x15 : String = fileNameCheck(arg150);\n    var v15 : String = \"\"\"No\"\"\";\n    if (x15 != v15) {\n        throw Exception(\"Exception -- test case 15 did not pass. x15 = \" + x15)\n    }\n\n    var arg160 : String = \"\"\"I563_No.exe\"\"\"\n    var x16 : String = fileNameCheck(arg160);\n    var v16 : String = \"\"\"Yes\"\"\";\n    if (x16 != v16) {\n        throw Exception(\"Exception -- test case 16 did not pass. x16 = \" + x16)\n    }\n\n    var arg170 : String = \"\"\"Is3youfault.txt\"\"\"\n    var x17 : String = fileNameCheck(arg170);\n    var v17 : String = \"\"\"Yes\"\"\";\n    if (x17 != v17) {\n        throw Exception(\"Exception -- test case 17 did not pass. x17 = \" + x17)\n    }\n\n    var arg180 : String = \"\"\"no_one#knows.dll\"\"\"\n    var x18 : String = fileNameCheck(arg180);\n    var v18 : String = \"\"\"Yes\"\"\";\n    if (x18 != v18) {\n        throw Exception(\"Exception -- test case 18 did not pass. x18 = \" + x18)\n    }\n\n    var arg190 : String = \"\"\"1I563_Yes3.exe\"\"\"\n    var x19 : String = fileNameCheck(arg190);\n    var v19 : String = \"\"\"No\"\"\";\n    if (x19 != v19) {\n        throw Exception(\"Exception -- test case 19 did not pass. x19 = \" + x19)\n    }\n\n    var arg200 : String = \"\"\"I563_Yes3.txtt\"\"\"\n    var x20 : String = fileNameCheck(arg200);\n    var v20 : String = \"\"\"No\"\"\";\n    if (x20 != v20) {\n        throw Exception(\"Exception -- test case 20 did not pass. x20 = \" + x20)\n    }\n\n    var arg210 : String = \"\"\"final..txt\"\"\"\n    var x21 : String = fileNameCheck(arg210);\n    var v21 : String = \"\"\"No\"\"\";\n    if (x21 != v21) {\n        throw Exception(\"Exception -- test case 21 did not pass. x21 = \" + x21)\n    }\n\n    var arg220 : String = \"\"\"final132\"\"\"\n    var x22 : String = fileNameCheck(arg220);\n    var v22 : String = \"\"\"No\"\"\";\n    if (x22 != v22) {\n        throw Exception(\"Exception -- test case 22 did not pass. x22 = \" + x22)\n    }\n\n    var arg230 : String = \"\"\"_f4indsartal132.\"\"\"\n    var x23 : String = fileNameCheck(arg230);\n    var v23 : String = \"\"\"No\"\"\";\n    if (x23 != v23) {\n        throw Exception(\"Exception -- test case 23 did not pass. x23 = \" + x23)\n    }\n\n    var arg240 : String = \"\"\".txt\"\"\"\n    var x24 : String = fileNameCheck(arg240);\n    var v24 : String = \"\"\"No\"\"\";\n    if (x24 != v24) {\n        throw Exception(\"Exception -- test case 24 did not pass. x24 = \" + x24)\n    }\n\n    var arg250 : String = \"\"\"s.\"\"\"\n    var x25 : String = fileNameCheck(arg250);\n    var v25 : String = \"\"\"No\"\"\";\n    if (x25 != v25) {\n        throw Exception(\"Exception -- test case 25 did not pass. x25 = \" + x25)\n    }\n\n\n}\n", "description": "Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)", "language": "kotlin", "canonical_solution": "\n    val validExtensions = listOf(\"txt\", \"exe\", \"dll\")\n    val parts = fileName.split(\".\")\n    if (parts.size != 2) return \"No\"\n    val namePart = parts[0]\n    val extensionPart = parts[1]\n    if (namePart.isEmpty() || !namePart[0].isLetter()) return \"No\"\n    if (namePart.count { it.isDigit() } > 3) return \"No\"\n    if (!validExtensions.contains(extensionPart)) return \"No\"\n    return \"Yes\"\n}\n", "code_without_comments": "fun fileNameCheck(fileName : String) : String {\n    val validExtensions = listOf(\"txt\", \"exe\", \"dll\")\n    val parts = fileName.split(\".\")\n    if (parts.size != 2) return \"No\"\n    val namePart = parts[0]\n    val extensionPart = parts[1]\n    if (namePart.isEmpty() || !namePart[0].isLetter()) return \"No\"\n    if (namePart.count { it.isDigit() } > 3) return \"No\"\n    if (!validExtensions.contains(extensionPart)) return \"No\"\n    return \"Yes\"\n}"}
{"task_id": "HumanEval_kotlin/144", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Your task is to implement a function that will simplify the expression\n * x * n. The function returns True if x * n evaluates to a whole number and False\n * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n * simplify(\"1/5\", \"5/1\") = True\n * simplify(\"1/6\", \"2/1\") = False\n * simplify(\"7/10\", \"10/2\") = False\n *\n */\nfun simplify(x : String, n : String) : Boolean {\n", "entry_point": "simplify", "test": "\nfun main() {\n    var arg00 : String = \"\"\"1/5\"\"\"\n    var arg01 : String = \"\"\"5/1\"\"\"\n    var x0 : Boolean = simplify(arg00, arg01);\n    var v0 : Boolean = true;\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"1/6\"\"\"\n    var arg11 : String = \"\"\"2/1\"\"\"\n    var x1 : Boolean = simplify(arg10, arg11);\n    var v1 : Boolean = false;\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"5/1\"\"\"\n    var arg21 : String = \"\"\"3/1\"\"\"\n    var x2 : Boolean = simplify(arg20, arg21);\n    var v2 : Boolean = true;\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"7/10\"\"\"\n    var arg31 : String = \"\"\"10/2\"\"\"\n    var x3 : Boolean = simplify(arg30, arg31);\n    var v3 : Boolean = false;\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"2/10\"\"\"\n    var arg41 : String = \"\"\"50/10\"\"\"\n    var x4 : Boolean = simplify(arg40, arg41);\n    var v4 : Boolean = true;\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"7/2\"\"\"\n    var arg51 : String = \"\"\"4/2\"\"\"\n    var x5 : Boolean = simplify(arg50, arg51);\n    var v5 : Boolean = true;\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"11/6\"\"\"\n    var arg61 : String = \"\"\"6/1\"\"\"\n    var x6 : Boolean = simplify(arg60, arg61);\n    var v6 : Boolean = true;\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : String = \"\"\"2/3\"\"\"\n    var arg71 : String = \"\"\"5/2\"\"\"\n    var x7 : Boolean = simplify(arg70, arg71);\n    var v7 : Boolean = false;\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : String = \"\"\"5/2\"\"\"\n    var arg81 : String = \"\"\"3/5\"\"\"\n    var x8 : Boolean = simplify(arg80, arg81);\n    var v8 : Boolean = false;\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : String = \"\"\"2/4\"\"\"\n    var arg91 : String = \"\"\"8/4\"\"\"\n    var x9 : Boolean = simplify(arg90, arg91);\n    var v9 : Boolean = true;\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n    var arg100 : String = \"\"\"2/4\"\"\"\n    var arg101 : String = \"\"\"4/2\"\"\"\n    var x10 : Boolean = simplify(arg100, arg101);\n    var v10 : Boolean = true;\n    if (x10 != v10) {\n        throw Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10)\n    }\n\n    var arg110 : String = \"\"\"1/5\"\"\"\n    var arg111 : String = \"\"\"5/1\"\"\"\n    var x11 : Boolean = simplify(arg110, arg111);\n    var v11 : Boolean = true;\n    if (x11 != v11) {\n        throw Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11)\n    }\n\n    var arg120 : String = \"\"\"1/5\"\"\"\n    var arg121 : String = \"\"\"1/5\"\"\"\n    var x12 : Boolean = simplify(arg120, arg121);\n    var v12 : Boolean = false;\n    if (x12 != v12) {\n        throw Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12)\n    }\n\n\n}\n", "description": "Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False", "language": "kotlin", "canonical_solution": "\n    val (a, b) = x.split(\"/\").map { it.toInt() }\n    val (c, d) = n.split(\"/\").map { it.toInt() }\n    val numerator = a * c\n    val denom = b * d\n    return numerator % denom == 0\n}\n", "code_without_comments": "fun simplify(x : String, n : String) : Boolean {\n    val (a, b) = x.split(\"/\").map { it.toInt() }\n    val (c, d) = n.split(\"/\").map { it.toInt() }\n    val numerator = a * c\n    val denom = b * d\n    return numerator % denom == 0\n}"}
{"task_id": "HumanEval_kotlin/148", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * There are eight planets in our solar system: the closerst to the Sun \n * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n * Uranus, Neptune.\n * Write a function that takes two planet names as strings planet1 and planet2. \n * The function should return a tuple containing all planets whose orbits are \n * located between the orbit of planet1 and the orbit of planet2, sorted by \n * the proximity to the sun. \n * The function should return an empty tuple if planet1 or planet2\n * are not correct planet names. \n * Examples\n * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n *\n */\nfun bf(planet1 : String, planet2 : String) : List<Any> {\n", "entry_point": "bf", "test": "\nfun main() {\n    var arg00 : String = \"\"\"Jupiter\"\"\"\n    var arg01 : String = \"\"\"Neptune\"\"\"\n    var x0 : List<Any> = bf(arg00, arg01);\n    var v0 : List<Any> = mutableListOf(\"\"\"Saturn\"\"\", \"\"\"Uranus\"\"\");\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : String = \"\"\"Earth\"\"\"\n    var arg11 : String = \"\"\"Mercury\"\"\"\n    var x1 : List<Any> = bf(arg10, arg11);\n    var v1 : List<Any> = mutableListOf(\"\"\"Venus\"\"\");\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : String = \"\"\"Mercury\"\"\"\n    var arg21 : String = \"\"\"Uranus\"\"\"\n    var x2 : List<Any> = bf(arg20, arg21);\n    var v2 : List<Any> = mutableListOf(\"\"\"Venus\"\"\", \"\"\"Earth\"\"\", \"\"\"Mars\"\"\", \"\"\"Jupiter\"\"\", \"\"\"Saturn\"\"\");\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : String = \"\"\"Neptune\"\"\"\n    var arg31 : String = \"\"\"Venus\"\"\"\n    var x3 : List<Any> = bf(arg30, arg31);\n    var v3 : List<Any> = mutableListOf(\"\"\"Earth\"\"\", \"\"\"Mars\"\"\", \"\"\"Jupiter\"\"\", \"\"\"Saturn\"\"\", \"\"\"Uranus\"\"\");\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : String = \"\"\"Earth\"\"\"\n    var arg41 : String = \"\"\"Earth\"\"\"\n    var x4 : List<Any> = bf(arg40, arg41);\n    var v4 : List<Any> = mutableListOf();\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : String = \"\"\"Mars\"\"\"\n    var arg51 : String = \"\"\"Earth\"\"\"\n    var x5 : List<Any> = bf(arg50, arg51);\n    var v5 : List<Any> = mutableListOf();\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : String = \"\"\"Jupiter\"\"\"\n    var arg61 : String = \"\"\"Makemake\"\"\"\n    var x6 : List<Any> = bf(arg60, arg61);\n    var v6 : List<Any> = mutableListOf();\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "language": "kotlin", "canonical_solution": "\n    val planetNames = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!planetNames.contains(planet1) || !planetNames.contains(planet2) || planet1 == planet2) {\n        return emptyList()\n    }\n    val planet1Index = planetNames.indexOf(planet1)\n    val planet2Index = planetNames.indexOf(planet2)\n    if (planet1Index < planet2Index) {\n        return planetNames.subList(planet1Index + 1, planet2Index)\n    } else {\n        return planetNames.subList(planet2Index + 1, planet1Index)\n    }\n}\n", "code_without_comments": "fun bf(planet1 : String, planet2 : String) : List<Any> {\n    val planetNames = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!planetNames.contains(planet1) || !planetNames.contains(planet2) || planet1 == planet2) {\n        return emptyList()\n    }\n    val planet1Index = planetNames.indexOf(planet1)\n    val planet2Index = planetNames.indexOf(planet2)\n    if (planet1Index < planet2Index) {\n        return planetNames.subList(planet1Index + 1, planet2Index)\n    } else {\n        return planetNames.subList(planet2Index + 1, planet1Index)\n    }\n}"}
{"task_id": "HumanEval_kotlin/149", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Write a function that accepts a list of strings as a parameter,\n * deletes the strings that have odd lengths from it,\n * and returns the resulted list with a sorted order,\n * The list is always a list of strings and never an array of numbers,\n * and it may contain duplicates.\n * The order of the list should be ascending by length of each word, and you\n * should return the list sorted by that rule.\n * If two words have the same length, sort the list alphabetically.\n * The function should return a list of strings in sorted order.\n * You may assume that all words will have the same length.\n * For example:\n * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n *\n */\nfun sortedListSum(lst : List<String>) : List<Any> {\n", "entry_point": "sortedListSum", "test": "\nfun main() {\n    var arg00 : List<String> = mutableListOf(\"\"\"aa\"\"\", \"\"\"a\"\"\", \"\"\"aaa\"\"\")\n    var x0 : List<Any> = sortedListSum(arg00);\n    var v0 : List<Any> = mutableListOf(\"\"\"aa\"\"\");\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<String> = mutableListOf(\"\"\"school\"\"\", \"\"\"AI\"\"\", \"\"\"asdf\"\"\", \"\"\"b\"\"\")\n    var x1 : List<Any> = sortedListSum(arg10);\n    var v1 : List<Any> = mutableListOf(\"\"\"AI\"\"\", \"\"\"asdf\"\"\", \"\"\"school\"\"\");\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<String> = mutableListOf(\"\"\"d\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"a\"\"\")\n    var x2 : List<Any> = sortedListSum(arg20);\n    var v2 : List<Any> = mutableListOf();\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<String> = mutableListOf(\"\"\"d\"\"\", \"\"\"dcba\"\"\", \"\"\"abcd\"\"\", \"\"\"a\"\"\")\n    var x3 : List<Any> = sortedListSum(arg30);\n    var v3 : List<Any> = mutableListOf(\"\"\"abcd\"\"\", \"\"\"dcba\"\"\");\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<String> = mutableListOf(\"\"\"AI\"\"\", \"\"\"ai\"\"\", \"\"\"au\"\"\")\n    var x4 : List<Any> = sortedListSum(arg40);\n    var v4 : List<Any> = mutableListOf(\"\"\"AI\"\"\", \"\"\"ai\"\"\", \"\"\"au\"\"\");\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<String> = mutableListOf(\"\"\"a\"\"\", \"\"\"b\"\"\", \"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"c\"\"\", \"\"\"a\"\"\")\n    var x5 : List<Any> = sortedListSum(arg50);\n    var v5 : List<Any> = mutableListOf();\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<String> = mutableListOf(\"\"\"aaaa\"\"\", \"\"\"bbbb\"\"\", \"\"\"dd\"\"\", \"\"\"cc\"\"\")\n    var x6 : List<Any> = sortedListSum(arg60);\n    var v6 : List<Any> = mutableListOf(\"\"\"cc\"\"\", \"\"\"dd\"\"\", \"\"\"aaaa\"\"\", \"\"\"bbbb\"\"\");\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n\n}\n", "description": "Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]", "language": "kotlin", "canonical_solution": "\n    val newLst = lst.filter { it.length % 2 == 0 }\n    return newLst.sortedWith(compareBy<String>({ it.length }, { it })).map { it as Any }\n}\n", "code_without_comments": "fun sortedListSum(lst : List<String>) : List<Any> {\n    val newLst = lst.filter { it.length % 2 == 0 }\n    return newLst.sortedWith(compareBy<String>({ it.length }, { it })).map { it as Any }\n}"}
{"task_id": "HumanEval_kotlin/158", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * Write a function that accepts a list of strings.\n * The list contains different words. Return the word with maximum number\n * of unique characters. If multiple strings have maximum number of unique\n * characters, return the one which comes first in lexicographical order.\n\n * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n *\n */\nfun findMax(words : List<String>) : String {\n", "entry_point": "findMax", "test": "\nfun main() {\n    var arg00 : List<String> = mutableListOf(\"\"\"name\"\"\", \"\"\"of\"\"\", \"\"\"string\"\"\")\n    var x0 : String = findMax(arg00);\n    var v0 : String = \"\"\"string\"\"\";\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : List<String> = mutableListOf(\"\"\"name\"\"\", \"\"\"enam\"\"\", \"\"\"game\"\"\")\n    var x1 : String = findMax(arg10);\n    var v1 : String = \"\"\"enam\"\"\";\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : List<String> = mutableListOf(\"\"\"aaaaaaa\"\"\", \"\"\"bb\"\"\", \"\"\"cc\"\"\")\n    var x2 : String = findMax(arg20);\n    var v2 : String = \"\"\"aaaaaaa\"\"\";\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : List<String> = mutableListOf(\"\"\"abc\"\"\", \"\"\"cba\"\"\")\n    var x3 : String = findMax(arg30);\n    var v3 : String = \"\"\"abc\"\"\";\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n    var arg40 : List<String> = mutableListOf(\"\"\"play\"\"\", \"\"\"this\"\"\", \"\"\"game\"\"\", \"\"\"of\"\"\", \"\"\"footbott\"\"\")\n    var x4 : String = findMax(arg40);\n    var v4 : String = \"\"\"footbott\"\"\";\n    if (x4 != v4) {\n        throw Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4)\n    }\n\n    var arg50 : List<String> = mutableListOf(\"\"\"we\"\"\", \"\"\"are\"\"\", \"\"\"gonna\"\"\", \"\"\"rock\"\"\")\n    var x5 : String = findMax(arg50);\n    var v5 : String = \"\"\"gonna\"\"\";\n    if (x5 != v5) {\n        throw Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5)\n    }\n\n    var arg60 : List<String> = mutableListOf(\"\"\"we\"\"\", \"\"\"are\"\"\", \"\"\"a\"\"\", \"\"\"mad\"\"\", \"\"\"nation\"\"\")\n    var x6 : String = findMax(arg60);\n    var v6 : String = \"\"\"nation\"\"\";\n    if (x6 != v6) {\n        throw Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6)\n    }\n\n    var arg70 : List<String> = mutableListOf(\"\"\"this\"\"\", \"\"\"is\"\"\", \"\"\"a\"\"\", \"\"\"prrk\"\"\")\n    var x7 : String = findMax(arg70);\n    var v7 : String = \"\"\"this\"\"\";\n    if (x7 != v7) {\n        throw Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7)\n    }\n\n    var arg80 : List<String> = mutableListOf(\"\"\"b\"\"\")\n    var x8 : String = findMax(arg80);\n    var v8 : String = \"\"\"b\"\"\";\n    if (x8 != v8) {\n        throw Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8)\n    }\n\n    var arg90 : List<String> = mutableListOf(\"\"\"play\"\"\", \"\"\"play\"\"\", \"\"\"play\"\"\")\n    var x9 : String = findMax(arg90);\n    var v9 : String = \"\"\"play\"\"\";\n    if (x9 != v9) {\n        throw Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9)\n    }\n\n\n}\n", "description": "Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"", "language": "kotlin", "canonical_solution": "\n    return words.sortedWith(compareByDescending<String> { it.toSet().size }.thenBy { it }).first()\n}\n", "code_without_comments": "fun findMax(words : List<String>) : String {\n    return words.sortedWith(compareByDescending<String> { it.toSet().size }.thenBy { it }).first()\n}"}
{"task_id": "HumanEval_kotlin/163", "prompt": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given two positive integers a and b, return the even digits between a\n * and b, in ascending order.\n\n * For example:\n * generate_integers(2, 8) => [2, 4, 6, 8]\n * generate_integers(8, 2) => [2, 4, 6, 8]\n * generate_integers(10, 14) => []\n *\n */\nfun generateIntegers(a : Int, b : Int) : List<Any> {\n", "entry_point": "generateIntegers", "test": "\nfun main() {\n    var arg00 : Int = 2\n    var arg01 : Int = 10\n    var x0 : List<Any> = generateIntegers(arg00, arg01);\n    var v0 : List<Any> = mutableListOf(2, 4, 6, 8);\n    if (x0 != v0) {\n        throw Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0)\n    }\n\n    var arg10 : Int = 10\n    var arg11 : Int = 2\n    var x1 : List<Any> = generateIntegers(arg10, arg11);\n    var v1 : List<Any> = mutableListOf(2, 4, 6, 8);\n    if (x1 != v1) {\n        throw Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1)\n    }\n\n    var arg20 : Int = 132\n    var arg21 : Int = 2\n    var x2 : List<Any> = generateIntegers(arg20, arg21);\n    var v2 : List<Any> = mutableListOf(2, 4, 6, 8);\n    if (x2 != v2) {\n        throw Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2)\n    }\n\n    var arg30 : Int = 17\n    var arg31 : Int = 89\n    var x3 : List<Any> = generateIntegers(arg30, arg31);\n    var v3 : List<Any> = mutableListOf();\n    if (x3 != v3) {\n        throw Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3)\n    }\n\n\n}\n", "description": "Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []", "language": "kotlin", "canonical_solution": "\n    val lower = maxOf(2, minOf(a, b))\n    val upper = minOf(8, maxOf(a, b))\n    return (lower..upper).filter { it % 2 == 0 }.map { it as Any }\n}\n", "code_without_comments": "fun generateIntegers(a : Int, b : Int) : List<Any> {\n    val lower = maxOf(2, minOf(a, b))\n    val upper = minOf(8, maxOf(a, b))\n    return (lower..upper).filter { it % 2 == 0 }.map { it as Any }\n}"}
